DROP DATABASE IF EXISTS Smart_Buildings;
CREATE DATABASE Smart_Buildings;
SET @timer = CURRENT_TIME();
SET FOREIGN_KEY_CHECKS = 0;
USE Smart_Buildings;

# CREAZIONE TABELLE

DROP TABLE IF EXISTS Edificio;
CREATE TABLE Edificio (
	ID INT AUTO_INCREMENT PRIMARY KEY,
    Stato FLOAT NOT NULL,
    Tipologia VARCHAR(50) NOT NULL,
	Locazione INT NOT NULL,
    FOREIGN KEY(Locazione) REFERENCES AreaGeografica(ID_Area)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Pianta;
CREATE TABLE Pianta(
	Codice_Pianta INT AUTO_INCREMENT PRIMARY KEY,
    Edificio INT NOT NULL,
    PuntiPerimetro INT NOT NULL,
    NumeroPiano INT NOT NULL,
    FOREIGN KEY(Edificio) REFERENCES Edificio(ID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Vano;
CREATE TABLE Vano(
	Codice_Vano INT AUTO_INCREMENT PRIMARY KEY,
    Funzione VARCHAR(50) NOT NULL,
    PuntiPerimetro INT NOT NULL,
    AltezzaMax INT NOT NULL, # IN METRI
	LunghezzaMax INT, # IN METRI
    LarghezzaMax INT, # IN METRI
    Pianta INT NOT NULL,
    Pavimentazione VARCHAR(50),
    FOREIGN KEY(Pavimentazione) REFERENCES Piastrelle(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Pianta) REFERENCES Pianta(Codice_Pianta) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Vertice;
CREATE TABLE Vertice(
	Numero_Vertice INT,
	Pianta INT,
    X FLOAT NOT NULL,
    Y FLOAT NOT NULL,
    PRIMARY KEY(Numero_Vertice, Pianta),
    FOREIGN KEY(Pianta) REFERENCES Pianta(Codice_Pianta) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS PosizionamentoVano;
CREATE TABLE PosizionamentoVano(
	Vano INT,
    Vertice INT,
    Pianta INT,
    PRIMARY KEY(Vano, Vertice, Pianta),
    FOREIGN KEY(Vano) REFERENCES Vano(Codice_Vano)
    	ON DELETE CASCADE
		ON UPDATE CASCADE,
    FOREIGN KEY(Vertice) REFERENCES Vertice(Numero_Vertice)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY(Pianta) REFERENCES Vertice(Pianta) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Muro;
CREATE TABLE Muro(
	Codice_Muro INT AUTO_INCREMENT PRIMARY KEY,
    Esterno BOOL NOT NULL,
    V1 INT NOT NULL,
    V2 INT NOT NULL,
    Pianta INT NOT NULL,
    FOREIGN KEY(V1) REFERENCES Vertice(Numero_Vertice),
    FOREIGN KEY(V2) REFERENCES Vertice(Numero_Vertice),
    FOREIGN KEY(Pianta) REFERENCES Pianta(Codice_Pianta)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Apertura;
CREATE TABLE Apertura(
	Codice_Apertura INT AUTO_INCREMENT PRIMARY KEY,
    X1 INT NOT NULL,
    X2 INT NOT NULL,
    Y1 INT NOT NULL,
    Y2 INT NOT NULL,
    Balcone BOOL NOT NULL,
    Tipologia VARCHAR(50) NOT NULL,
    PuntoCardinale VARCHAR(10) DEFAULT NULL,
    Muro INT NOT NULL,
    FOREIGN KEY(Muro) REFERENCES Muro(Codice_Muro) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS PuntoAccesso;
CREATE TABLE PuntoAccesso(
	Apertura INT,
	Vano INT,
    PRIMARY KEY(Apertura, Vano),
    FOREIGN KEY(Apertura) REFERENCES Apertura(Codice_Apertura),
    FOREIGN KEY(Vano) REFERENCES Vano(Codice_Vano)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS ProgettoEdilizio;
CREATE TABLE ProgettoEdilizio(
	ID_Progetto INT AUTO_INCREMENT PRIMARY KEY,
    Tipo VARCHAR(50) NOT NULL,
    DataApprovazione DATE NOT NULL, 
    DataInizio DATE NOT NULL, 
    StimaFine DATE NOT NULL,
    DataFine DATE,
    Edificio INT NOT NULL,
    FOREIGN KEY(Edificio) REFERENCES Edificio(ID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS StadioDiAvanzamento;
CREATE TABLE StadioDiAvanzamento(
	Numero INT,
    Progetto INT,
    DataInizio DATE,
    StimaFine DATE,
    DataFine DATE,
    Tipologia VARCHAR(50) NOT NULL,
    CostoPreventivato FLOAT NOT NULL,
    PRIMARY KEY(Numero, Progetto),
    FOREIGN KEY(Progetto) REFERENCES ProgettoEdilizio(ID_Progetto)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS TipologiaLavoro;
CREATE TABLE TipologiaLavoro(
	Nome VARCHAR(50) PRIMARY KEY,
    NumeroMinimoLavoratori INT NOT NULL,
    NumeroMassimoLavoratori INT NOT NULL,
    TempoStimato INT NOT NULL # In giorni
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Lavoro;
CREATE TABLE Lavoro(
	Codice_Lavoro INT AUTO_INCREMENT PRIMARY KEY,
	TipologiaDiLavoro VARCHAR(50) NOT NULL,
    DataInizio DATE NOT NULL, 
    DataFine DATE,
    Costo FLOAT DEFAULT NULL,
	Progetto INT NOT NULL,
    StadioDiAvanzamento INT NOT NULL,
    FOREIGN KEY(StadioDiAvanzamento) REFERENCES StadioDiAvanzamento(Numero)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
    FOREIGN KEY(Progetto) REFERENCES StadioDiAvanzamento(Progetto)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
    FOREIGN KEY(TipologiaDiLavoro) REFERENCES TipologiaLavoro(Nome)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Lavoratore;
CREATE TABLE Lavoratore(
	CodiceFiscale VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    Cognome VARCHAR(50) NOT NULL,
    Sesso VARCHAR(1) NOT NULL, # M, F, A
    Stipendio FLOAT NOT NULL, # Mensile in Euro
    DataNascita DATE NOT NULL,
    DataAssunzione DATE NOT NULL,
    Pensione BOOL DEFAULT FALSE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Capocantiere;
CREATE TABLE Capocantiere(
	CodiceFiscale VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    Cognome VARCHAR(50) NOT NULL,
    Sesso VARCHAR(1) NOT NULL, # M, F, A
    Stipendio FLOAT NOT NULL, # Mensile in Euro
    DataNascita DATE NOT NULL,
    DataAssunzione DATE NOT NULL,
	Pensione BOOL DEFAULT FALSE,
    NumeroMassimoLavoratori INT NOT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Responsabile;
CREATE TABLE Responsabile(
	CodiceFiscale VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    Cognome VARCHAR(50) NOT NULL,
    Sesso VARCHAR(1) NOT NULL, # M, F, A
    Stipendio FLOAT NOT NULL, # Mensile in Euro
    DataNascita DATE NOT NULL,
    DataAssunzione DATE NOT NULL,
	Pensione BOOL DEFAULT FALSE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Turni_Di_Lavoro_Lavoratore;
CREATE TABLE Turni_Di_Lavoro_Lavoratore(
	Lavoro INT,
	CodiceFiscale VARCHAR(50),
    OrarioInizio TIMESTAMP,
    OrarioFine TIMESTAMP,
    PRIMARY KEY(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine),
    FOREIGN KEY(CodiceFiscale) REFERENCES Lavoratore(CodiceFiscale)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1; 

DROP TABLE IF EXISTS Turni_Di_Lavoro_Capocantiere;
CREATE TABLE Turni_Di_Lavoro_Capocantiere(
	Lavoro INT,
	CodiceFiscale VARCHAR(50),
    OrarioInizio TIMESTAMP,
    OrarioFine TIMESTAMP,
    PRIMARY KEY(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine),
    FOREIGN KEY(CodiceFiscale) REFERENCES Capocantiere(CodiceFiscale),
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Turni_Di_lavoro_Responsabile;
CREATE TABLE Turni_Di_Lavoro_Responsabile(
	Lavoro INT,
	CodiceFiscale VARCHAR(50),
    OrarioInizio TIMESTAMP,
    OrarioFine TIMESTAMP,
    PRIMARY KEY(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine),
    FOREIGN KEY(CodiceFiscale) REFERENCES Responsabile(CodiceFiscale)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Responsabilita;
CREATE TABLE Responsabilita(
	Responsabile VARCHAR(50),
    Progetto INT,
    PRIMARY KEY(Responsabile, Progetto),
    FOREIGN KEY(Responsabile) REFERENCES Responsabile(CodiceFiscale)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Progetto) REFERENCES ProgettoEdilizio(ID_Progetto)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS AreaGeografica;
CREATE TABLE AreaGeografica(
	ID_Area INT PRIMARY KEY,
    Nome VARCHAR(50),
    Nazione VARCHAR(50)
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS PericoloGeologico;
CREATE TABLE PericoloGeologico(
	Area INT,
    Pericolo VARCHAR(50),
    CoefficienteRischio FLOAT,
    PRIMARY KEY(Area, Pericolo),
    FOREIGN KEY(Area) REFERENCES AreaGeografica(ID_Area)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Calamita;
CREATE TABLE Calamita(
	Area INT NOT NULL, 
	Data DATE NOT NULL,
    Orario TIME NOT NULL,
	Nome VARCHAR(50) NOT NULL,
    Epicentro FLOAT NOT NULL, # IN KM
    Intensita INT NOT NULL,
	Gravita FLOAT,
    PRIMARY KEY(Area, Data, Orario),
    FOREIGN KEY(Area) REFERENCES AreaGeografica(ID_Area)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS AltriMateriali;
CREATE TABLE AltriMateriali(
	Codice_Lotto VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    QuantitaComprata FLOAT NOT NULL, # IN KG
    QuantitaStoccata FLOAT NOT NULL, # IN KG
    Fornitore VARCHAR(50) NOT NULL,
    Costo FLOAT NOT NULL, # IN EURO
    DataAcquisto DATE NOT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Intonaco;
CREATE TABLE Intonaco(
	Codice_Lotto VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    QuantitaComprata FLOAT NOT NULL, # IN KG
    QuantitaStoccata FLOAT NOT NULL, # IN KG
    Fornitore VARCHAR(50) NOT NULL,
    Costo FLOAT NOT NULL, # IN EURO
    DataAcquisto DATE NOT NULL,
    Colore VARCHAR(50) NOT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Mattoni;
CREATE TABLE Mattoni(
	Codice_Lotto VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    QuantitaComprata FLOAT NOT NULL, # IN KG
    QuantitaStoccata FLOAT NOT NULL, # IN KG
    Fornitore VARCHAR(50) NOT NULL,
    Costo FLOAT NOT NULL, # IN EURO
    DataAcquisto DATE NOT NULL,
    Alveolatura VARCHAR(50) NOT NULL
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Piastrelle;
CREATE TABLE Piastrelle(
	Codice_Lotto VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    QuantitaComprata FLOAT NOT NULL, # IN KG
    QuantitaStoccata FLOAT NOT NULL, # IN KG
    Fornitore VARCHAR(50) NOT NULL,
    Costo FLOAT NOT NULL, # IN EURO
    DataAcquisto DATE NOT NULL,
    Forma VARCHAR(50) NOT NULL,
    Fuga INT NOT NULL # IN MM
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Pietre;
CREATE TABLE Pietre(
	Codice_Lotto VARCHAR(50) PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL,
    QuantitaComprata FLOAT NOT NULL, # IN KG
    QuantitaStoccata FLOAT NOT NULL, # IN KG
    Fornitore VARCHAR(50) NOT NULL,
    Costo FLOAT NOT NULL, # IN EURO
    DataAcquisto DATE NOT NULL,
    Spessore INT NOT NULL # IN MM
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Strato;
CREATE TABLE Strato(
	Muro INT NOT NULL,
	Lotto_Intonaco VARCHAR(50),
    Spessore INT,
    PRIMARY KEY(Muro, Lotto_Intonaco),
    FOREIGN KEY(Lotto_Intonaco) REFERENCES Intonaco(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Muro) REFERENCES Muro(Codice_Muro)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS DisposizioneMattoni;
CREATE TABLE DisposizioneMattoni(
	Muro INT NOT NULL,
	Lotto_Mattoni VARCHAR(50),
    PRIMARY KEY(Muro, Lotto_Mattoni),
    FOREIGN KEY(Lotto_Mattoni) REFERENCES Mattoni(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Muro) REFERENCES Muro(Codice_Muro)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS DisposizionePietre;
CREATE TABLE DisposizionePietre(
	Muro INT NOT NULL,
	Lotto_Pietre VARCHAR(50),
    Disposizione VARCHAR(50),
    PRIMARY KEY(Muro, Lotto_Pietre),
    FOREIGN KEY(Lotto_Pietre) REFERENCES Pietre(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Muro) REFERENCES Muro(Codice_Muro)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS ImpiegoAltriMateriali;
CREATE TABLE ImpiegoAltriMateriali(
	Lavoro INT,
	Lotto_Altri_Materiali VARCHAR(50),
    Quantita FLOAT NOT NULL, # IN KG
    PRIMARY KEY(Lavoro, Lotto_Altri_Materiali),
    FOREIGN KEY(Lotto_Altri_Materiali) REFERENCES AltriMateriali(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS ImpiegoIntonaco;
CREATE TABLE ImpiegoIntonaco(
	Lavoro INT,
	Lotto_Intonaco VARCHAR(50),
	Quantita FLOAT NOT NULL, # IN KG
    PRIMARY KEY(Lavoro, Lotto_Intonaco),
    FOREIGN KEY(Lotto_Intonaco) REFERENCES Intonaco(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS ImpiegoMattoni;
CREATE TABLE ImpiegoMattoni(
	Lavoro INT,
	Lotto_Mattoni VARCHAR(50),
    Quantita FLOAT NOT NULL, # IN KG
    PRIMARY KEY(Lavoro, Lotto_Mattoni),
    FOREIGN KEY(Lotto_Mattoni) REFERENCES Mattoni(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS ImpiegoPiastrelle;
CREATE TABLE ImpiegoPiastrelle(
	Lavoro INT,
	Lotto_Piastrelle VARCHAR(50),
    Quantita FLOAT NOT NULL, # IN KG
    PRIMARY KEY(Lavoro, Lotto_Piastrelle),
    FOREIGN KEY(Lotto_Piastrelle) REFERENCES Piastrelle(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS ImpiegoPietre;
CREATE TABLE ImpiegoPietre(
	Lavoro INT,
	Lotto_Pietre VARCHAR(50),
    Quantita FLOAT NOT NULL, # IN KG
    PRIMARY KEY(Lavoro, Lotto_Pietre),
    FOREIGN KEY(Lotto_Pietre) REFERENCES Pietre(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE,
    FOREIGN KEY(Lavoro) REFERENCES Lavoro(Codice_Lavoro)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Soffitto;
CREATE TABLE Soffitto(
	Vano INT, 
    Lotto_Pietre VARCHAR(50),
    PRIMARY KEY(Vano, Lotto_Pietre),
    FOREIGN KEY(Vano) REFERENCES Vano(Codice_Vano)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
    FOREIGN KEY(Lotto_Pietre) REFERENCES Pietre(Codice_Lotto)
		ON DELETE NO ACTION
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Sensore;
CREATE TABLE Sensore(
	Codice_Seriale INT,
    Categoria VARCHAR(50),
    UnitaMisura VARCHAR(10),
    Alert FLOAT NOT NULL,
    Vano INT NOT NULL,
    PRIMARY KEY(Codice_Seriale, Categoria),
    FOREIGN KEY(Vano) REFERENCES Vano(Codice_Vano) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Registrazione;
CREATE TABLE Registrazione(
	ID_Sensore INT,
    TipoSensore VARCHAR(50),
	Data DATE NOT NULL,
	Orario TIME NOT NULL,
    ValoreRegistrato FLOAT,
    PRIMARY KEY(ID_Sensore, TipoSensore, Data),
    FOREIGN KEY(ID_Sensore, TipoSensore) REFERENCES Sensore(Codice_Seriale, Categoria)
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

DROP TABLE IF EXISTS Crepa;
CREATE TABLE Crepa(
    ID_Sensore INT,
    TipoSensore VARCHAR(50),
    Muro INT NOT NULL,
    PRIMARY KEY(ID_Sensore, TipoSensore, Muro),
    FOREIGN KEY(ID_Sensore, TipoSensore) REFERENCES Sensore(Codice_Seriale, Categoria)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
    FOREIGN KEY(Muro) REFERENCES Muro(Codice_Muro) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
) ENGINE = InnoDB DEFAULT CHARSET = latin1;

SET FOREIGN_KEY_CHECKS = 1;

# FUNZIONI DI UTILITÀ

# Questa funzione prende come input le coordinate (x;y) di un vertice e il codice della pianta e vede se è all'interno del perimetro
DROP FUNCTION IF EXISTS Controllo_Punto_Interno_Perimetro_Pianta;
DELIMITER $$
CREATE FUNCTION Controllo_Punto_Interno_Perimetro_Pianta(x FLOAT, y FLOAT, codice_pianta INT)
RETURNS BOOL DETERMINISTIC
BEGIN
		DECLARE finito INT DEFAULT 0;
		DECLARE contatore INT DEFAULT 1;
        DECLARE numero_punti INT DEFAULT 0;
        DECLARE x0 INT DEFAULT 0;
        DECLARE x1 INT DEFAULT 0;
        DECLARE y0 INT DEFAULT 0;
        DECLARE y1 INT DEFAULT 0;
        DECLARE intersezione INT DEFAULT 0;
        DECLARE numero_intersezioni INT DEFAULT 0;
        
	    ciclo: LOOP
			IF
				contatore < numero_punti
			THEN 
            BEGIN
                SET x0 = (SELECT V.X
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = contatore);
			
				SET y0 = (SELECT V.Y
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = contatore);
				
				SET x1 = (SELECT V.X
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = (contatore+1));

				SET y1 = (SELECT V.Y
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = (contatore+1));
                                
				IF
					y0 = y1
                THEN
					LEAVE ciclo;
                END IF;
								
				SET intersezione = ((y - y0)/(y1 -y0)*(x1-x0))+x0;
				
				IF
					x < intersezione
					AND
					intersezione BETWEEN x0 AND x1
				THEN
					SET numero_intersezioni = numero_intersezioni+1;
				END IF;
			END;
            END IF;
			
            IF
				contatore = numero_punti
			THEN 
            BEGIN
                SET x0 = (SELECT V.X
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = contatore);
			
				SET y0 = (SELECT V.Y
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = contatore);
				
				SET x1 = (SELECT V.X
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = 1);

				SET y1 = (SELECT V.Y
						  FROM Vertice V
						  WHERE V.Pianta = codice_pianta
							   AND
								V.Numero_Vertice = 1);
				                                
				IF
					y0 = y1
                THEN
					LEAVE ciclo;
                END IF;
						
				SET intersezione = ((y - y0)/(y1 -y0)*(x1-x0))+x0;
				
				IF
					x < intersezione
					AND
					intersezione BETWEEN x0 AND x1
				THEN
					SET numero_intersezioni = numero_intersezioni+1;
				END IF;
			END;
            END IF;
            
            IF
				contatore > numero_punti
			THEN                
                LEAVE ciclo;
            END IF;
            
			SET contatore = contatore+1;
        END LOOP ciclo; 
        
		IF
			numero_intersezioni % 2 = 0
		THEN
			RETURN FALSE;
		END IF;
        
        RETURN TRUE;
END $$
DELIMITER ;

# Questa funzione prende come input le coordinate (x;y) di un vertice e il codice della pianta e vede se è all'interno del perimetro o di un vano
DROP FUNCTION IF EXISTS Controllo_Punto_Interno_Pianta;
DELIMITER $$
CREATE FUNCTION Controllo_Punto_Interno_Pianta(x FLOAT, y FLOAT, codice_pianta INT)
RETURNS BOOL DETERMINISTIC
BEGIN
	DECLARE interno_perimetro BOOL DEFAULT TRUE;
	DECLARE finito INT DEFAULT 0;	
	DECLARE contatore INT DEFAULT 1;
        DECLARE numero_punti INT DEFAULT 0;
        DECLARE x0 INT DEFAULT 0;
        DECLARE x1 INT DEFAULT 0;
        DECLARE y0 INT DEFAULT 0;
        DECLARE y1 INT DEFAULT 0;
        DECLARE intersezione INT DEFAULT 0;
        DECLARE numero_intersezioni INT DEFAULT 0;
        DECLARE codice_vano INT; 
        DECLARE minimo INT DEFAULT 1;
        
        DECLARE cursore_codici_vano CURSOR FOR
			SELECT V.Codice_Vano
			FROM Vano V 
			WHERE V.Pianta = codice_pianta;
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
        
        SELECT Controllo_Punto_Interno_Perimetro_Pianta(x, y, codice_pianta) INTO interno_perimetro;
	    
		IF
			interno_perimetro = FALSE
		THEN
			RETURN FALSE;
		END IF;
               
        OPEN cursore_codici_vano;
		controllo_vano: LOOP
			FETCH cursore_codici_vano INTO codice_vano;
            
            IF finito = 1 THEN
				LEAVE controllo_vano;
			END IF;
            
            SET numero_intersezioni = 0;
            
            SET contatore = (SELECT MIN(Ve.Numero_Vertice)
							 FROM Vertice Ve INNER JOIN Posizionamento_Vano PV ON Ve.Numero_Vertice = PV.Vertice
											 INNER JOIN Vano Va ON PV.Vano = Va.Codice_Vano
							 WHERE Ve.Pianta = codice_pianta
								  AND 
								   Va.Pianta = codice_pianta
								  AND
								   Va.Codice_Vano = codice_vano);
                                   
            SET numero_punti = (SELECT MAX(Ve.Numero_Vertice)
								FROM Vertice Ve INNER JOIN Posizionamento_Vano PV ON Ve.Numero_Vertice = PV.Vertice
								                INNER JOIN Vano Va ON PV.Vano = Va.Codice_Vano
								WHERE Ve.Pianta = codice_pianta
									 AND 
									  Va.Pianta = codice_pianta
									 AND
									  Va.Codice_Vano = codice_vano);
			
            SET minimo = contatore;
            
			ciclo: LOOP
					IF
						contatore < numero_punti
					THEN 
					BEGIN
						SET x0 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
					
						SET y0 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
						
						SET x1 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = (contatore+1));

						SET y1 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = (contatore+1));
										
						IF
							y0 = y1
						THEN
							LEAVE ciclo;
						END IF;
										
						SET intersezione = ((y - y0)/(y1 -y0)*(x1-x0))+x0;
						
						IF
							x < intersezione
							AND
							intersezione BETWEEN x0 AND x1
						THEN
							SET numero_intersezioni = numero_intersezioni+1;
						END IF;
					END;
					END IF;
					
					IF
						contatore = numero_punti
					THEN 
					BEGIN
						SET x0 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
					
						SET y0 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
						
						SET x1 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = minimo);

						SET y1 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = minimo);
														
						IF
							y0 = y1
						THEN
							LEAVE ciclo;
						END IF;
								
						SET intersezione = ((y - y0)/(y1 - y0)*(x1 - x0))+x0;
						
						IF
							x < intersezione
							AND
							intersezione BETWEEN x0 AND x1
						THEN
							SET numero_intersezioni = numero_intersezioni+1;
						END IF;
					END;
					END IF;
					
					IF
						contatore > numero_punti
					THEN                
						LEAVE ciclo;
					END IF;
					
					SET contatore = contatore+1;
				END LOOP ciclo; 
				
				IF
					numero_intersezioni % 2 = 0
				THEN
					RETURN FALSE;
				END IF;
                
			END LOOP controllo_vano;
        
        RETURN TRUE;
END $$
DELIMITER ;

# Funzione che dato due segmenti in input, restituisce TRUE se si intersecano e FALSE altrimenti
DROP FUNCTION IF EXISTS Intersezione;
DELIMITER $$
CREATE FUNCTION Intersezione(x1 FLOAT, y1 FLOAT, x2 FLOAT, y2 FLOAT, x3 FLOAT, y3 FLOAT, x4 FLOAT, y4 FLOAT)
RETURNS BOOL DETERMINISTIC 
BEGIN
	DECLARE intersezione BOOL DEFAULT FALSE;
	DECLARE m, q, _m, _q FLOAT DEFAULT 0;
	DECLARE x_inter, y_inter FLOAT DEFAULT 0;
	DECLARE min_x_v1, min_y_v1, min_x_v2, min_y_v2 FLOAT DEFAULT 0;
    DECLARE max_x_v1, max_y_v1, max_x_v2, max_y_v2 FLOAT DEFAULT 0;

	IF 
		x1 < x2 
    THEN 
		SET min_x_v1 = x1;
	ELSEIF 
		x1 >= x2 
	THEN 
		SET max_x_v1 = x2;
    END IF;

	IF 
		y1 < y2 
	THEN 
		SET min_y_v1 = y1;
	ELSEIF 
		y1 >= y2 
	THEN 
		SET max_y_v1 = y2;
	END IF;
    
	IF 
		x3 < x4 
	THEN 
		SET min_x_v2 = x3;
	ELSEIF
		x3 >= x4
    THEN
		SET min_x_v2 = x4;
	END IF;

	IF 
		y3 < y4 
    THEN
		SET min_y_v2 = y3;
	ELSEIF
		y3 >= y4
    THEN 
		SET min_y_v2 = y4;
	END IF;

	IF 
		x1 <> x2 AND x3 <> x4
	THEN 
		SET m = (y2 - y1) / (x2 - x1) ;
		SET _m = (y4 - y3) / (x4 - x3) ;
		SET q = y1 - M * x1 ;
		SET _q = y3 - M * x3 ;
		IF 
			m <> _m
		THEN
			SET x_inter = (q - _q) / (_m - m) ;
			SET y_inter = x_inter * m + q;
			# Controllo che il punto appartenga ai due segmenti
			IF 
				x_inter BETWEEN x1 AND x3 OR x_inter BETWEEN x2 AND x3 OR x_inter BETWEEN x1 AND x4 OR x_inter BETWEEN x2 AND x4
            THEN
				IF 
					y_inter BETWEEN y1 AND y3 OR y_inter BETWEEN y2 AND y3 OR y_inter BETWEEN y1 AND y4 OR y_inter BETWEEN y2 AND y4
				THEN
					SET intersezione = TRUE;
				END IF;
			END IF;
		END IF;
	ELSEIF 
		x1 <> x2 AND x3 = x4
	THEN
		SET m = (y2 - y1) / (x2 - x1) ;
		SET q = y1 - M * x1 ;
		SET x_inter = x3;
		SET y_inter = M * x3 + Q;
		IF 
			x_inter BETWEEN x1 AND x3 OR x_inter BETWEEN x2 AND x3 OR x_inter BETWEEN x1 AND x4 OR x_inter BETWEEN x2 AND x4
        THEN
			IF 
				y_inter BETWEEN y1 AND y3 OR y_inter BETWEEN y2 AND y3 OR y_inter BETWEEN y1 AND y4 OR y_inter BETWEEN y2 AND y4
			THEN
					SET intersezione = TRUE;
			END IF;
		END IF;
	ELSEIF 
		x3 <> x4 AND x1 = x2
	THEN
		SET m = (y4 - y3) / (x4 - x3);
		SET q = y3 - m * x3 ;
		SET x_inter = x1;
		SET y_inter = m * x1 + q;
		IF 
			x_inter BETWEEN x1 AND x3 OR x_inter BETWEEN x2 AND x3 OR x_inter BETWEEN x1 AND x4 OR x_inter BETWEEN x2 AND x4
		THEN
			IF 
				y_inter BETWEEN y1 AND y3 OR y_inter BETWEEN y2 AND y3 OR y_inter BETWEEN y1 AND y4 OR y_inter BETWEEN y2 AND y4
			THEN
				SET intersezione = TRUE;
			END IF;
		END IF;
	END IF;
	RETURN intersezione;
END $$
DELIMITER ;

DROP TRIGGER IF EXISTS Collocazione_Pianta
DELIMITER $$
CREATE TRIGGER Collocazione_Pianta
BEFORE INSERT ON Vertice
BEGIN
DECLARE Quanti_vertici INT DEFAULT 0;
DECLARE fintito INT DEFAULT 0;
DECLARE Punti_pianta INT DEFAULT 0;
DECLARE ultimo_x, ultimoy FLOAT DEFAULT 0;

DECLARE Punti_pianta INT DEFAULT 0;DECLARE muri CURSOR FOR
		SELECT M.V1, M.V2, V1.X, V1.Y, V2.X, V2.Y
		FROM Muro M INNER JOIN Vertice V1 ON M.V1 = V1.Numero_Vertice INNER JOIN Vertice V2 ON M.V2 = V2.Numero_Vertice 
		WHERE M.Pianta = NEW.Pianta AND V1.Pianta = NEW.Pianta AND V2.Pianta = NEW.Pianta;
		
DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;

SET Quanti_vertici =
(
	SELECT COUNT(*)
	FROM Vertice
	WHERE Pianta = NEW.Pianta
);

SET Punti_pianta =
(
	SELECT PuntiPerimetro FROM Pianta WHERE CodicePianta = NEW.Pianta
);

SET ultimo_x =
(
	SELECT x
	FROM Vertice
	WHERE Pianta = NEW.Pianta AND Numero = NEW.Numero - 1 ;
);

SET ultimo_y =
(
	SELECT y
	FROM Vertice
	WHERE Pianta = NEW.Pianta AND Numero = NEW.Numero - 1 ;
);

IF Quanti_vertici < Punti_pianta - 1 AND NEW.Numero <> 1
THEN
(
	OPEN muri;
	ciclo: LOOP
	FETCH INTO v3, v4, x3, y3, x4 ,y4;
	IF Intersezione (NEW.x, NEW.y, ultimo_x, ultimo_y, x3, y3, x4, y4) = TRUE
	THEN SIGNAL SQL STATE '45000' SET MESSAGE_TEXT = 'Impossibile inserire! Planimetria impossibile!' 
	IF finito = 1
	THEN END LOOP;
)
END IF;

IF Quanti_vertici = Punti_pianta - 1 AND NEW.Numero <> 1
THEN
(
	OPEN muri;
	ciclo: LOOP
	FETCH INTO v3, v4, x3, y3, x4 ,y4;
	IF Intersezione (NEW.x, NEW.y, ultimo_x, ultimo_y, x3, y3, x4, y4) = TRUE
	THEN SIGNAL SQL STATE '45000' SET MESSAGE_TEXT = 'Impossibile inserire! Planimetria impossibile!' 
	IF finito = 1
	THEN 
	(
		SET ultimo_x =
		(
			SELECT X
			FROM Vertice
			WHERE Pianta = NEW.Pianta AND Numero = ( SELECT MIN(_V.Numero) FROM Vertice _V WHERE _V.Pianta = NEW.Pianta
		);
		
		SET ultimo_y =
		(
			SELECT Y
			FROM Vertice
			WHERE Pianta = NEW.Pianta AND Numero = ( SELECT MIN(_V.Numero) FROM Vertice _V WHERE _V.Pianta = NEW.Pianta
		);
		
		IF Intersezione (NEW.x, NEW.y, ultimo_x, ultimo_y, x3, y3, x4, y4) = TRUE
		THEN SIGNAL SQL STATE '45000' SET MESSAGE_TEXT = 'Impossibile inserire! Planimetria impossibile!
		
		END LOOP;
	)
)
END IF;

END $$
DELIMITER ;

DROP TRIGGER IF EXISTS Creazione_muri_pianta
DELIMITER $$
CREATE TRIGGER Creazione_muri_pianta
AFTER INSERT ON Vertice
BEGIN

DECLARE Ultimo INT DEFAULT 0;
DECLARE Quanti_vertici INT DEFAULT 0;
DECLARE Punti_pianta INT DEFAULT 0;

# INSERIRE UN IF CHE CONTROLLA CHE IL VERTICE INSERITO NON SIA IL PRIMO

SET Quanti_vertici =
(
	SELECT COUNT(*)
	FROM Vertice
	WHERE Pianta = NEW.Pianta
);

SET Punti_pianta =
(
	SELECT PuntiPerimetro FROM Pianta WHERE CodicePianta = NEW.Pianta
);

IF Quanti_vertici = Punti_pianta - 1 AND NEW.Numero <> 1
SET Ultimo =
(
	SELECT Numero
	FROM Vertice
	WHERE Numero = NEW.Numero - 1 ;
)

INSERT ON Muro(FALSE, Ultimo, NEW.Numero, NEW.Pianta)

END $$
DELIMITER ;


# Questa funzione prende come input le coordinate (x;y) di un vertice e il codice della pianta e vede se è all'interno di un muro
DROP FUNCTION IF EXISTS Controllo_Punto_Su_Muro;
DELIMITER $$
CREATE FUNCTION Controllo_Punto_Su_Muro(x FLOAT, y FLOAT, codice_pianta INT)
RETURNS BOOL DETERMINISTIC
BEGIN

	DECLARE interno_pianta BOOL DEFAULT TRUE;
	DECLARE finito INT DEFAULT 0;
	DECLARE contatore INT DEFAULT 1;
        DECLARE numero_punti INT DEFAULT 0;
        DECLARE x0 INT DEFAULT 0;
        DECLARE x1 INT DEFAULT 0;
        DECLARE y0 INT DEFAULT 0;
        DECLARE y1 INT DEFAULT 0;
        DECLARE r_x INT DEFAULT 0;
        DECLARE r_y INT DEFAULT 0;
        DECLARE codice_vano INT; 
        DECLARE minimo INT DEFAULT 1;
        
        DECLARE cursore_codici_vano CURSOR FOR
			SELECT V.Codice_Vano
			FROM Vano V 
			WHERE V.Pianta = codice_pianta;
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
        
        SELECT Controllo_Punto_Interno_Pianta(x, y, codice_pianta) INTO interno_pianta;
	    
		IF
			interno_perimetro = FALSE
		THEN
			RETURN FALSE;
		END IF;
               
        OPEN cursore_codici_vano;
		controllo_vano: LOOP
			FETCH cursore_codici_vano INTO codice_vano;
            
            IF finito = 1 THEN
				LEAVE controllo_vano;
			END IF;
            
            SET contatore = (SELECT MIN(Ve.Numero_Vertice)
							 FROM Vertice Ve INNER JOIN Posizionamento_Vano PV ON Ve.Numero_Vertice = PV.Vertice
											 INNER JOIN Vano Va ON PV.Vano = Va.Codice_Vano
							 WHERE Ve.Pianta = codice_pianta
								  AND 
								   Va.Pianta = codice_pianta
								  AND
								   Va.Codice_Vano = codice_vano);
                                   
            SET numero_punti = (SELECT MAX(Ve.Numero_Vertice)
								FROM Vertice Ve INNER JOIN Posizionamento_Vano PV ON Ve.Numero_Vertice = PV.Vertice
								                INNER JOIN Vano Va ON PV.Vano = Va.Codice_Vano
								WHERE Ve.Pianta = codice_pianta
									 AND 
									  Va.Pianta = codice_pianta
									 AND
									  Va.Codice_Vano = codice_vano);
			
            SET minimo = contatore;
            
			ciclo: LOOP
					IF
						contatore < numero_punti
					THEN 
					BEGIN
						SET x0 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
					
						SET y0 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
						
						SET x1 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = (contatore+1));

						SET y1 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = (contatore+1));
										
						IF
							y0 = y1
						THEN
							LEAVE ciclo;
						END IF;
										
						SET r_x = (x-x0)/(x1-x0);
                        SET r_y = (y-y0)/(y1-y0);
						
						IF
							r_x = r_y
						THEN
							RETURN TRUE;
						END IF;
					END;
					END IF;
					
					IF
						contatore = numero_punti
					THEN 
					BEGIN
						SET x0 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
					
						SET y0 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = contatore);
						
						SET x1 = (SELECT V.X
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = minimo);

						SET y1 = (SELECT V.Y
								  FROM Vertice V INNER JOIN Posizionamento_Vano ON V.Numero_Vertice = PV.Vertice
								  WHERE V.Pianta = codice_pianta
									   AND
                                        PV.Vano = codice_vano
									   AND
										V.Numero_Vertice = minimo);
														
						IF
							y0 = y1
						THEN
							LEAVE ciclo;
						END IF;
								
						SET r_x = (x-x0)/(x1-x0);
                        SET r_y = (y-y0)/(y1-y0);
						
						IF
							r_x = r_y
						THEN
							RETURN TRUE;
						END IF;
					END;
					END IF;
					
					IF
						contatore > numero_punti
					THEN                
						LEAVE ciclo;
					END IF;
					
					SET contatore = contatore+1;
				END LOOP ciclo;                 
			END LOOP controllo_vano;
        
        RETURN FALSE;
END $$
DELIMITER ;

# Funzione che date due date in input restituisce in output la differenza tra queste due date senza contare Sabato e Domenica
DROP FUNCTION IF EXISTS Differenza_Date_Senza_Weekend;
DELIMITER $$
CREATE FUNCTION Differenza_Date_Senza_Weekend(date1 DATE, date2 DATE)
RETURNS INT DETERMINISTIC
BEGIN    
	RETURN ABS(DATEDIFF(date2, date1)) + 1
		 - ABS(DATEDIFF(ADDDATE(date2, INTERVAL 1 - DAYOFWEEK(date2) DAY),
						ADDDATE(date1, INTERVAL 1 - DAYOFWEEK(date1) DAY))) / 7 * 2
		 - (DAYOFWEEK(IF(date1 < date2, date1, date2)) = 1)
		 - (DAYOFWEEK(IF(date1 > date2, date1, date2)) = 7);
END $$
DELIMITER ;

# Stored Procedure che aggiorna il numero massimo di Lavoratori per Capocantiere che serve all'Event "Aggiorna_Lavoratori_Per_Capocantiere"
DROP PROCEDURE IF EXISTS Aggiornamento_Max_N;
DELIMITER $$
CREATE PROCEDURE Aggiornamento_Max_N()
BEGIN
	DECLARE finito INT DEFAULT 0;
	DECLARE capocantiere VARCHAR(50) DEFAULT '';
    DECLARE numero_lavoratori INT DEFAULT 0;
    DECLARE lavori_anticipo, lavori_ritardo INT DEFAULT 0;
    
    DECLARE lista_capocantieri CURSOR FOR
		SELECT C.CodiceFiscale, C.NumeroMassimoLavoratori
        FROM Capocantiere C;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
    OPEN lista_capocantieri;
    ciclo: LOOP
		FETCH lista_capocantieri INTO capocantiere, numero_lavoratori;
		
        SET lavori_ritardo = (SELECT IFNULL(COUNT(DISTINCT L.Codice), 0)
							  FROM Lavoro L INNER JOIN Turni_Di_Lavoro_Capocantiere T ON L.Codice = T.Lavoro
											INNER JOIN TipologiaLavoro TL ON L.TipologiaDiLavoro = TL.Nome
                              WHERE T.CodiceFiscale = capocantiere
								   AND
									YEAR(L.DataFine) = YEAR(CURRENT_DATE())
								   AND
                                    Differenza_Date_Senza_Weekend(L.DataFine, L.DataInizio) > TL.TempoStimato);
                                    
        SET lavori_anticipo = (SELECT IFNULL(COUNT(*), 0)
						 	   FROM Lavoro L INNER JOIN Turni_Di_Lavoro_Capocantiere T ON L.Codice = T.Lavoro
											 INNER JOIN TipologiaLavoro TL ON L.TipologiaDiLavoro = TL.Nome
                               WHERE T.CodiceFiscale = capocantiere
								    AND
									 YEAR(L.DataFine) = YEAR(CURRENT_DATE())
								    AND
                                     Differenza_Date_Senza_Weekend(L.DataFine, L.DataInizio) < TL.TempoStimato);
                                     
		IF
			lavori_anticipo - lavori_ritardo >= 10
            AND
            numero_lavoratori > 3
        THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori - 1
            WHERE CodiceFiscale = capocantiere;
		ELSEIF 
			lavori_ritardo - lavori_anticipo >= 5
            AND
            lavori_ritardo - lavori_anticipo < 10
            AND
            numero_lavoratori < 15
        THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori + 1
            WHERE CodiceFiscale = capocantiere;
		ELSEIF
			lavori_ritardo - lavori_anticipo >= 10
            AND
            lavori_ritardo - lavori_anticipo < 25
            AND
            numero_lavoratori < 14
		THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori + 2
            WHERE CodiceFiscale = capocantiere;   
		ELSEIF
			lavori_ritardo - lavori_anticipo >= 10
            AND
            lavori_ritardo - lavori_anticipo < 25
            AND
            numero_lavoratori = 14
		THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori + 1
            WHERE CodiceFiscale = capocantiere;   
		ELSEIF
			lavori_ritardo - lavori_anticipo >= 25
            AND
            numero_lavoratori < 13
		THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori + 3
            WHERE CodiceFiscale = capocantiere;     
		ELSEIF
			lavori_ritardo - lavori_anticipo >= 25
            AND
            numero_lavoratori = 13
		THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori + 2
            WHERE CodiceFiscale = capocantiere; 
		ELSEIF
			lavori_ritardo - lavori_anticipo >= 25
            AND
            numero_lavoratori = 14
		THEN
			UPDATE Capocantiere
            SET NumeroMassimoLavoratori = NumeroMassimoLavoratori + 1
            WHERE CodiceFiscale = capocantiere; 
        END IF;
        
        IF 
			finito = 1
		THEN 
			LEAVE ciclo;
		END IF;
    END LOOP;
    CLOSE lista_capocantieri;
END $$
DELIMITER ;

# Stored Procedure che aggiorna il costo di un Lavoro che ha come data il giorno attuale che serve all'Event "Aggiornamento_Costo_Lavori" al Trigger "AggiornamentoCostiLavoro"
DROP PROCEDURE IF EXISTS Procedura_Aggiornamento_Costo_Lavori;
DELIMITER $$
CREATE PROCEDURE Procedura_Aggiornamento_Costo_Lavori()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro INT DEFAULT 0;
    DECLARE giorni_lavoro INT DEFAULT 0; 
	DECLARE costo_manodopera INT DEFAULT 0;
    DECLARE costo_materiali INT DEFAULT 0;
    
    DECLARE lista_lavori_oggi CURSOR FOR
		SELECT L.Codice_Lavoro, DATEDIFF(L.DataFine, L.DataInizio)
        FROM Lavoro L
        WHERE L.Costo IS NULL;
              
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
    OPEN lista_lavori_oggi;
    ciclo: LOOP
		FETCH lista_lavori_oggi INTO lavoro, giorni_lavoro;
		
        SET costo_manodopera = 
								(
									SELECT IFNULL(SUM(D.Stipendio * giorni_lavoro / 30), 0)
									FROM (
											SELECT DISTINCT L.CodiceFiscale, L.Stipendio
                                            FROM Turni_Di_Lavoro_Lavoratore TL NATURAL JOIN Lavoratore L 
                                            WHERE TL.Lavoro = lavoro
                                            UNION
                                            SELECT DISTINCT C.CodiceFiscale, C.Stipendio
                                            FROM Turni_Di_Lavoro_Capocantiere TC NATURAL JOIN Capocantiere C
                                            WHERE TC.Lavoro = lavoro
                                            UNION
                                            SELECT DISTINCT R.CodiceFiscale, R.Stipendio
                                            FROM Turni_Di_Lavoro_Responsabile TR NATURAL JOIN Responsabile R
                                            WHERE TR.Lavoro = lavoro
										 ) AS D
                                );
			
		SET costo_materiali = 
								(
									SELECT IFNULL(SUM(D.Quantita * D.Costo / D.QuantitaComprata), 0)
                                    FROM (
											SELECT IAM.Quantita, AM.Costo, AM.QuantitaComprata
											FROM ImpiegoAltriMateriali IAM INNER JOIN AltriMateriali AM ON IAM.Lotto_Altri_Materiali = AM.Codice_Lotto
                                            WHERE IAM.Lavoro = lavoro
                                            UNION
                                            SELECT II.Quantita, I.Costo, I.QuantitaComprata
											FROM ImpiegoIntonaco II INNER JOIN Intonaco I ON II.Lotto_Intonaco = I.Codice_Lotto
                                            WHERE II.Lavoro = lavoro
                                            UNION
                                            SELECT IM.Quantita, M.Costo, M.QuantitaComprata
											FROM ImpiegoMattoni IM INNER JOIN Mattoni M ON IM.Lotto_Mattoni = M.Codice_Lotto
                                            WHERE IM.Lavoro = lavoro
                                            UNION
                                            SELECT IP.Quantita, P.Costo, P.QuantitaComprata
											FROM ImpiegoPiastrelle IP INNER JOIN Piastrelle P ON IP.Lotto_Piastrelle = P.Codice_Lotto
                                            WHERE IP.Lavoro = lavoro
                                            UNION
                                            SELECT IP.Quantita, P.Costo, P.QuantitaComprata
											FROM ImpiegoPietre IP INNER JOIN Pietre P ON IP.Lotto_Pietre = P.Codice_Lotto
                                            WHERE IP.Lavoro = lavoro
										 ) AS D
                                );
		
        UPDATE Lavoro
        SET Costo = costo_manodopera + costo_materiali
        WHERE Codice_Lavoro = lavoro AND DataFine IS NOT NULL;
        
        IF 
			finito = 1
		THEN 
			LEAVE ciclo;
		END IF;
    END LOOP;
    CLOSE lista_lavori_oggi;
END $$
DELIMITER ;


# VINCOLI D'INTEGRITÀ

# Controlla se lo stato dell'Edificio appena inserito è Costruito, In Costruzione o Riparazione
DROP TRIGGER IF EXISTS ControllaInserimentoStatoEdificio;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoStatoEdificio
BEFORE INSERT ON Edificio
FOR EACH ROW
BEGIN
    IF    
        NEW.Stato < 1 OR NEW.Stato > 4
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Gli stati di un Edificio devono essere compresi tra 1 e 4';
    END IF;
END $$
DELIMITER ;

# Controlla se lo stato dell'Edificio appena aggiornato è Costruito, In Costruzione o Riparazione
DROP TRIGGER IF EXISTS ControllaAggiornamentoStatoEdificio;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoStatoEdificio
BEFORE UPDATE ON Edificio
FOR EACH ROW
BEGIN
    IF    
        NEW.Stato < 1 OR NEW.Stato > 4
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Gli stati di un Edificio devono essere compresi tra 1 e 4';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Inserimento dei punti del Perimetro della Pianta siano più di 2 
DROP TRIGGER IF EXISTS ControllaInserimentoPerimetroPianta;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoPerimetroPianta
BEFORE INSERT ON Pianta
FOR EACH ROW
BEGIN
    IF    
        NEW.PuntiPerimetro <= 2
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il perimetro della Pianta non può avere meno di 2 punti.';
	ELSEIF
		(SELECT IFNULL(COUNT(*), 0)
		 FROM Pianta P
		 WHERE P.Edificio = NEW.Edificio) > 0
    THEN
		IF
			(SELECT P.PuntiPerimetro
             FROM Pianta P 
             WHERE P.Edificio = NEW.Edificio
				  AND
                   P.Codice_Pianta = (SELECT MIN(P1.Codice_Pianta)
									  FROM Pianta P1
                                      WHERE P1.Edificio = NEW.Edificio))
			<>
            NEW.PuntiPerimetro
        THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile inserire! Il perimetro delle Piante dello stesso Edificio devono avere tutti gli stessi punti.';
        END IF;
    END IF;
    
    IF
		NumeroPiano < -1
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile inserire! Il numero del Piano deve essere maggiore o uguale a -1.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento dei punti del Perimetro della Pianta non sia diverso da prima  
DROP TRIGGER IF EXISTS ControllaAggiornamentoPerimetroPianta;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoPerimetroPianta
BEFORE UPDATE ON Pianta
FOR EACH ROW
BEGIN
    IF    
        NEW.PuntiPerimetro <> OLD.PuntiPerimetro
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! I punti del perimetro della Pianta non possono cambiare. Nel caso di errore eliminare e reinserire.';
    END IF;
    
    IF
		NumeroPiano < -1
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile aggiornare! Il numero del Piano deve essere maggiore o uguale a 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento dei punti del Perimetro del Vano siano più di 2 e che l'Altezza non sia minore o uguale a 0
DROP TRIGGER IF EXISTS ControllaInserimentoVano;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoVano
BEFORE INSERT ON Vano
FOR EACH ROW
BEGIN
    IF    
        NEW.PuntiPerimetro <= 2
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il perimetro del Vano non può avere meno di 2 punti.';
    END IF;
    
    IF
		NEW.AltezzaMax <= 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Altezza non può essere minore o uguale a 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento dei punti del Perimetro del Vano non sia diverso da prima e che l'Altezza non sia minore o uguale a 0
DROP TRIGGER IF EXISTS ControllaAggiornamentoVano;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoVano
BEFORE UPDATE ON Vano
FOR EACH ROW
BEGIN
    IF    
        NEW.PuntiPerimetro <> OLD.PuntiPerimetro
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! I punti del perimetro del Vano non possono cambiare. Nel caso di errore eliminare e reinserire.';
    END IF;
    
	IF
		NEW.AltezzaMax <= 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Altezza non può essere minore o uguale a 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che i vertici per la singola pianta siano inseriti in ordine e senza eventuali errori
DROP TRIGGER IF EXISTS ControlloOrdineInserimentoVertici;
DELIMITER $$
CREATE TRIGGER ControlloOrdineInserimentoVertici
BEFORE INSERT ON Vertice
FOR EACH ROW
BEGIN  
	DECLARE maxVertice INT DEFAULT 0;
    
    SET maxVertice = (SELECT MAX(V.Numero_Vertice)
					  FROM Vertice V
                      WHERE V.Pianta = NEW.Pianta);
	IF    
        NEW.Numero_Vertice > maxVertice+1
        OR
        NEW.Numero_Vertice <= maxVertice
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il vertice non è stato inserito in ordine';
    END IF;
END $$
DELIMITER ;

# Se si elimina un Vertice si elimina il relativo muro e i vertici che hanno un Numero Vertice superiore e la stessa pianta
DROP TRIGGER IF NOT EXISTS ControlloEliminazioneVertice
DELIMITER $$;
CREATE TRIGGER ControlloEliminazioneVertice
AFTER DELETE ON Vertice
FOR EACH ROW
BEGIN
	DECLARE finito INT DEFAULT 0;
	DECLARE punti_pianta INT DEFAULT 0;

	DECLARE vani CURSOR FOR 
		SELECT DISTINCT(Vano)
		FROM PosizionamentoVano
		WHERE Pianta = OLD.Pianta AND Numero = OLD.numero;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;

	SET punti_pianta =
	(
		SELECT PuntiDelPerimetro
		FROM Pianta
		WHERE Codice = OLD.Pianta
	);
		
	IF  
		punti_pianta >= OLD.numero 
	THEN
		DELETE FROM PosizionamentoVano
		WHERE Pianta = OLD.Pianta;
		
		DELETE FROM Muro
		WHERE Pianta = OLD.Pianta AND ( V1 >= OLD.numero OR V2 >= OLD.numero );

		DELETE FROM Vertice
		WHERE Pianta = OLD.Pianta AND Numero > OLD.numero;
	ELSEIF
		punti_pianta < OLD.numero 
	THEN
		OPEN vani
		ciclo: LOOP
		FETCH vani INTO vano_tmp

		DELETE FROM Muro M
		WHERE Pianta = OLD.Pianta AND ( M.V1 >= OLD.numero OR M.V2 >= OLD.Numero ) 
		AND EXISTS
		(
			SELECT *
			FROM PosizionamentoVano P
			WHERE P.Vano = vano_tmp AND ( Numero = M.21 OR Numero = M.V2 )
		)

		DELETE FROM Vertice V
		WHERE V.Pianta = OLD.Pianta AND V.Numero > OLD.Numero AND 
		(
			SELECT COUNT(*)
			FROM PosizionamentoVano PV
			WHERE PV.Vano = vano_tmp AND PV.Vertice = V.Numero AND PV.Pianta = OLD.Pianta 
		) = 1
		AND NOT EXISTS
		(	
			SELECT *
			FROM PosizionamentoVano PV
			WHERE PV.Vano <> vano_tmp AND PV.Vertice = V.Numero AND PV.Pianta = OLD.Pianta 
		)

		DELETE FROM PosizionamentoVano
		WHERE Vano = vano_tmp and Numero > OLD.numero

		IF 
			finito = 1 
        THEN 
			LEAVE ciclo
		END IF;
	END IF;
END $$
DELIMITER ;

# Quando viene messo un vertice per determinare il perimetro esterno, si viene a creare un'istanza di Muro che dà sull'esterno
DROP TRIGGER IF EXISTS MuroEsterno;
DELIMITER $$
CREATE TRIGGER MuroEsterno
AFTER INSERT ON Vertice
FOR EACH ROW
BEGIN
	DECLARE v1m INT DEFAULT 0;
    DECLARE v2m INT DEFAULT 0;
    DECLARE codice_pianta INT DEFAULT 0;
    
    SET v1m = NEW.Numero_Vertice - 1;
    SET v2m = NEW.Numero_Vertice;
	SET codice_pianta = NEW.Pianta;
    
    IF    
        NEW.Numero_Vertice > 1
        AND
        NEW.Numero_Vertice < (SELECT P.PuntiPerimetro
							  FROM Pianta P
                              WHERE P.Codice_Pianta = codice_pianta)
	THEN
        INSERT INTO Muro
        VALUES (TRUE, v1m, v2m, codice_pianta);
    END IF;
    
    IF    
        NEW.Numero_Vertice > 1
        AND
        NEW.Numero_Vertice = (SELECT P.PuntiPerimetro
							  FROM Pianta P
                              WHERE P.Codice_Pianta = codice_pianta)
	THEN
        INSERT INTO Muro
        VALUES (TRUE, v2m, 1, codice_pianta);
    END IF;
END $$
DELIMITER ;

# Controlla che un vertice non sia interno ad un vano o che non sia esterno al perimetro
DROP TRIGGER IF EXISTS ControlloVerticeInterno;
DELIMITER $$
CREATE TRIGGER ControlloVerticeInterno
BEFORE INSERT ON Vertice
FOR EACH ROW
BEGIN
    DECLARE vertici_perimetro INT DEFAULT 0;
    
    SET vertici_perimetro = (SELECT P.PuntiPerimetro
							 FROM Pianta P
                             WHERE P.Codice_Pianta = NEW.Pianta);
	
    IF
		NEW.Numero_Vertice > vertici_perimetro
        
    THEN
		IF
			Controllo_Punto_Interno_Pianta(NEW.X, NEW.Y, NEW.Pianta) = FALSE
        THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile inserire! Il Controllo non è andato a buon fine';
        END IF;
    END IF;
END $$
DELIMITER ;

# Quando viene messo un vertice fuori dal perimetro si segnala un errore
DROP TRIGGER IF EXISTS ControlloPuntoInterno;
DELIMITER $$
CREATE TRIGGER ControlloPuntoInterno
BEFORE INSERT ON Vertice
FOR EACH ROW
BEGIN
	DECLARE punto_ok BOOL DEFAULT TRUE;
    
    
    
    SELECT Controllo_Punto_Interno_Pianta(NEW.x, NEW.y, NEW.Pianta) INTO punto_ok;
    
    IF 
		punto_ok = FALSE
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il vertice non è interno al perimetro o è si trova interno ad una stanza già creata.';
    END IF;
END $$
DELIMITER ;

# Controlla che un vertice non sia interno ad un vano o che non sia esterno al perimetro e inserisce la lunghezza e la larghezza massima ad un Vano
DROP TRIGGER IF EXISTS ControlloVano;
DELIMITER $$
CREATE TRIGGER ControlloVano
BEFORE INSERT ON PosizionamentoVano
FOR EACH ROW
BEGIN
	DECLARE finito INT DEFAULT 0;
	DECLARE inter BOOL DEFAULT FALSE;
	DECLARE ultimo INT DEFAULT 0;
	DECLARE x1, y1, x2, y2 INT DEFAULT 0;
 	DECLARE v1, v2, v1_x, v1_y, v2_x, v2_y INT DEFAULT 0;
	DECLARE numeroV INT DEFAULT 0;
	DECLARE primo INT DEFAULT 0;

	DECLARE muri CURSOR FOR
		SELECT M.V1, M.V2, V1.X, V1.Y, V2.X, V2.Y
		FROM Muro M INNER JOIN Vertice V1 ON M.V1 = V1.Numero_Vertice INNER JOIN Vertice V2 ON M.V2 = V2.Numero_Vertice 
		WHERE M.Pianta = NEW.Pianta AND V1.Pianta = NEW.Pianta AND V2.Pianta = NEW.Pianta;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;

	SET ultimo = 
		(
			SELECT MAX(PV.Vertice)
			FROM PosizionamentoVano PV
			WHERE PV.Vano = NEW.VANO
		);

	SET x1 =
	(
		SELECT X
		FROM Vertice
		WHERE Numero_Vertice = NEW.Vertice AND Pianta = NEW.Pianta
	);

	SET y1 =
	(
		SELECT Y
		FROM Vertice
		WHERE Numero_Vertice = NEW.Vertice AND Pianta = NEW.Pianta
	);

	SET x2 =
	(
		SELECT X
		FROM Vertice
		WHERE Numero_Vertice = ultimo AND Pianta = NEW.Pianta
	);

	SET y2 =
	(
		SELECT Y
		FROM Vertice
		WHERE Numero_Vertice = ultimo AND Pianta = NEW.Pianta
	);

		SET numeroV =
	(
		SELECT numVertici
		FROM Vano V
		WHERE V.Codice = NEW.Vano
	);
	
	# Cicla Muro con un cursore e guarda che per ogni coppia di vertici l'intersezione sia uguale a false
	OPEN muri;
	ciclo: LOOP
		FETCH muri INTO v1, v2, v1_x, v1_y, v2_x, v2_y;
		SET inter = intersezione(x1, y1, x2, y2, v1_x, v1_y, v2_x, v2_y);
		IF 
			inter = TRUE
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile Inserire! Planimetria Irrealizzabile!';
		END IF;
        
		IF
			finito = 1
		THEN 
			SET x2 =
			(
				SELECT X
				FROM Vertice
				WHERE Numero_Vertice = primo AND Pianta = NEW.Pianta
			);

			SET y2 =
			(
				SELECT Y
				FROM Vertice
				WHERE Numero_Vertice = primo AND Pianta = NEW.Pianta
			);

			SET inter = intersezione(x1, y1, x2, y2, v1_x, v1_y, v2_x, v2_y);

			IF 
				inter = TRUE
			THEN
				SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Impossibile Inserire! Planimetria Irrealizzabile!';

			LEAVE ciclo;
            END IF;
		END IF;
	END LOOP;
	CLOSE muri;
END $$
DELIMITER ;

DROP TRIGGER IF EXISTS InserimentoMuro;
DELIMITER $$
CREATE TRIGGER InserimentoMuro
AFTER INSERT ON PosizionamentoVano
FOR EACH ROW
BEGIN
	DECLARE ultimo INT DEFAULT 0;
	DECLARE quanti INT DEFAULT 0;
	DECLARE numeroV INT DEFAULT 0;
	DECLARE primo INT DEFAULT 0;
	DECLARE min_x, min_y, max_x, max_y INT DEFAULT 0;

		SET ultimo = 
		(
			SELECT MIN(PV.Vertice)
			FROM PosizionamentoVano PV
			WHERE PV.Vano = NEW.VANO
		);

		SET quanti =
		(
			SELECT COUNT(*)
			FROM PosizionamentoVano P
			WHERE P.Vano = NEW.Vano
		);

		SET numeroV =
		(
			SELECT numVertici
			FROM Vano V
			WHERE V.Codice = NEW.Vano
		);

		INSERT INTO Muro
		VALUES (FALSE, ultimo, NEW.Vertice, NEW.Pianta) ;

		IF 
			numeroV = quanti
		THEN
			SET primo =
			(
				SELECT MIN(Vertice)
				FROM PosizionamentoVano
				WHERE Vano = NEW.Vano
			);

			INSERT INTO Muro
			VALUES (FALSE, NEW.vertice, primo, NEW.Pianta) ;

			SET min_x = 
				(
				SELECT MIN(V.x)
				FROM PosizionamentoVano PV INNER JOIN Vertice V on V.NumeroVertice = PV.Vertice
				WHERE V.Pianta = NEW.Pianta and PV.Vano = NEW.Vano
				);
		
			SET max_x =
				(
				SELECT MAX(V.x)
				FROM PosizionamentoVano PV INNER JOIN Vertice V on V.NumeroVertice = PV.Vertice
				WHERE V.Pianta = NEW.Pianta and PV.Vano = NEW.Vano
				);
		
			SET min_y =
				(
				SELECT MIN(V.y)
				FROM PosizionamentoVano PV INNER JOIN Vertice V on V.NumeroVertice = PV.Vertice
				WHERE V.Pianta = NEW.Pianta and PV.Vano = NEW.Vano
				);
		
			SET max_y =
				(
				SELECT MAX(V.y)
				FROM PosizionamentoVano PV INNER JOIN Vertice V on V.NumeroVertice = PV.Vertice
				WHERE V.Pianta = NEW.Pianta and PV.Vano = NEW.Vano
				);
		
			UPDATE Vano 
			SET Larghezza = ( max_x - min_x ) 
			WHERE Codice = NEW.Vano;
		
			UPDATE Vano
			SET Lunghezza = ( max_y - min_y )
			WHERE Codice = NEW.Vano;
		END IF ;
END $$
DELIMITER ;

# Controllo Inserimento di vertici in Posizionamento Vano
DROP TRIGGER IF EXISTS ControlloInserimentoPosizionamentoVano
DELIMITER $$
CREATE TRIGGER ControlloInserimentoPosizionamentoVano
BEFORE INSERT ON PosizionamentoVano
FOR EACH ROW
BEGIN
	DECLARE num_istanze_target INT DEFAULT 0;
	DECLARE num_vertici INT DEFAULT 0;
	
	SET num_istanze_target = 
	(
		SELECT IFNULL(COUNT(*), 0)
		FROM PosizionamentoVano PV
		WHERE P.Vano = NEW.Vano
	);

	SET num_vertici = 
	(
		SELECT V.PuntiPerimetro
		FROM Vano V
		where V.Codice_Vano = NEW.Vano
	);

	IF 
		num_istanze_target >= num_vertici 
	THEN
        	SIGNAL SQLSTATE '45000'
        	SET MESSAGE_TEXT = 'Impossibile inserire! Ubicazione del vano già implementata';
	END IF;
END $$
DELIMITER ;

# Inserimento del Punto Cardinale a cui è rivolta un'Apertura
DROP TRIGGER IF EXISTS DefinizionePuntoCardinale;
DELIMITER $$
CREATE TRIGGER DefinizionePuntoCardinale
AFTER INSERT ON Apertura
FOR EACH ROW
BEGIN    
	DECLARE coefficiente_angolare INT DEFAULT 0;
    DECLARE direzione_problema VARCHAR(7) DEFAULT NULL;
	DECLARE esterno BOOL DEFAULT FALSE;
    DECLARE codice_pianta INT DEFAULT 0;
    DECLARE x_m FLOAT DEFAULT 0;
    DECLARE y_m FLOAT DEFAULT 0;
    DECLARE p_x FLOAT DEFAULT 0;
    DECLARE p_y FLOAT DEFAULT 0;
    DECLARE decisione BOOL DEFAULT NULL;
    
    SET esterno = (SELECT M.Esterno
				   FROM Muro M
                   WHERE M.Codice_Muro = NEW.Muro);
	
    SET codice_pianta = (SELECT M.Pianta
						 FROM Muro M
                         WHERE M.Codice_Muro = NEW.Muro);
                   
	SET x_m = (NEW.X2 - NEW.X1)/2;
    SET y_m = (NEW.Y2 - NEW.Y1)/2;
    
    IF    
		NEW.PuntoCardinale IS NULL
        AND
        (NEW.Tipologia = 'Finestra' OR NEW.Tipologia = 'Porta-Finestra')
        AND
        esterno = TRUE
	THEN
		IF
			NEW.X1 = NEW.X2
        THEN
			SET direzione_problema = 'e-o';
        ELSEIF
			NEW.X1 <> NEW.X2
        THEN
			SET coefficiente_angolare = (NEW.Y2-NEW.Y1)/(NEW.X2-NEW.X1);
            IF 
				coefficiente_angolare > (-0.414213) AND coefficiente_angolare <= 0.414213
            THEN
				SET direzione_problema = 'n-s';
            ELSEIF
				coefficiente_angolare > 0.414213 AND coefficiente_angolare <= 2.414213
			THEN
				SET direzione_problema = 'n-o/s-e';
			ELSEIF
				coefficiente_angolare <= 2.414213
			THEN
				SET direzione_problema = 'e-o';
			ELSEIF
				coefficiente_angolare <= 2.414213
			THEN
				SET direzione_problema = 'e-o';
			ELSEIF
				coefficiente_angolare > (-2.414213) AND coefficiente_angolare <= (-0.414212)
			THEN
				SET direzione_problema = 'n-e/s-o';
            END IF;
        END IF;
    END IF;
    
    IF    
		NEW.PuntoCardinale IS NULL
        AND
        (NEW.Tipologia = 'Finestra' OR NEW.Tipologia = 'Porta-Finestra')
        AND
        esterno = TRUE
	THEN
		IF
			direzione_problema = 'n-s'
		THEN
			SET p_x = x_m;
			SET p_y = y_m + 0.00001;
			SELECT Controllo_Punto_Interno_Perimetro_Pianta(p_x, p_y, codice_pianta) INTO decisione;
			IF
				decisione = TRUE
			THEN
				UPDATE Apertura
				SET PuntoCardinale = 'S'
				WHERE Codice_Apertura = NEW.Codice_Apertura;
			ELSEIF
				decisione = FALSE
			THEN
				UPDATE Apertura
				SET PuntoCardinale = 'N'
				WHERE Codice_Apertura = NEW.Codice_Apertura;
			END IF;
		ELSEIF 
			direzione_problema = 'e-o'
		THEN
			SET p_x = x_m + 0.00001;
            SET p_y = y_m;
            SELECT Controllo_Punto_Interno_Perimetro_Pianta(p_x, p_y, codice_pianta) INTO decisione;
            IF
				decisione = TRUE
            THEN
				UPDATE Apertura
                SET PuntoCardinale = 'O'
                WHERE Codice_Apertura = NEW.Codice_Apertura;
			ELSEIF
				decisione = FALSE
            THEN
				UPDATE Apertura
                SET PuntoCardinale = 'E'
                WHERE Codice_Apertura = NEW.Codice_Apertura;
			END IF;
		ELSEIF 
			direzione_problema = 'n-o/s-e'
		THEN
			SET p_x = x_m + 0.00001;
            SET p_y = y_m + 0.00001;
            SELECT Controllo_Punto_Interno_Perimetro_Pianta(p_x, p_y, codice_pianta) INTO decisione;
            IF
				decisione = TRUE
            THEN
				UPDATE Apertura
                SET PuntoCardinale = 'SE'
                WHERE Codice_Apertura = NEW.Codice_Apertura;
			ELSEIF
				decisione = FALSE
            THEN
				UPDATE Apertura
                SET PuntoCardinale = 'NO'
                WHERE Codice_Apertura = NEW.Codice_Apertura;
			END IF;
		ELSEIF 
			direzione_problema = 'n-e/s-o'
		THEN
			SET p_x = x_m + 0.00001;
            SET p_y = y_m + 0.00001;
            SELECT Controllo_Punto_Interno_Perimetro_Pianta(p_x, p_y, codice_pianta) INTO decisione;
            IF
				decisione = TRUE
            THEN
				UPDATE Apertura
                SET PuntoCardinale = 'SO'
                WHERE Codice_Apertura = NEW.Codice_Apertura;
			ELSEIF
				decisione = FALSE
            THEN
				UPDATE Apertura
                SET PuntoCardinale = 'NE'
                WHERE Codice_Apertura = NEW.Codice_Apertura;
			END IF;
		END IF;
	END IF;
END $$
DELIMITER ;

# Controllo l'Inserimento del Tipo di Apertura, che l'apertura sia su  
# Controllo_Punto_Su_Muro(x FLOAT, y FLOAT, codice_pianta INT)
DROP TRIGGER IF EXISTS ControlloInserimentoApertura;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoApertura
BEFORE INSERT ON Apertura
FOR EACH ROW
BEGIN    
		
	IF
		NEW.Tipologia <> 'Porta'
        AND
        NEW.Tipologia <> 'Finestra'
        AND 
        NEW.Tipologia <> 'Porta-Finestra'
        AND
        NEW.Tipologia <> 'Arco'
        AND 
        NEW.Tipologia <> 'Spazio Vuoto'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Le aperture possono essere solo Porta, Finestra, Porta-Finestra, Arco o Spazio Vuoto.';
    END IF;
END $$
DELIMITER ;

# Controllo Aggiornamento Tipo di Apertura
DROP TRIGGER IF EXISTS ControlloAggiornamentoApertura;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoApertura
BEFORE UPDATE ON Apertura
FOR EACH ROW
BEGIN    
	IF
		NEW.Tipologia <> 'Porta'
        AND
        NEW.Tipologia <> 'Finestra'
        AND 
        NEW.Tipologia <> 'Porta-Finestra'
        AND
        NEW.Tipologia <> 'Arco'
        AND 
        NEW.Tipologia <> 'Spazio Vuoto'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Le aperture possono essere solo Porta, Finestra, Porta-Finestra, Arco o Spazio Vuoto.';
    END IF;
    
    IF
		NEW.Muro <> OLD.Muro
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non è possibile cambiare Muro. Si consiglia di rinserire una Apertura!';
	END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento delle date del Progetto Edilizio siano corrette e non presentino ovvi errori come la data di fine minore della data inizio 
DROP TRIGGER IF EXISTS ControllaInserimentoDateProgettoEdilizio;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoDateProgettoEdilizio
BEFORE INSERT ON ProgettoEdilizio
FOR EACH ROW
BEGIN
    IF    
        (NEW.DataApprovazione >= NEW.DataInizio
         OR 
         NEW.StimaFine <= NEW.DataInizio
		 OR
         NEW.StimaFine <= NEW.DataApprovazione
         OR
		 NEW.DataFine <= NEW.DataInizio
         OR 
         NEW.DataFine <= NEW.DataApprovazione)
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Gli inserimenti sulle date hanno valori inconsistenti.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento delle date del Progetto Edilizio siano corrette e non presentino ovvi errori e impone che per conclude un progetto ci siano almeno 2 Responsabili
DROP TRIGGER IF EXISTS ControllaAggiornamentoDateProgettoEdilizio;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoDateProgettoEdilizio
BEFORE UPDATE ON ProgettoEdilizio
FOR EACH ROW
BEGIN
    IF    
        (NEW.DataInizio <= DataApprovazione
         OR 
         NEW.DataFine <= DataInizio)
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Gli aggiornamenti sulle date hanno valori inconsistenti.';
	ELSEIF
		NEW.DataFine IS NOT NULL 
        AND
		(SELECT IFNULL(COUNT(*), 0)
		 FROM Responsabilita R
         WHERE R.Progetto = NEW.ID_Progetto) < 2
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare la Data di Fine del Progetto! In Responsabilità ci devono essere almeno 2 Responsabili.';
    END IF;
END $$
DELIMITER ;

# Controlla se il Tipo di Progetto Edilizio appena inserito è Costruzione o Riparazione
DROP TRIGGER IF EXISTS ControllaInserimentoProgettoEdilizio;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoProgettoEdilizio
BEFORE INSERT ON ProgettoEdilizio
FOR EACH ROW
BEGIN
	DECLARE costruzione BOOL DEFAULT FALSE; # Sarà vero se l'Edificio di cui si inserisce il Progetto Edilizio è stato costruito o è in costruzione
	DECLARE costruito BOOL DEFAULT FALSE; # Sarà vero se l'Edificio di cui si inserisce il Progetto Edilizio è stato costruito
    
    IF 
		(SELECT IFNULL(COUNT(*), 0)
         FROM ProgettoEdilizio PE
         WHERE PE.Edificio = NEW.Edificio
			  AND
               PE.Tipo = 'Costruzione') = 1
    THEN
		SET costruzione = TRUE;
    END IF;
    
	IF 
		(SELECT IFNULL(COUNT(*), 0)
         FROM ProgettoEdilizio PE
         WHERE PE.Edificio = NEW.Edificio
			  AND
               PE.Tipo = 'Costruzione'
			  AND 
               PE.DataFine IS NOT NULL) = 1
    THEN
		SET costruito = TRUE;
    END IF;
    
    IF    
        (NEW.Tipo <> 'Costruzione'
         AND
         NEW.Tipo <> 'Riparazione')
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Gli stati di un Progetto Edilizio devono essere Costruzione o Riparazione.';
    END IF;
    
    IF
		costruzione = TRUE
        AND
        NEW.Tipo = 'Costruzione'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Edificio già costruito, o in costruzione, o non ancora costruito!';
    END IF;
    
	IF
		(costruzione = FALSE OR costruito = FALSE)
        AND
        NEW.Tipo = 'Riparazione'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Edificio non inserito o in costruzione.';
    END IF;    
END $$
DELIMITER ;

# Controlla se il Tipo di Progetto Edilizio appena inserito è Costruzione o Riparazione
DROP TRIGGER IF EXISTS ControllaAggiornamentoProgettoEdilizio;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoProgettoEdilizio
BEFORE UPDATE ON ProgettoEdilizio
FOR EACH ROW
BEGIN
    IF    
        OLD.Tipo <> NEW.Tipo   
        OR
        OLD.Edificio <> NEW.Edificio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il cambio di Tipo e/o di Edificio non è concesso!';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento delle date dello Stadio di Avanzamento siano corrette e non presentino ovvi errori come la data di fine minore della data inizio 
DROP TRIGGER IF EXISTS ControllaInserimentoDateStadioAvanzamento;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoDateStadioAvanzamento
BEFORE INSERT ON StadioDiAvanzamento
FOR EACH ROW
BEGIN
	DECLARE data_progetto DATE DEFAULT NULL;
    
    SET data_progetto = (SELECT PE.DataInizio
						 FROM ProgettoEdilizio PE
                         WHERE PE.ID_Progetto = NEW.Progetto);
    IF    
		NEW.DataInizio <> data_progetto
        AND
        NEW.Numero = 1
	THEN
		SET NEW.DataInizio = data_progetto;
    END IF;
    
    IF    
        (NEW.StimaFine <= NEW.DataInizio
         OR
		 NEW.DataFine <= NEW.DataInizio)
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Gli inserimenti sulle date hanno valori inconsistenti.';
    END IF;
    
    IF
		(SELECT S.DataFine
		 FROM StadioDiAvanzamento S
         WHERE S.Numero = NEW.Numero-1
			  AND
               S.Progetto = NEW.Progetto)
		> 
        NEW.DataInizio
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La Data di Inizio dello Stadio di Avanzamento inserito deve essere maggiore rispetto a quella dello Stadio precedente.';
	END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento delle date dello Stadio di Avanzamento siano corrette e non presentino ovvi errori come la data di fine minore della data inizio 
DROP TRIGGER IF EXISTS ControllaAggiornamentoDateStadioAvanzamento;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoDateStadioAvanzamento
BEFORE UPDATE ON StadioDiAvanzamento
FOR EACH ROW
BEGIN
    IF    
        (NEW.StimaFine <= NEW.DataInizio
         OR
		 NEW.DataFine <= NEW.DataInizio)
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Gli inserimenti sulle date hanno valori inconsistenti.';
    END IF;
    
    IF
		(SELECT S.DataFine
		 FROM StadioDiAvanzamento S
         WHERE S.Numero = NEW.Numero-1
			  AND
               S.Progetto = NEW.Progetto)
		> 
        NEW.DataInizio
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La Data di Inizio dello Stadio di Avanzamento inserito deve essere maggiore rispetto a quella dello Stadio precedente.';
	END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento dello Stadio di Avanzamento non sia possibile se il Progetto si è concluso
DROP TRIGGER IF EXISTS ControllaInserimentoStadioAvanzamento;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoStadioAvanzamento
BEFORE INSERT ON StadioDiAvanzamento
FOR EACH ROW
BEGIN
	DECLARE data_progetto DATE DEFAULT NULL;
    DECLARE data_stadio DATE DEFAULT NULL;
    
    SET data_progetto = (SELECT PE.DataFine
						 FROM ProgettoEdilizio PE
                         WHERE PE.ID_Progetto = NEW.Progetto);
                         
     SET data_stadio = (SELECT S.DataFine
						FROM StadioDiAvanzamento S
                        WHERE S.Progetto = NEW.Progetto
							 AND
                              S.Numero = (SELECT MAX(S1.Numero)
										  FROM StadioDiAvanzamento S1
                                          WHERE S1.Progetto = NEW.Progetto));
                         
    IF    
		data_progetto = data_stadio
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Progetto è finito.';
    END IF;
END $$
DELIMITER ;

# Controlla che gli inserimenti del Minimo Numero di Lavoratori e del Massimo Numero di Lavoratori in Tipologia di Lavoro siano adeguati
DROP TRIGGER IF EXISTS ControllaInserimentoNumeroLavoratori;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoNumeroLavoratori
BEFORE INSERT ON TipologiaLavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.NumeroMinimoLavoratori < 2
         OR
         NEW.NumeroMassimoLavoratori > 30
         OR 
         NEW.NumeroMinimoLavoratori > NEW.NumeroMassimoLavoratori
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il minimo numero di lavoratori non può essere minore di 2 e il massimo numero di lavoratori non può essere maggiore di 30.';
    END IF;
END $$
DELIMITER ;

# Controlla che gli aggiornamenti del Minimo Numero di Lavoratori e del Massimo Numero di Lavoratori in Tipologia di Lavoro siano adeguati
DROP TRIGGER IF EXISTS ControllaAggiornamentoNumeroLavoratori;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoNumeroLavoratori
BEFORE UPDATE ON TipologiaLavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.NumeroMinimoLavoratori < 2
         OR
         NEW.NumeroMassimoLavoratori > 30
         OR 
         NEW.NumeroMinimoLavoratori > NEW.NumeroMassimoLavoratori
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il minimo numero di lavoratori non può essere minore di 2 e il massimo numero di lavoratori non può essere maggiore di 30.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento del Tempo Stimato della Tipologia di Lavoro sia maggiore di 0
DROP TRIGGER IF EXISTS ControllaInserimentoTempoStimato;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoTempoStimato
BEFORE INSERT ON TipologiaLavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.TempoStimato <= 0
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Tempo Stimato non può essere minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento del Tempo Stimato della Tipologia di Lavoro sia maggiore di 0
DROP TRIGGER IF EXISTS ControllaAggiornamentoTempoStimato;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoTempoStimato
BEFORE UPDATE ON TipologiaLavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.TempoStimato <= 0
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Tempo Stimato non può essere minore di 0.';
	END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento delle date del Lavoro non abbiano la data di fine minore della data inizio 
DROP TRIGGER IF EXISTS ControllaInserimentoDateLavoro;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoDateLavoro
BEFORE INSERT ON Lavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.DataFine < NEW.DataInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La Data della Fine del Lavoro non può essere minore della Data di Inizio.';
    END IF;
    
    IF
		NEW.DataInizio < (SELECT S.DataInizio
						  FROM StadioDiAvanzamento S
                          WHERE S.Numero = NEW.StadioDiAvanzamento
							   AND
                                S.Progetto = NEW.Progetto)
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La Data di Inzio del Lavoro non può essere minore della Data di Inizio dello Stadio di Avanzamento.';
	ELSEIF 
		NEW.DataFine > (SELECT S.DataFine
						  FROM StadioDiAvanzamento S
                          WHERE S.Numero = NEW.StadioDiAvanzamento
							   AND
                                S.Progetto = NEW.Progetto)
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La Data di Fine del Lavoro non può essere maggiore della Data di Fine dello Stadio di Avanzamento.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento delle date del Lavoro non abbiano la data di fine minore della data inizio, che il lavoro rispetti il numero minimo di lavoratori e che abbia almeno un Capocantiere
DROP TRIGGER IF EXISTS ControllaAggiornamentoDateLavoro;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoDateLavoro
BEFORE UPDATE ON Lavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.DataFine < NEW.DataInizio
	THEN
        SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile aggiornare! La Data della Fine del Lavoro non può essere minore della Data di Inizio.';
    END IF;
    
    IF 
		NEW.TipologiaDiLavoro <> 'Ispezione Fondamenta'
        AND
		NEW.TipologiaDiLavoro <> 'Ispezione Intelaiatura'
        AND
		NEW.TipologiaDiLavoro <> 'Ispezione Chiusura'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Fissaggio'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Adattamento'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Caldaia'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Crepa'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Umidità di Risalita'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Umidità Esterna'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Danni da Alluvione'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Danni da Calore'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Finale'
        AND
		(SELECT IFNULL(COUNT(DISTINCT T.CodiceFiscale), 0)
         FROM Turni_Di_Lavoro_Lavoratore T
         WHERE T.Lavoro = NEW.Codice_Lavoro) 
		<
		(SELECT T.NumeroMinimoLavoratori
		 FROM TipologiaLavoro T
         WHERE T.Nome = NEW.TipologiaDiLavoro)
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non è stato inserito il numero minimo di lavoratori previsto per questo lavoro in Turni di Lavoro.';	
	END IF;
    
	IF 
		NEW.TipologiaDiLavoro <> 'Ispezione Fondamenta'
        AND
		NEW.TipologiaDiLavoro <> 'Ispezione Intelaiatura'
        AND
		NEW.TipologiaDiLavoro <> 'Ispezione Chiusura'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Fissaggio'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Adattamento'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Caldaia'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Crepa'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Umidità di Risalita'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Umidità Esterna'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Danni da Alluvione'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Danni da Calore'
		AND
		NEW.TipologiaDiLavoro <> 'Ispezione Finale'
        AND
		(SELECT IFNULL(COUNT(DISTINCT T.CodiceFiscale), 0)
         FROM Turni_Di_Lavoro_Capocantiere T
         WHERE T.Lavoro = NEW.Codice_Lavoro) = 0
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non è stato inserito almeno un Capocantiere.';
	END IF;
    
	IF 
		(NEW.TipologiaDiLavoro = 'Ispezione Fondamenta'
        OR
		NEW.TipologiaDiLavoro = 'Ispezione Intelaiatura'
        OR
		NEW.TipologiaDiLavoro = 'Ispezione Chiusura'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Fissaggio'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Adattamento'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Caldaia'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Crepa'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Umidità di Risalita'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Umidità Esterna'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Danni da Alluvione'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Danni da Calore'
		OR
		NEW.TipologiaDiLavoro = 'Ispezione Finale')
        AND
		(SELECT IFNULL(COUNT(DISTINCT T.CodiceFiscale), 0)
         FROM Turni_Di_Lavoro_Responsabile T
         WHERE T.Lavoro = NEW.Codice_Lavoro) < 2
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non sono stati inseriti almeno due Responsabili in un lavoro di Ispezione.';		
	END IF;
    
    IF
		NEW.DataInizio < (SELECT S.DataInizio
						  FROM StadioDiAvanzamento S
                          WHERE S.Numero = NEW.StadioDiAvanzamento
							   AND
                                S.Progetto = NEW.Progetto)
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Data di Inzio del Lavoro non può essere minore della Data di Inizio dello Stadio di Avanzamento.';
	ELSEIF 
		NEW.DataFine > (SELECT S.DataFine
						  FROM StadioDiAvanzamento S
                          WHERE S.Numero = NEW.StadioDiAvanzamento
							   AND
                                S.Progetto = NEW.Progetto)
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Data di Fine del Lavoro non può essere maggiore della Data di Fine dello Stadio di Avanzamento.';
    END IF;
END $$
DELIMITER ;

# Controlla che il Costo di un Lavoro sia maggiore di 0
DROP TRIGGER IF EXISTS ControllaInserimentoCostoLavoro;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoCostoLavoro
BEFORE INSERT ON Lavoro
FOR EACH ROW
BEGIN
    IF    
		 NEW.Costo < 0
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Conto non può essere minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che il costo non sia negativo
DROP TRIGGER IF EXISTS AggiornamentoCostoLavoro;
DELIMITER $$
CREATE TRIGGER AggiornamentoCostoLavoro
BEFORE UPDATE ON Lavoro
FOR EACH ROW
BEGIN    
    IF
		NEW.Costo < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il costo è minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Inserimento di un Lavoro di tipo Riparazione Crepa tolga il Sensore di Posizione (se presente) una volta finito il lavoro
DROP TRIGGER IF EXISTS ControllaInserimentoRiparazioneCrepa;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoRiparazioneCrepa
AFTER INSERT ON Lavoro
FOR EACH ROW
BEGIN   
    IF
		(SELECT PE.Tipo
         FROM ProgettoEdilizio PE
         WHERE PE.ID_Progetto = NEW.Progetto) = 'Riparazione'
         AND
         NEW.TipologiaDiLavoro = 'Riparazione Crepa'
         AND
         NEW.DataFine IS NOT NULL
	THEN 
		DELETE FROM Sensore
		WHERE Categoria = 'Posizione'
			 AND
			  Vano IN (SELECT V.Codice_Vano
					   FROM Vano V INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
				  				   INNER JOIN Edificio E ON P.Edificio = E.ID
						   WHERE ID = (SELECT PE.Edificio
									   FROM ProgettoEdilizio PE
									   WHERE PE.ID_Progetto = NEW.Progetto));
    END IF;
END $$
DELIMITER ;

# Controlla che l'Aggiornamento di un Lavoro di tipo Riparazione Crepa tolga il Sensore di Posizione (se presente) una volta finito il lavoro
DROP TRIGGER IF EXISTS ControllaAggiornamentoRiparazioneCrepa;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoRiparazioneCrepa
AFTER UPDATE ON Lavoro
FOR EACH ROW
BEGIN
	IF
		(SELECT PE.Tipo
         FROM ProgettoEdilizio PE
         WHERE PE.ID_Progetto = NEW.Progetto) = 'Riparazione'
         AND
         NEW.TipologiaDiLavoro = 'Riparazione Crepa'
         AND
         NEW.DataFine IS NOT NULL
	THEN 
		DELETE FROM Sensore
		WHERE Categoria = 'Posizione'
			 AND
			  Vano IN (SELECT V.Codice_Vano
					   FROM Vano V INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
				  				   INNER JOIN Edificio E ON P.Edificio = E.ID
						   WHERE ID = (SELECT PE.Edificio
									   FROM ProgettoEdilizio PE
									   WHERE PE.ID_Progetto = NEW.Progetto));
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento dell sesso dei Lavoratori sia M per Maschio, F per Femmina o A per Altro, che lo Stipendio non sia minore di 0 e che gli assunti siano almeno maggiorenni 
DROP TRIGGER IF EXISTS ControlloInserimentoLavoratore;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoLavoratore
BEFORE INSERT ON Lavoratore
FOR EACH ROW
BEGIN
	IF 
		NEW.Sesso <> 'M'
        AND
        NEW.Sesso <> 'F'
        AND
        NEW.Sesso <> 'A'
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! I sessi possono essere solo M per Maschio, F per Femmina e A per Altro.';
	END IF;
    
    IF
		NEW.Stipendio < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.DataNascita > NEW.DataAssunzione
        OR
        NEW.DataAssunzione < DATE_ADD(NEW.DataNascita, INTERVAL 18 YEAR)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Uno Stipendio non può essere negativo.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento dell sesso dei Lavoratori sia M per Maschio, F per Femmina o A per Altro, che lo Stipendio non sia minore di 0 e che gli assunti siano almeno maggiorenni 
DROP TRIGGER IF EXISTS ControlloAggiornamentoLavoratore;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoLavoratore
BEFORE UPDATE ON Lavoratore
FOR EACH ROW
BEGIN
	IF 
		NEW.Sesso <> 'M'
        AND
        NEW.Sesso <> 'F'
        AND
        NEW.Sesso <> 'A'
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! I sessi possono essere solo M per Maschio, F per Femmina e A per Altro.';
	END IF;
    
    IF
		NEW.Stipendio < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.DataNascita > NEW.DataAssunzione
        OR
        NEW.DataAssunzione < DATE_ADD(NEW.DataNascita, INTERVAL 18 YEAR)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Uno Stipendio non può essere negativo.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento dell sesso dei Lavoratori sia M per Maschio, F per Femmina o A per Altro, che lo Stipendio non sia minore di 0, che gli assunti siano almeno maggiorenni e che il numero massimo di lavoratori sia tra 3 e 15
DROP TRIGGER IF EXISTS ControlloInserimentoCapocantiere;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoCapocantiere
BEFORE INSERT ON Capocantiere
FOR EACH ROW
BEGIN
	IF 
		NEW.Sesso <> 'M'
        AND
        NEW.Sesso <> 'F'
        AND
        NEW.Sesso <> 'A'
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! I sessi possono essere solo M per Maschio, F per Femmina e A per Altro.';
	END IF;
    
    IF
		NEW.Stipendio < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.DataNascita > NEW.DataAssunzione
        OR
        NEW.DataAssunzione < DATE_ADD(NEW.DataNascita, INTERVAL 18 YEAR)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.NumeroMassimoLavoratori < 3
        OR
        NEW.NumeroMassimoLavoratori > 15
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Massimo Numero di Lavoratori deve essere tra 3 e 15.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento dell sesso dei Lavoratori sia M per Maschio, F per Femmina o A per Altro, che lo Stipendio non sia minore di 0, che gli assunti siano almeno maggiorenni e che il numero massimo di lavoratori sia tra 3 e 15
DROP TRIGGER IF EXISTS ControlloAggiornamentoCapocantiere;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoCapocantiere
BEFORE UPDATE ON Capocantiere
FOR EACH ROW
BEGIN
	IF 
		NEW.Sesso <> 'M'
        AND
        NEW.Sesso <> 'F'
        AND
        NEW.Sesso <> 'A'
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! I sessi possono essere solo M per Maschio, F per Femmina e A per Altro.';
	END IF;
    
    IF
		NEW.Stipendio < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.DataNascita > NEW.DataAssunzione
        OR
        NEW.DataAssunzione < DATE_ADD(NEW.DataNascita, INTERVAL 18 YEAR)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Uno Stipendio non può essere negativo.';
    END IF;
    
	IF
		NEW.NumeroMassimoLavoratori < 3
        OR
        NEW.NumeroMassimoLavoratori > 15
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Massimo Numero di Lavoratori deve essere tra 3 e 15.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento dell sesso dei Responsabili sia M per Maschio, F per Femmina o A per Altro, che lo Stipendio non sia minore di 0 e che gli assunti siano almeno maggiorenni 
DROP TRIGGER IF EXISTS ControlloInserimentoResponsabile;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoResponsabile
BEFORE INSERT ON Responsabile
FOR EACH ROW
BEGIN
	IF 
		NEW.Sesso <> 'M'
        AND
        NEW.Sesso <> 'F'
        AND
        NEW.Sesso <> 'A'
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! I sessi possono essere solo M per Maschio, F per Femmina e A per Altro.';
	END IF;
    
    IF
		NEW.Stipendio < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.DataNascita > NEW.DataAssunzione
        OR
        NEW.DataAssunzione < DATE_ADD(NEW.DataNascita, INTERVAL 18 YEAR)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Uno Stipendio non può essere negativo.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'aggiornamento dell sesso dei Responsabili sia M per Maschio, F per Femmina o A per Altro, che lo Stipendio non sia minore di 0 e che gli assunti siano almeno maggiorenni 
DROP TRIGGER IF EXISTS ControlloAggiornamentoResponsabile;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoResponsabile
BEFORE UPDATE ON Responsabile
FOR EACH ROW
BEGIN
	IF 
		NEW.Sesso <> 'M'
        AND
        NEW.Sesso <> 'F'
        AND
        NEW.Sesso <> 'A'
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! I sessi possono essere solo M per Maschio, F per Femmina e A per Altro.';
	END IF;
    
    IF
		NEW.Stipendio < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Uno Stipendio non può essere negativo.';
    END IF;
    
    IF
		NEW.DataNascita > NEW.DataAssunzione
        OR
        NEW.DataAssunzione < DATE_ADD(NEW.DataNascita, INTERVAL 18 YEAR)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Uno Stipendio non può essere negativo.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento del Coefficiente di Rischio sia tra 0 e 1
DROP TRIGGER IF EXISTS ControlloInserimentoPericoloGeologico;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoPericoloGeologico
BEFORE INSERT ON PericoloGeologico
FOR EACH ROW
BEGIN
	IF
		NEW.CoefficienteRischio < 0
        OR 
        NEW.CoefficienteRischio > 1
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Un Coefficiente di Rischio non può essere né minore di 0 né maggiore di 1.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'inserimento del Coefficiente di Rischio sia tra 0 e 1
DROP TRIGGER IF EXISTS ControlloAggiornamentoPericoloGeologico;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoPericoloGeologico
BEFORE UPDATE ON PericoloGeologico
FOR EACH ROW
BEGIN
	IF
		NEW.CoefficienteRischio < 0
        OR 
        NEW.CoefficienteRischio > 1
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Un Coefficiente di Rischio non può essere né minore di 0 né maggiore di 1.';
    END IF;
END $$
DELIMITER ;

# Controlla che non venga superato il massimo numero di lavoratori stabilita per la sicurezza all'interno di Tipologia di Lavoro
DROP TRIGGER IF EXISTS ControllaMassimoNumeroLavoratori;
DELIMITER $$
CREATE TRIGGER ControllaMassimoNumeroLavoratori
BEFORE INSERT ON Turni_Di_Lavoro_Lavoratore
FOR EACH ROW
BEGIN    
    IF    
		 ((
          SELECT IFNULL(COUNT(DISTINCT T.CodiceFiscale), 0)
          FROM Turni_Di_Lavoro_Lavoratore T
          WHERE T.Lavoro = NEW.Lavoro
			   AND
                T.OrarioInizio = NEW.OrarioInizio
		 )
         >
         (
          SELECT TL.NumeroMassimoLavoratori
          FROM TipologiaLavoro TL INNER JOIN Lavoro L ON TL.Nome = L.TipologiaDiLavoro
          WHERE L.Codice_Lavoro = NEW.Lavoro
         ))
         OR
         ((
          SELECT IFNULL(COUNT(DISTINCT T.CodiceFiscale), 0)
          FROM Turni_Di_Lavoro_Lavoratore T
          WHERE T.Lavoro = NEW.Lavoro
			   AND
                T.OrarioInizio = NEW.OrarioInizio
		 )
         >
         (
		  SELECT SUM(C.NumeroMassimoLavoratori)
          FROM Turni_Di_Lavoro_Capocantiere T INNER JOIN Capocantiere C ON T.CodiceFiscale = C.CodiceFiscale
          WHERE T.Lavoro = NEW.Lavoro
		 ))
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Per ragioni di sicurezza non si possono tenere così tanti lavoratori.';
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserito in Turni Di Lavoro per Lavoratore un Lavoratore Pensionato
DROP TRIGGER IF EXISTS ControlloPensionamentoLavoratori;
DELIMITER $$
CREATE TRIGGER ControlloPensionamentoLavoratori
BEFORE INSERT ON Turni_Di_Lavoro_Lavoratore
FOR EACH ROW
BEGIN
    IF    
		 (SELECT L.Pensione
          FROM Lavoratore L
          WHERE L.CodiceFiscale = NEW.CodiceFiscale) = TRUE
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Lavoratore è Pensionato.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Orario di Fine non sia minore o uguale a quello dell'inizio in Turni Di Lavoro per Lavoratore nell'inserimento
DROP TRIGGER IF EXISTS ControlloInserimentoOrariLavoratori;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoOrariLavoratori
BEFORE INSERT ON Turni_Di_Lavoro_Lavoratore
FOR EACH ROW
BEGIN
    IF    
		NEW.OrarioFine <= NEW.OrarioInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Fine deve essere maggiore di quello di Inizio.';
    END IF;
    
    IF
		DATE_FORMAT(NEW.OrarioInizio, '%Y|%m|%d') 
        <
        (SELECT L.DataInizio
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Inizio deve avere una Data consona a quella di Inizio del Lavoro.';
	ELSEIF
		DATE_FORMAT(NEW.OrarioFine, '%Y|%m|%d') 
        >
        (SELECT L.DataFine
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Fine deve avere una Data consona a quella di Inizio del Lavoro.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Orario di Fine non sia minore o uguale a quello dell'inizio in Turni Di Lavoro per Lavoratore nell'aggiornamento
DROP TRIGGER IF EXISTS ControlloAggiornamentoOrariLavoratori;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoOrariLavoratori
BEFORE UPDATE ON Turni_Di_Lavoro_Lavoratore
FOR EACH ROW
BEGIN
    IF    
		NEW.OrarioFine <= NEW.OrarioInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Fine deve essere maggiore di quello di Inizio.';
    END IF;
    
    IF
		DATE_FORMAT(NEW.OrarioInizio, '%Y|%m|%d') 
        <
        (SELECT L.DataInizio
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Inizio deve avere una Data consona a quella di Inizio del Lavoro.';
	ELSEIF
		DATE_FORMAT(NEW.OrarioFine, '%Y|%m|%d') 
        >
        (SELECT L.DataFine
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Fine deve avere una Data consona a quella di Inizio del Lavoro.';
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserito in Turni Di Lavoro per Capocantiere un Capocantiere Pensionato
DROP TRIGGER IF EXISTS ControlloPensionamentoCapocantieri;
DELIMITER $$
CREATE TRIGGER ControlloPensionamentoCapocantieri
BEFORE INSERT ON Turni_Di_Lavoro_Capocantiere
FOR EACH ROW
BEGIN
    IF    
		 (SELECT C.Pensione
          FROM Capocantiere C
          WHERE C.CodiceFiscale = NEW.CodiceFiscale) = TRUE
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Capocantiere è Pensionato.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Orario di Fine non sia minore o uguale a quello dell'inizio in Turni Di Lavoro per Capocantiere nell'inserimento
DROP TRIGGER IF EXISTS ControlloInserimentoOrariCapocantieri;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoOrariCapocantieri
BEFORE INSERT ON Turni_Di_Lavoro_Capocantiere
FOR EACH ROW
BEGIN
    IF    
		NEW.OrarioFine <= NEW.OrarioInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Fine deve essere maggiore di quello di Inizio.';
    END IF;
    
    IF
		DATE_FORMAT(NEW.OrarioInizio, '%Y|%m|%d') 
        <
        (SELECT L.DataInizio
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Inizio deve avere una Data consona a quella di Inizio del Lavoro.';
	ELSEIF
		DATE_FORMAT(NEW.OrarioFine, '%Y|%m|%d') 
        >
        (SELECT L.DataFine
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Fine deve avere una Data consona a quella di Inizio del Lavoro.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Orario di Fine non sia minore o uguale a quello dell'inizio in Turni Di Lavoro per Capocantiere nell'aggiornamento
DROP TRIGGER IF EXISTS ControlloAggiornamentoOrariCapocantieri;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoOrariCapocantieri
BEFORE UPDATE ON Turni_Di_Lavoro_Capocantiere
FOR EACH ROW
BEGIN
    IF    
		NEW.OrarioFine <= NEW.OrarioInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Fine deve essere maggiore di quello di Inizio.';
    END IF;
    
    IF
		DATE_FORMAT(NEW.OrarioInizio, '%Y|%m|%d') 
        <
        (SELECT L.DataInizio
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Inizio deve avere una Data consona a quella di Inizio del Lavoro.';
	ELSEIF
		DATE_FORMAT(NEW.OrarioFine, '%Y|%m|%d') 
        >
        (SELECT L.DataFine
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Fine deve avere una Data consona a quella di Inizio del Lavoro.';
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserito in Turni Di Lavoro per Responsabile un Responsabile Pensionato
DROP TRIGGER IF EXISTS ControlloPensionamentoResponsabili;
DELIMITER $$
CREATE TRIGGER ControlloPensionamentoResponsabili
BEFORE INSERT ON Turni_Di_Lavoro_Responsabile
FOR EACH ROW
BEGIN
    IF    
		 (SELECT R.Pensione
          FROM Responsabile R
          WHERE R.CodiceFiscale = NEW.CodiceFiscale) = TRUE
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Responsabile è Pensionato.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Orario di Fine non sia minore o uguale a quello dell'inizio in Turni Di Lavoro per Responsabile nell'inserimento
DROP TRIGGER IF EXISTS ControlloInserimentoOrariResponsabili;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoOrariResponsabili
BEFORE INSERT ON Turni_Di_Lavoro_Responsabile
FOR EACH ROW
BEGIN
    IF    
		NEW.OrarioFine <= NEW.OrarioInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Fine deve essere maggiore di quello di Inizio.';
    END IF;
    
    IF
		DATE_FORMAT(NEW.OrarioInizio, '%Y|%m|%d') 
        <
        (SELECT L.DataInizio
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Inizio deve avere una Data consona a quella di Inizio del Lavoro.';
	ELSEIF
		DATE_FORMAT(NEW.OrarioFine, '%Y|%m|%d') 
        >
        (SELECT L.DataFine
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Orario di Fine deve avere una Data consona a quella di Inizio del Lavoro.';
    END IF;
END $$
DELIMITER ;

# Controlla che l'Orario di Fine non sia minore o uguale a quello dell'inizio in Turni Di Lavoro per Responsabile nell'inserimento
DROP TRIGGER IF EXISTS ControlloAggiornamentoOrariResponsabili;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoOrariResponsabili
BEFORE UPDATE ON Turni_Di_Lavoro_Responsabile
FOR EACH ROW
BEGIN
    IF    
		NEW.OrarioFine <= NEW.OrarioInizio
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Fine deve essere maggiore di quello di Inizio.';
    END IF;
    
    IF
		DATE_FORMAT(NEW.OrarioInizio, '%Y|%m|%d') 
        <
        (SELECT L.DataInizio
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Inizio deve avere una Data consona a quella di Inizio del Lavoro.';
	ELSEIF
		DATE_FORMAT(NEW.OrarioFine, '%Y|%m|%d') 
        >
        (SELECT L.DataFine
		 FROM Lavoro L
         WHERE L.Codice_Lavoro = NEW.Lavoro)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Orario di Fine deve avere una Data consona a quella di Inizio del Lavoro.';
    END IF;
END $$
DELIMITER ;

# Controlla che nell'inserimento di un Pericolo Geologico ci sia un Coefficiente di Rischio compreso tra 0 e 1
DROP TRIGGER IF EXISTS ControlloInserimentoPericoloGeologico;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoPericoloGeologico
BEFORE INSERT ON PericoloGeologico
FOR EACH ROW
BEGIN
    IF    
		NEW.CoefficienteRischio <= 0
        OR 
        NEW.CoefficienteRischio > 1
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Coefficiente di Rischio non può essere nullo ne maggiore di 1.';
    END IF;
END $$
DELIMITER ;

# Controlla che nell'aggiornamento di un Pericolo Geologico ci sia un Coefficiente di Rischio compreso tra 0 e 1
DROP TRIGGER IF EXISTS ControlloAggiornamentoPericoloGeologico;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoPericoloGeologico
BEFORE UPDATE ON PericoloGeologico
FOR EACH ROW
BEGIN
    IF    
		NEW.CoefficienteRischio <= 0
        OR 
        NEW.CoefficienteRischio > 1
	THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Coefficiente di Rischio non può essere nullo ne maggiore di 1.';
    END IF;
END $$
DELIMITER ;

# Controlla l'Inserimento di un Pericolo in Pericolo Geologico
DROP TRIGGER IF EXISTS ControlloPericolo;
DELIMITER $$
CREATE TRIGGER ControlloPericolo
AFTER INSERT ON PericoloGeologico
FOR EACH ROW
BEGIN
	IF
		NEW.Pericolo <> 'Allargamento Crepa'
        AND
		NEW.Pericolo <> 'Alluvione'
        AND
        NEW.Pericolo <> 'Ciclone'
        AND
        NEW.Pericolo <> 'Gelo'
        AND
        NEW.Pericolo <> 'Innalzamento Umidità Esterna'
        AND
        NEW.Pericolo <> 'Innalzamento Umidità Interna'
		AND
        NEW.Pericolo <> 'Eruzione Vulcanica'
		AND
		NEW.Pericolo <> 'Incendio'
        AND
        NEW.Pericolo <> 'Impatto Meteorico'
        AND
        NEW.Pericolo <> 'Inondazione'
        AND
        NEW.Pericolo <> 'Frana'
        AND
		NEW.Pericolo <> 'Ondata di Caldo' 
		AND
        NEW.Pericolo <> 'Ondata di Freddo' 
		AND
        NEW.Pericolo <> 'Terremoto'
        AND
        NEW.Pericolo <> 'Tornado'
        AND
        NEW.Pericolo <> 'Valanga'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! I Pericoli possibili sono: Allargamento Crepa, Alluvione, Ciclone, Innalzamento Umidità Esterna, Innalzamento Umidità Interna, Eruzione Vulcanica, Incendio, Impatto Meteorico, Inondazione, Frana, Ondata di Caldo, Terremoto, Tornado, Valanga';
    END IF;	
END $$;
DELIMITER ;

# Controlla l'Inserimento del Tipo di una Calamità 
DROP TRIGGER IF EXISTS ControlloInserimentoCalamita;
DELIMITER $$
CREATE TRIGGER ControlloInserimentoCalamita
BEFORE INSERT ON Calamita
FOR EACH ROW
BEGIN
	IF
		NEW.Nome <> 'Allargamento Crepa'
        AND
		NEW.Nome <> 'Alluvione'
        AND
        NEW.Nome <> 'Ciclone'
        AND
        NEW.Nome <> 'Gelo'
        AND
        NEW.Nome <> 'Innalzamento Umidità Esterna'
        AND
        NEW.Nome <> 'Innalzamento Umidità Interna'
		AND
        NEW.Nome <> 'Eruzione Vulcanica'
		AND
		NEW.Nome <> 'Incendio'
        AND
        NEW.Nome <> 'Impatto Meteorico'
        AND
        NEW.Nome <> 'Inondazione'
        AND
        NEW.Nome <> 'Frana'
        AND
		NEW.Nome <> 'Ondata di Caldo' 
		AND
        NEW.Nome <> 'Ondata di Freddo' 
		AND
        NEW.Nome <> 'Terremoto'
        AND
        NEW.Nome <> 'Tornado'
        AND
        NEW.Nome <> 'Valanga'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Le Calamità possibili sono: Allargamento Crepa, Alluvione, Ciclone, Innalzamento Umidità Esterna, Innalzamento Umidità Interna, Eruzione Vulcanica, Incendio, Impatto Meteorico, Inondazione, Frana, Ondata di Caldo, Terremoto, Tornado, Valanga';
    END IF;	
    
    IF
		NEW.Epicentro < 0 
    THEN 
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Epicentro non può essere negativo.';
	END IF;
    
        IF
		NEW.Intensita < 1
        OR
        NEW.Intensita > 12
    THEN 
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Intensità compresa tra 1 e 12.';
	END IF;    
END $$;
DELIMITER ;

# Controlla l'Aggiornamento del Tipo di una Calamità 
DROP TRIGGER IF EXISTS ControlloAggiornamentoCalamita;
DELIMITER $$
CREATE TRIGGER ControlloAggiornamentoCalamita
BEFORE UPDATE ON Calamita
FOR EACH ROW
BEGIN
	IF
		NEW.Nome <> 'Allargamento Crepa'
        AND
		NEW.Nome <> 'Alluvione'
        AND
        NEW.Nome <> 'Ciclone'
        AND
        NEW.Nome <> 'Gelo'
        AND
        NEW.Nome <> 'Innalzamento Umidità Esterna'
        AND
        NEW.Nome <> 'Innalzamento Umidità Interna'
		AND
        NEW.Nome <> 'Eruzione Vulcanica'
		AND
		NEW.Nome <> 'Incendio'
        AND
        NEW.Nome <> 'Impatto Meteorico'
        AND
        NEW.Nome <> 'Inondazione'
        AND
        NEW.Nome <> 'Frana'
        AND
		NEW.Nome <> 'Ondata di Caldo' 
		AND
        NEW.Nome <> 'Ondata di Freddo' 
		AND
        NEW.Nome <> 'Terremoto'
        AND
        NEW.Nome <> 'Tornado'
        AND
        NEW.Nome <> 'Valanga'
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Le Calamità possibili sono: Allargamento Crepa, Alluvione, Ciclone, Innalzamento Umidità Esterna, Innalzamento Umidità Interna, Eruzione Vulcanica, Incendio, Impatto Meteorico, Inondazione, Frana, Ondata di Caldo, Terremoto, Tornado, Valanga';
    END IF;	
    
    IF
		NEW.Epicentro < 0 
    THEN 
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Epicentro non può essere negativo.';
	END IF;
    
        IF
		NEW.Intensita < 1
        OR
        NEW.Intensita > 12
    THEN 
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Intensità compresa tra 1 e 12.';
	END IF;    
END $$;
DELIMITER ;

# Calcola la gravità di un Calamità che ha compromesso un edificio 
DROP TRIGGER IF EXISTS CalcoloGravita;
DELIMITER $$
CREATE TRIGGER CalcoloGravita
BEFORE INSERT ON Calamita
FOR EACH ROW
BEGIN
	DECLARE n_sensori INT DEFAULT 0;
    DECLARE k INT DEFAULT 0;
    
    IF 
		NEW.Nome = 'Terremoto'
        OR
        NEW.Nome = 'Ciclone'
        OR
        NEW.Nome = 'Frana'
        OR
        NEW.Nome = 'Tornado'
        OR
        NEW.Nome = 'Valanga'
    THEN
		SET k = 1;
		SET n_sensori = 
		(
			SELECT IFNULL(COUNT(*), 0)
			FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
								 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
                                 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
                                 INNER JOIN Edificio E ON P.Edificio = E.ID
			WHERE R.Data = NEW.Data 
				 AND 
				 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
				 AND 
				  E.Locazione = NEW.Area 
				 AND 
				  (S.Categoria = 'Accelerometro X' OR S.Categoria = 'Accelerometro Y' OR S.Categoria = 'Accelerometro Z' 
				   OR S.Categoria = 'Giroscopio X' OR S.Categoria = 'Giroscopio Y' OR S.Categoria = 'Giroscopio X') 
			);
            SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Ondata di Caldo'    
            OR
            NEW.Nome = 'Eruzione Vulcanica'
		THEN		
			SET k = 2;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Termostato Esterno Caldo'
				);
			SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Alluvione'
            OR
			NEW.Nome = 'Inondazione'
		THEN		
			SET k = 1.5;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Pluviometro'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Innalzamento Umidità Esterna'
		THEN		
			SET k = 1;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Igrometro Esterno'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
        ELSEIF
			NEW.Nome = 'Innalzamento Umidità Interna'
		THEN		
			SET k = 1;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Igrometro Interno'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Allargamento Crepa'
		THEN		
			SET k = 1.4;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Posizione'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Incendio'
            OR
            NEW.Nome = 'Eruzione Vulcanica'
		THEN		
			SET k = 2;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Termostato Interno Caldo'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Ondata di Freddo'    
		THEN		
			SET k = 2;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
				FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Termostato Esterno Freddo'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
		ELSEIF
			NEW.Nome = 'Gelo'
		THEN		
			SET k = 2;
			SET n_sensori = 
			(
				SELECT IFNULL(COUNT(*), 0)
						FROM Registrazione R INNER JOIN Sensore S ON R.ID_Sensore = S.Codice_Seriale 
									 INNER JOIN Vano V on V.Codice_Vano = S.Vano 
									 INNER JOIN Pianta P ON V.Pianta = P.Codice_Pianta
									 INNER JOIN Edificio E ON P.Edificio = E.ID
				WHERE R.Data = NEW.Data 
					 AND 
					 (R.Orario BETWEEN NEW.Orario AND DATE_ADD(NEW.Orario, INTERVAL 1 HOUR)) 
					 AND 
					  E.Locazione = NEW.Area 
					 AND 
					  S.Categoria = 'Termostato Interno Freddo'
				);
				SET NEW.Gravita = n_sensori * k / NEW.Epicentro;
    END IF;
END $$;
DELIMITER ;

# Controlla che la quantità stoccata di un materiale non sia 0 in Altri Materiali, controlla che il costo sia maggiore o uguale a 0 e controlla il Codice Lotto
DROP TRIGGER IF EXISTS ControllaInserimentoAltriMateriali;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoAltriMateriali
BEFORE INSERT ON AltriMateriali
FOR EACH ROW
BEGIN
	IF
		NEW.QuantitaStoccata <= 0
        OR
        NEW.QuantitaStoccata <> NEW.QuantitaComprata
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire un lotto nuovo senza nulla o un lotto con una quantità comprata diversa da quella stoccata.';
	END IF;
    
    IF
		NEW.Codice_Lotto 
        IN
        (SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Costo è minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla il Codice Lotto di Altri Materiali, controlla che il costo sia maggiore o uguale a 0 e QuantitaComprata non può essere messa minore di quella stoccata
DROP TRIGGER IF EXISTS ControllaAggiornamentoAltriMateriali;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoAltriMateriali
BEFORE UPDATE ON AltriMateriali
FOR EACH ROW
BEGIN   
    IF
		NEW.Codice_Lotto 
        IN
        (SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire questo Codice Lotto!';
    END IF;
    
	IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Costo è minore di 0.';
    END IF;
    
	IF
		NEW.QuantitaComprata < NEW.QuantitaStoccata
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Quantità Comprata non può essere minore di quella stoccata.';
    END IF;
END $$
DELIMITER ;

# Controlla che la quantità stoccata di un materiale non sia 0 in Intonaco, controlla che il costo sia maggiore o uguale a 0 e controlla il Codice Lotto
DROP TRIGGER IF EXISTS ControllaInserimentoIntonaco;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoIntonaco
BEFORE INSERT ON Intonaco
FOR EACH ROW
BEGIN
	IF
		NEW.QuantitaStoccata <= 0
	OR
        NEW.QuantitaStoccata <> NEW.QuantitaComprata
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire un lotto nuovo senza nulla o un lotto con una quantità comprata diversa da quella stoccata.';
	END IF;
    
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Costo è minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla il Codice Lotto in Intonaco, controlla che il costo sia maggiore o uguale a 0 e QuantitaComprata non può essere messa minore di quella stoccata
DROP TRIGGER IF EXISTS ControllaAggiornamentoIntonaco;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoIntonaco
BEFORE UPDATE ON Intonaco
FOR EACH ROW
BEGIN    
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Costo è minore di 0.';
    END IF;
    
	IF
		NEW.QuantitaComprata < NEW.QuantitaStoccata
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Quantità Comprata non può essere minore di quella stoccata.';
    END IF;
END $$
DELIMITER ;

# Controlla che la quantità stoccata di un materiale non sia 0 in Mattoni, controlla che il costo sia maggiore o uguale a 0 e controlla il Codice Lotto
DROP TRIGGER IF EXISTS ControllaInserimentoMattoni;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoMattoni
BEFORE INSERT ON Mattoni
FOR EACH ROW
BEGIN
	IF
		NEW.QuantitaStoccata <= 0
	OR
        NEW.QuantitaStoccata <> NEW.QuantitaComprata
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire un lotto nuovo senza nulla o un lotto con una quantità comprata diversa da quella stoccata.';
	END IF;
    
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Costo è minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla il Codice Lotto in Mattoni, controlla che il costo sia maggiore o uguale a 0 e QuantitaComprata non può essere messa minore di quella stoccata
DROP TRIGGER IF EXISTS ControllaAggiornamentoMattoni;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoMattoni
BEFORE UPDATE ON Mattoni
FOR EACH ROW
BEGIN    
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Costo è minore di 0.';
    END IF;
    
	IF
		NEW.QuantitaComprata < NEW.QuantitaStoccata
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Quantità Comprata non può essere minore di quella stoccata.';
    END IF;
END $$
DELIMITER ;

# Controlla che la quantità stoccata di un materiale non sia 0 in Piastrelle, guarda che la fuga non sia 0, controlla che il costo sia maggiore o uguale a 0 e controlla il Codice Lotto
DROP TRIGGER IF EXISTS ControllaInserimentoPiastrelle;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoPiastrelle
BEFORE INSERT ON Piastrelle
FOR EACH ROW
BEGIN
	IF
		NEW.QuantitaStoccata <= 0
	OR
        NEW.QuantitaStoccata <> NEW.QuantitaComprata
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire un lotto nuovo senza nulla o un lotto con una quantità comprata diversa da quella stoccata.';
	END IF;
    
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire questo Codice Lotto!';
    END IF;
    
	IF
		NEW.Fuga < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire una fuga minore di 0.';
	END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Costo è minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che la fuga non sia 0 nell'aggiornamento delle Piastrelle e controlla il Codice Lotto, controlla che il costo sia maggiore o uguale a 0 e QuantitaComprata non può essere messa minore di quella stoccata
DROP TRIGGER IF EXISTS ControllaAggiornamentoPiastrelle;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoPiastrelle
BEFORE UPDATE ON Piastrelle
FOR EACH ROW
BEGIN
	IF
		NEW.Fuga < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non puoi inserire una fuga minore di 0.';
	END IF;
        
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Pietre P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Costo è minore di 0.';
    END IF;
    
	IF
		NEW.QuantitaComprata < NEW.QuantitaStoccata
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Quantità Comprata non può essere minore di quella stoccata.';
    END IF;
END $$
DELIMITER ;

# Controlla che la quantità stoccata di un materiale non sia 0 in Pietre, lo spessore non può essere minore di 0, controlla che il costo sia maggiore o uguale a 0 e controlla il Codice Lotto
DROP TRIGGER IF EXISTS ControllaInserimentoPietre;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoPietre
BEFORE INSERT ON Pietre
FOR EACH ROW
BEGIN
	IF
		NEW.QuantitaStoccata <= 0
	OR
        NEW.QuantitaStoccata <> NEW.QuantitaComprata
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire un lotto nuovo senza nulla o un lotto con una quantità comprata diversa da quella stoccata.';
	END IF;
        
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire questo Codice Lotto!';
    END IF;
    
	IF
		NEW.Spessore < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire uno spessore minore di 0.';
	END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Il Costo è minore di 0.';
    END IF;
END $$
DELIMITER ;

# Controlla che lo spessore non sia 0 nell'aggiornamento delle Pietre e controlla il Codice Lotto, controlla che il costo sia maggiore o uguale a 0 e QuantitaComprata non può essere messa minore di quella stoccata
DROP TRIGGER IF EXISTS ControllaAggiornamentoPietre;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoPietre
BEFORE UPDATE ON Pietre
FOR EACH ROW
BEGIN    
	IF
		NEW.Spessore < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non puoi inserire uno spessore minore di 0.';
	END IF;
    
	IF
		NEW.Codice_Lotto 
        IN
        (SELECT AM.Codice_Lotto
		 FROM AltriMateriali AM
         UNION
         SELECT I.Codice_Lotto
		 FROM Intonaco I
         UNION
         SELECT M.Codice_Lotto
		 FROM Mattoni M
         UNION
         SELECT P.Codice_Lotto
		 FROM Piastrelle P)
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare questo Codice Lotto!';
    END IF;
    
    IF
		NEW.Costo < 0
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Costo è minore di 0.';
    END IF;
    
	IF
		NEW.QuantitaComprata < NEW.QuantitaStoccata
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! La Quantità Comprata non può essere minore di quella stoccata.';
    END IF;
END $$
DELIMITER ;

# Controlla che lo spessore non sia 0 nell'inserimento dello Strato
DROP TRIGGER IF EXISTS ControllaInserimentoStrato;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoStrato
BEFORE INSERT ON Strato
FOR EACH ROW
BEGIN   
	IF
		NEW.Spessore < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! Non puoi inserire uno spessore minore di 0.';
	END IF;
END $$
DELIMITER ;

# Controlla che lo spessore non sia 0 nell'aggiornamento dello Strato
DROP TRIGGER IF EXISTS ControllaAggiornamentoStrato;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoStrato
BEFORE INSERT ON Strato
FOR EACH ROW
BEGIN    
	IF
		NEW.Spessore < 0
	THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile aggiornare! Non puoi inserire uno spessore minore di 0.';
	END IF;
END $$
DELIMITER ;

# Controlla che non venga inserita una quantità maggiore rispetto a quella stoccata nel lotto selezionato negli Altri Materiali e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaInserimentoQuantitaImpiegoAltriMateriali;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoQuantitaImpiegoAltriMateriali
BEFORE INSERT ON ImpiegoAltriMateriali
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
        (
		 SELECT AM.QuantitaStoccata
         FROM AltriMateriali AM
         WHERE AM.Codice_Lotto = NEW.Lotto_Altri_Materiali
        )
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
	ELSEIF
		NEW.Quantita
        <=
		(
		 SELECT AM.QuantitaStoccata
         FROM AltriMateriali AM
         WHERE AM.Codice_Lotto = NEW.Lotto_Altri_Materiali
        )
	THEN
		UPDATE AltriMateriali
        SET QuantitaStoccata = QuantitaStoccata - NEW.Quantita
        WHERE Codice_Lotto = NEW.Lotto_Altri_Materiali;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga aggiornata una quantità maggiore rispetto a quella stoccata nel lotto selezionato negli Altri Materiali e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaAggiornamentoQuantitaImpiegoAltriMateriali;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoQuantitaImpiegoAltriMateriali
BEFORE UPDATE ON ImpiegoAltriMateriali
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita > OLD.Quantita
    THEN
		IF
			(NEW.Quantita-OLD.Quantita)
			>
			(
			 SELECT AM.QuantitaStoccata
			 FROM AltriMateriali AM
			 WHERE AM.Codice_Lotto = NEW.Lotto_Altri_Materiali
			)
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile aggiornare! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
		ELSEIF
			(NEW.Quantita-OLD.Quantita)
			<=
			(
			 SELECT AM.QuantitaStoccata
			 FROM AltriMateriali AM
			 WHERE AM.Codice_Lotto = NEW.Lotto_Altri_Materiali
			)
		THEN
			UPDATE AltriMateriali
			SET QuantiataStoccata = QuantitaStoccata - (NEW.Quantita-OLD.Quantita)
			WHERE Codice_Lotto = NEW.Lotto_Altri_Materiali;
        END IF;
	ELSEIF
		NEW.Quantita
        <
		OLD.Quantita
	THEN
		UPDATE AltriMateriali
        SET QuantitaStoccata = QuantitaStoccata + (OLD.Quantita-NEW.Quantita)
        WHERE Codice_Lotto = NEW.Lotto_Altri_Materiali;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserita una quantità maggiore rispetto a quella stoccata nel lotto selezionato nell'Intonaco e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaInserimentoQuantitaImpiegoIntonaco;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoQuantitaImpiegoIntonaco
BEFORE INSERT ON ImpiegoIntonaco
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
        (
		 SELECT I.QuantitaStoccata
         FROM Intonaco I
         WHERE I.Codice_Lotto = NEW.Lotto_Intonaco
        )
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
	ELSEIF
		NEW.Quantita
        <=
		(
		 SELECT I.QuantitaStoccata
         FROM Intonaco I
         WHERE I.Codice_Lotto = NEW.Lotto_Intonaco
        )
	THEN
		UPDATE Intonaco
        SET QuantitaStoccata = QuantitaStoccata - NEW.Quantita
        WHERE Codice_Lotto = NEW.Lotto_Intonaco;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga aggiornata una quantità maggiore rispetto a quella stoccata nel lotto selezionato nell'Intonaco e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaAggiornamentoQuantitaImpiegoIntonaco;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoQuantitaImpiegoIntonaco
BEFORE UPDATE ON ImpiegoIntonaco
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
		OLD.Quantita
    THEN
		IF
			(NEW.Quantita-OLD.Quantita)
			>
			(
			 SELECT I.QuantitaStoccata
			 FROM Intonaco I
			 WHERE I.Codice_Lotto = NEW.Lotto_Intonaco
			)
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile aggiornare! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
		ELSEIF
			(NEW.Quantita-OLD.Quantita)
			<=
			(
			 SELECT I.QuantitaStoccata
			 FROM Intonaco I
			 WHERE I.Codice_Lotto = NEW.Lotto_Intonaco
			)
		THEN
			UPDATE Intonaco
			SET QuantitaStoccata = QuantitaStoccata - (NEW.Quantita-OLD.Quantita)
			WHERE Codice_Lotto = NEW.Lotto_Intonaco;
        END IF;
	ELSEIF
		NEW.Quantita
        <
		OLD.Quantita
	THEN
		UPDATE Intonaco
        SET QuantitaStoccata = QuantitaStoccata + (OLD.Quantita-NEW.Quantita)
        WHERE Codice_Lotto = NEW.Lotto_Intonaco;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserita una quantità maggiore rispetto a quella stoccata nel lotto selezionato nei Mattoni e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaInserimentoQuantitaImpiegoMattoni;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoQuantitaImpiegoMattoni
BEFORE INSERT ON ImpiegoMattoni
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
        (
		 SELECT M.QuantitaStoccata
         FROM Mattoni M
         WHERE M.Codice_Lotto = NEW.Lotto_Mattoni
        )
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
	ELSEIF
		NEW.Quantita
        <=
		(
		 SELECT M.QuantitaStoccata
         FROM Mattoni M
         WHERE M.Codice_Lotto = NEW.Lotto_Mattoni
        )
	THEN
		UPDATE Mattoni
        SET QuantitaStoccata = QuantitaStoccata - NEW.Quantita
        WHERE Codice_Lotto = NEW.Lotto_Mattoni;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga aggiornata una quantità maggiore rispetto a quella stoccata nel lotto selezionato nei Mattoni e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaAggiornamentoQuantitaImpiegoMattoni;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoQuantitaImpiegoMattoni
BEFORE UPDATE ON ImpiegoMattoni
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
		OLD.Quantita
    THEN
		IF
			(NEW.Quantita-OLD.Quantita)
			>
			(
			 SELECT M.QuantitaStoccata
			 FROM Mattoni M
			 WHERE M.Codice_Lotto = NEW.Lotto_Mattoni
			)
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile aggiornare! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
		ELSEIF
			(NEW.Quantita-OLD.Quantita)
			<=
			(
			 SELECT M.QuantitaStoccata
			 FROM Mattoni M
			 WHERE M.Codice_Lotto = NEW.Lotto_Mattoni
			)
		THEN
			UPDATE Mattoni
			SET QuantitaStoccata = QuantitaStoccata - (NEW.Quantita-OLD.Quantita)
			WHERE Codice_Lotto = NEW.Lotto_Mattoni;
        END IF;
	ELSEIF
		NEW.Quantita
        <
		OLD.Quantita
	THEN
		UPDATE Mattoni
        SET QuantitaStoccata = QuantitaStoccata + (OLD.Quantita-NEW.Quantita)
        WHERE Codice_Lotto = NEW.Lotto_Mattoni;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserita una quantità maggiore rispetto a quella stoccata nel lotto selezionato nelle Pietre e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaInserimentoQuantitaImpiegoPietre;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoQuantitaImpiegoPietre
BEFORE INSERT ON ImpiegoPietre
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
        (
		 SELECT P.QuantitaStoccata
         FROM Pietre P
         WHERE P.Codice_Lotto = NEW.Lotto_Pietre
        )
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
	ELSEIF
		NEW.Quantita
        <=
		(
		 SELECT P.QuantitaStoccata
         FROM Pietre P
         WHERE P.Codice_Lotto = NEW.Lotto_Pietre
        )
	THEN
		UPDATE Pietre
        SET QuantitaStoccata = QuantitaStoccata - NEW.Quantita
        WHERE Codice_Lotto = NEW.Lotto_Pietre;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga aggiornata una quantità maggiore rispetto a quella stoccata nel lotto selezionato nelle Pietre e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaAggiornamentoQuantitaImpiegoPietre;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoQuantitaImpiegoPietre
BEFORE UPDATE ON ImpiegoPietre
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
		OLD.Quantita
    THEN
		IF
			(NEW.Quantita-OLD.Quantita)
			>
			(
			 SELECT P.QuantitaStoccata
			 FROM Pietre P
			 WHERE P.Codice_Lotto = NEW.Lotto_Pietre
			)
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile aggiornare! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
		ELSEIF
			(NEW.Quantita-OLD.Quantita)
			<=
			(
			 SELECT P.QuantitaStoccata
			 FROM Pietre P
			 WHERE P.Codice_Lotto = NEW.Lotto_Pietre
			)
		THEN
			UPDATE Pietre
			SET QuantitaStoccata = QuantitaStoccata - (NEW.Quantita-OLD.Quantita)
			WHERE Codice_Lotto = NEW.Lotto_Pietre;
        END IF;
	ELSEIF
		NEW.Quantita
        <
		OLD.Quantita
	THEN
		UPDATE Pietre
        SET QuantitaStoccata = QuantitaStoccata + (OLD.Quantita-NEW.Quantita)
        WHERE Codice_Lotto = NEW.Lotto_Pietre;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserita una quantità maggiore rispetto a quella stoccata nel lotto selezionato nelle Piastrelle e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaInserimentoQuantitaImpiegoPiastrelle;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoQuantitaImpiegoPiastrelle
BEFORE INSERT ON ImpiegoPiastrelle
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
        (
		 SELECT P.QuantitaStoccata
         FROM Piastrelle P
         WHERE P.Codice_Lotto = NEW.Lotto_Piastrelle
        )
    THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossibile inserire! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
	ELSEIF
		NEW.Quantita
        <=
		(
		 SELECT P.QuantitaStoccata
         FROM Piastrelle P
         WHERE P.Codice_Lotto = NEW.Lotto_Piastrelle
        )
	THEN
		UPDATE Piastrelle
        SET QuantitaStoccata = QuantitaStoccata - NEW.Quantita
        WHERE Codice_Lotto = NEW.Lotto_Piastrelle;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga aggiornata una quantità maggiore rispetto a quella stoccata nel lotto selezionato nelle Piastrelle e aggiorna il lotto
DROP TRIGGER IF EXISTS ControllaAggiornamentoQuantitaImpiegoPiastrelle;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoQuantitaImpiegoPiastrelle
BEFORE UPDATE ON ImpiegoPiastrelle
FOR EACH ROW
BEGIN
	IF
		NEW.Quantita 
        >
		OLD.Quantita
    THEN
		IF
			(NEW.Quantita-OLD.Quantita)
			>
			(
			 SELECT P.QuantitaStoccata
			 FROM Piastrelle P
			 WHERE P.Codice_Lotto = NEW.Lotto_Piastrelle
			)
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile aggiornare! La quantità richiesta è maggiore della quantità stoccata in questo lotto o è nulla.';
		ELSEIF
			(NEW.Quantita-OLD.Quantita)
			<=
            (
			 SELECT P.QuantitaStoccata
			 FROM Piastrelle P
			 WHERE P.Codice_Lotto = NEW.Lotto_Piastrelle
			)
		THEN
			UPDATE Piastrelle
			SET QuantitaStoccata = QuantitaStoccata - (NEW.Quantita-OLD.Quantita)
			WHERE Codice_Lotto = NEW.Lotto_Piastrelle;
        END IF;
	ELSEIF
		NEW.Quantita
        <
		OLD.Quantita
	THEN
		UPDATE Piastrelle
        SET QuantitaStoccata = QuantitaStoccata + (OLD.Quantita-NEW.Quantita)
        WHERE Codice_Lotto = NEW.Lotto_Piastrelle;
    END IF;
END $$
DELIMITER ;

# Controlla l'inserimento dei Sensori
DROP TRIGGER IF EXISTS ControllaInserimentoSensore;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoSensore
BEFORE INSERT ON Sensore
FOR EACH ROW
BEGIN
	IF
		NEW.Categoria <> 'Accelerometro'
        AND
        NEW.Categoria <> 'Accelerometro X'
        AND
        NEW.Categoria <> 'Accelerometro Y'
        AND
        NEW.Categoria <> 'Accelerometro Z'
        AND
        NEW.Categoria <> 'Giroscopio'
        AND
        NEW.Categoria <> 'Giroscopio X'
        AND
        NEW.Categoria <> 'Giroscopio Y'
        AND
        NEW.Categoria <> 'Giroscopio Z'
        AND
        NEW.Categoria <> 'Termostato Esterno'
        AND
        NEW.Categoria <> 'Termostato Esterno Caldo'
        AND
        NEW.Categoria <> 'Termostato Esterno Freddo'
        AND
        NEW.Categoria <> 'Termostato Interno'
        AND
        NEW.Categoria <> 'Termostato Interno Caldo'
        AND
        NEW.Categoria <> 'Termostato Interno Freddo'
        AND
        NEW.Categoria <> 'Igrometro Esterno'
		AND
		NEW.Categoria <> 'Igrometro Interno'
		AND 
		NEW.Categoria <> 'Pluviometro'
		AND
		NEW.Categoria <> 'Posizione'
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile inserire! La categoria non è quella valida!';
    END IF;   
    
	IF
		NEW.Categoria = 'Accelerometro' OR NEW.Categoria = 'Accelerometro X' OR NEW.Categoria = 'Accelerometro Y' OR NEW.Categoria = 'Accelerometro Z'
		OR
		NEW.Categoria = 'Giroscopio' OR NEW.Categoria = 'Giroscopio X' OR NEW.Categoria = 'Giroscopio Y' OR NEW.Categoria = 'Giroscopio Z'
		OR
		NEW.Categoria = 'Termostato Esterno' OR NEW.Categoria = 'Termostato Esterno Caldo' OR NEW.Categoria = 'Termostato Esterno Freddo'
	THEN
		IF
			NOT EXISTS (SELECT M.Esterno
			 	    FROM Muro M INNER JOIN Vertice V1 ON M.V1 = V1.Numero_Vertice
				       	      INNER JOIN Vertice V2 ON M.V2 = V2.Numero_Vertice
				     	      INNER JOIN PosizionamentoVano PV1 ON M.V1 = PV1.Vertice
				     	      INNER JOIN PosizionamentoVano PV2 ON M.V2 = PV2.Vertice
			 	    WHERE M.Esterno = TRUE
			     	         AND
							  PV1.Vano = PV2.Vano
			      	         AND 
			       	          PV1.Vano = NEW.Vano)
		THEN 
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Impossibile inserire! Il Vano non possiede Mura verso la parte esterna dello edificio per Sensori che devono stare nella parte esterna!';
		END IF;
	END IF;
END $$
DELIMITER ;

# Se la Categoria è Accelerometro, Giroscopio, Termostato Interno e Termostato Esterno aggiunge in automatico le varie informazioni
DROP TRIGGER IF EXISTS ControllaInserimentoSensoreSpeciale;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoSensoreSpeciale
AFTER INSERT ON Sensore
FOR EACH ROW
BEGIN
	IF
		NEW.Categoria = 'Accelerometro'
	THEN
		UPDATE Sensore
		SET Categoria = 'Accelerometro X'
		WHERE Codice_Seriale = NEW.Codice_Seriale;
		
		INSERT INTO Sensore(Codice_Seriale, Categoria, UnitaMisura, Alert, Vano)
		VALUES (NEW.Codice_Seriale, 'Accelerometro Y', NEW.UnitaMisura, NEW.Alert, NEW.Vano), 
			   (NEW.Codice_Seriale, 'Accelerometro Z', NEW.UnitaMisura, NEW.Alert, NEW.Vano);

	ELSEIF
		NEW.Categoria = 'Giroscopio'
	THEN
		UPDATE Sensore
		SET Categoria = 'Giroscopio X'
		WHERE Codice_Seriale = NEW.Codice_Seriale;
		
		INSERT INTO Sensore(Codice_Seriale, Categoria, UnitaMisura, Alert,Vano)
		VALUES (NEW.Codice_Seriale, 'Giroscopio Y', NEW.UnitaMisura, NEW.Alert, NEW.Vano), 
			   (NEW.Codice_Seriale, 'Giroscopio Z', NEW.UnitaMisura, NEW.Alert, NEW.Vano);

	ELSEIF
		NEW.Categoria = 'Termostato Interno'
	THEN
		UPDATE Sensore
		SET Categoria = 'Termostato Interno Caldo'
		WHERE Codice_Seriale = NEW.Codice_Seriale;
		
		INSERT INTO Sensore(Codice_Seriale, Categoria, UnitaMisura, Alert,Vano)
		VALUES (NEW.Codice_Seriale, 'Termostato Interno Freddo', NEW.UnitaMisura, (NEW.Alert * (-1) / 2), NEW.Vano);

	ELSEIF
		NEW.Categoria = 'Termostato Esterno'
	THEN
		UPDATE Sensore
		SET Categoria = 'Termostato Esterno Caldo'
		WHERE Codice_Seriale = NEW.Codice_Seriale;
		
		INSERT INTO Sensore(Codice_Seriale, Categoria, UnitaMisura, Alert,Vano)
		VALUES (NEW.Codice_Seriale, 'Termostato Esterno Freddo', NEW.UnitaMisura, (NEW.Alert * (-1) / 2), NEW.Vano);
	END IF;
END $$
DELIMITER ;

# Controlla l'aggiornamento dei Sensori
DROP TRIGGER IF EXISTS ControllaAggiornamentoSensore;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoSensore
BEFORE UPDATE ON Sensore
FOR EACH ROW
BEGIN
	IF
		NEW.Categoria <> 'Accelerometro X'
		AND
		NEW.Categoria <> 'Accelerometro Y'
		AND
		NEW.Categoria <> 'Accelerometro Z'
		AND
		NEW.Categoria <> 'Giroscopio X'
		AND
		NEW.Categoria <> 'Giroscopio Y'
		AND
		NEW.Categoria <> 'Giroscopio Z'
		AND
		NEW.Categoria <> 'Termostato Esterno Caldo'
		AND
		NEW.Categoria <> 'Termostato Esterno Freddo'
		AND
		NEW.Categoria <> 'Termostato Interno Caldo'
		AND
		NEW.Categoria <> 'Termostato Interno Freddo'
		AND
		NEW.Categoria <> 'Igrometro Esterno'
		AND
		NEW.Categoria <> 'Igrometro Interno'
		AND 
		NEW.Categoria <> 'Pluviometro'
		AND
		NEW.Categoria <> 'Posizione'
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile aggiornare! La categoria non è quella valida!';
    END IF;    
    
	IF
		NEW.Vano <> OLD.Vano
	THEN
		IF
			NEW.Categoria = 'Accelerometro' OR NEW.Categoria = 'Accelerometro X' OR NEW.Categoria = 'Accelerometro Y' OR NEW.Categoria = 'Accelerometro Z'
			OR
			NEW.Categoria = 'Giroscopio' OR NEW.Categoria = 'Giroscopio X' OR NEW.Categoria = 'Giroscopio Y' OR NEW.Categoria = 'Giroscopio Z'
			OR
			NEW.Categoria = 'Termostato Esterno' OR NEW.Categoria = 'Termostato Esterno Caldo' OR NEW.Categoria = 'Termostato Esterno Freddo'
		THEN
			IF
				NOT EXISTS (SELECT M.Esterno
			 	    	FROM Muro M INNER JOIN Vertice V1 ON M.V1 = V1.Numero_Vertice
				       	      	INNER JOIN Vertice V2 ON M.V2 = V2.Numero_Vertice
				     	      	INNER JOIN PosizionamentoVano PV1 ON M.V1 = PV1.Vertice
				     	      	INNER JOIN PosizionamentoVano PV2 ON M.V2 = PV2.Vertice
			 	    	WHERE M.Esterno = TRUE
			     	         	AND
						 PV1.Vano = PV2.Vano
			      	         	AND 
			       	          	 PV1.Vano = NEW.Vano)
			THEN 
				SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Impossibile aggiornare! Il Vano non possiede Mura verso la parte esterna dello edificio per Sensori che devono stare nella parte esterna!';
			END IF;
		END IF;
	END IF;
END $$
DELIMITER ;

# Calcolo la variazione dello Stato di un Edificio quando il valore di Registrazione supera l'Alert del Sensore
DROP TRIGGER IF EXISTS CalcoloDeltaStato;
DELIMITER $$
CREATE TRIGGER CalcoloDeltaStato
BEFORE UPDATE ON Registrazione
FOR EACH ROW
BEGIN    
	DECLARE delta INT DEFAULT 0;
	DECLARE allerta INT DEFAULT 0;
    DECLARE coeff_tmp INT DEFAULT 0;
    DECLARE tipo_sensore VARCHAR(50) DEFAULT '';
    DECLARE edificio INT DEFAULT 0;
    DECLARE k INT DEFAULT 0;
    
    SET allerta = 
	(
		SELECT S.Alert
		FROM Sensore S
		WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
	);
    
    IF 
		NEW.ValoreRegistrato > allerta
    THEN
        SET tipo_sensore =
		(
			SELECT S.categoria
			FROM Sensore S
			WHERE S.ID_sensore = NEW.ID_sensore AND S.Categoria = NEW.TipoSensore
		);
        SET edificio = 
        (
			SELECT E.ID
            FROM Edificio E INNER JOIN Sensore S ON E.ID = S.Edificio
            WHERE S.ID_sensore = NEW.ID_sensore AND S.Categoria = NEW.TipoSensore
        );
        
        IF
			tipo_sensore = 'Accelerometro X' OR tipo_sensore = 'Accelerometro Y' OR tipo_sensore = 'Accelerometro Z'
            OR
            tipo_sensore = 'Giroscopio X' OR tipo_sensore = 'Giroscopio Y' OR tipo_sensore = 'Giroscopio Z'
        THEN
			SET k = 1;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          (P.Pericolo = 'Terremoto'
						   OR
						   P.Pericolo = 'Ciclone'
						   OR
                           P.Pericolo = 'Frana'
						   OR
                           P.Pericolo = 'Tornado'
						   OR
                           P.Pericolo = 'Valanga')
				);
            
        ELSEIF
			tipo_sensore = 'Termostato Interno Caldo' 
		THEN
			SET k = 2;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
						   P.Pericolo = 'Incendio'
				);

        ELSEIF
            tipo_sensore = 'Termostato Esterno Caldo'
		THEN
			SET k = 2;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          (P.Pericolo = 'Ondata di Caldo'
						   OR
						   P.Pericolo = 'Eruzione Vulcanica')
				);

		ELSEIF
			tipo_sensore = 'Termostato Interno Freddo' 
		THEN
			SET k = 2;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
						   P.Pericolo = 'Gelo'
				);

        ELSEIF
            tipo_sensore = 'Termostato Esterno Freddo'
		THEN
			SET k = 2;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          P.Pericolo = 'Ondata di Freddo'
				);

		ELSEIF
			tipo_sensore = 'Pluviometro'
        THEN
			SET k = 1.5;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          (P.Pericolo = 'Alluvione'
						   OR
						   P.Pericolo = 'Inondazione')
				);
		
        ELSEIF
			tipo_sensore = 'Posizione'
        THEN
			SET k = 1.4;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          P.Pericolo = 'Allargamento Crepa'
				);
            
		ELSEIF
			tipo_sensore = 'Igrometro Interno'
        THEN
			SET k = 1;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          P.Pericolo = 'Innalzamento Umidità Interna'
				);
		
		ELSEIF
            tipo_sensore = 'Igrometro Esterno'
        THEN
			SET k = 1;
			SET coeff_tmp =
				(
					SELECT SUM(P.CoefficienteRischio)
					FROM AreaGeografica A INNER JOIN Edificio E ON A.ID_Area = E.Locazione INNER JOIN Sensore S ON E.ID = S.Edificio
										  INNER JOIN PericolositaGeografica P ON A.ID_Area = P.Area
					WHERE S.ID_Sensore = NEW.ID_Sensore AND S.Categoria = NEW.TipoSensore
						 AND
                          P.Pericolo = 'Innalzamento Umidità Esterna'
				);
        END IF;
        
        IF
			Stato + k * coeff_tmp <= 4
		THEN 
			UPDATE Edificio
			SET Stato = Stato + k * coeff_tmp
			WHERE ID = edificio;
		ELSEIF
			Stato + k * coeff_tmp > 4
		THEN 
			UPDATE Edificio
			SET Stato = 4
			WHERE ID = edificio;
		END IF;
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserito un Sensore che non sia di Posizione in Inserimento
DROP TRIGGER IF EXISTS ControllaInserimentoCrepa;
DELIMITER $$
CREATE TRIGGER ControllaInserimentoCrepa
BEFORE INSERT ON Crepa
FOR EACH ROW
BEGIN
	IF
		NEW.TipoSensore <> 'Posizione'
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile inserire! La categoria non è quella valida! Deve essere un Sensore di Posizione';
    END IF;
END $$
DELIMITER ;

# Controlla che non venga inserito un Sensore che non sia di Posizione in Aggiornamento
DROP TRIGGER IF EXISTS ControllaAggiornamentoCrepa;
DELIMITER $$
CREATE TRIGGER ControllaAggiornamentoCrepa
BEFORE UPDATE ON Crepa
FOR EACH ROW
BEGIN
	IF
		NEW.TipoSensore <> 'Posizione'
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Impossibile aggiornare! La categoria non è quella valida! Deve essere un Sensore di Posizione';
    END IF;
END $$
DELIMITER ;

# Aggiornamento giornaliero per lavori in cui viene inserita direttamente la data d'inizio e la data di fine, ma non il costo
DROP EVENT IF EXISTS Aggiornamento_Costo_Lavori;
CREATE EVENT Aggiornamento_Costo_Lavori
ON SCHEDULE EVERY 1 DAY
STARTS '2017-12-31 23:50:00'
DO
	CALL Procedura_Aggiornamento_Costo_Lavori();	


/*
DROP TRIGGER IF EXISTS ControlloAlert;
DELIMITER $$
CREATE TRIGGER ControlloAlert
AFTER INSERT ON Registrazione
FOR EACH ROW
BEGIN
	DECLARE area_geografica INT DEFAULT 000; 
	DECLARE nome_calamita VARCHAR(50);
    
	IF
		NEW.ValoreRegistrato >= (SELECT S.Alert
								 FROM Sensore S
                                 WHERE S.Codice_Sensore = NEW.Sensore)
    THEN
		SET area_geografica = (SELECT E.Locazione
							   FROM Vano V INNER JOIN Edificio E ON V.Edificio = E.ID # V.Edificio non c'è più
                               WHERE V.Codice_Vano = NEW.Vano);
        IF
			NOT EXISTS(SELECT *
					   FROM Calamita C 
                       WHERE C.Data = NEW.Data
							AND
                             C.Orario = NEW.Orario
							AND
                             C.Area = area_geografica)
        THEN
			INSERT INTO Calamita(Area, Data, Orario, Nome, Intensità, Epicentro)
            VALUES(area_geografica, NEW.Data, NEW.Orario, 'Roba Da Sassi', NULL, NULL);
        END IF;
        
	
    END IF;
END $$
DELIMITER ;
*/

# OPERAZIONI

# Operazione che restituisce il Lotto più conveniente (non ancora comprato) dato una determinata Tipologia di Materiale e un Materiale
DROP PROCEDURE IF EXISTS Lotto_Conveniente;
DELIMITER $$
CREATE PROCEDURE Lotto_Conveniente(_tipologia VARCHAR(50), _materiale VARCHAR(50))
BEGIN
	CASE
    WHEN _tipologia = 'Altri Materiali' OR _tipologia = 'AltriMateriali' THEN
		SELECT AM.Codice_Lotto, AM.Costo AS Costo_in_kg
		FROM AltriMateriali AM
		WHERE AM.Nome = _materiale 
			 AND
			  AM.QuantitaStoccata <> 0
			 AND
              AM.Costo IN (SELECT MIN(AM1.Costo)
						   FROM AltriMateriali AM1
						   WHERE AM.Nome = AM1.Nome
							    AND
								 AM1.QuantitaStoccata <> 0);
                                       
	WHEN _tipologia = 'Intonaco' THEN
		SELECT I.Codice_Lotto, I.Costo AS Costo_in_kg
		FROM Intonaco I
		WHERE I.Nome = _materiale 
			 AND
			  I.QuantitaStoccata <> 0
			 AND
              I.Costo IN (SELECT MIN(I1.Costo)
						  FROM Intonaco I1
						  WHERE I.Nome = I1.Nome
							   AND
								I1.QuantitaStoccata <> 0);
                                       
	WHEN _tipologia = 'Mattoni' THEN
		SELECT M.Codice_Lotto, M.Costo AS Costo_in_kg
		FROM Mattoni M
		WHERE M.Nome = _materiale 
			AND
			 M.QuantitaStoccata <> 0
			AND
             M.Costo IN (SELECT MIN(M1.Costo)
						 FROM Mattoni M1
						 WHERE M.Nome = M1.Nome
						      AND
                               M1.QuantitaStoccata <> 0);
	
	WHEN _tipologia = 'Piastrelle' THEN
		SELECT P.Codice_Lotto, P.Costo AS Costo_in_kg
		FROM Piastrelle P
		WHERE P.Nome = _materiale 
			 AND
			  P.QuantitaStoccata <> 0
			 AND
              P.Costo IN (SELECT MIN(P1.Costo)
						  FROM Piastrelle P1
						  WHERE P.Nome = P1.Nome
						       AND
                                P1.QuantitaStoccata <> 0);
       
	WHEN _tipologia = 'Pietre' THEN
		SELECT P.Codice_Lotto, P.Costo AS Costo_in_kg
		FROM Pietre P
		WHERE P.Nome = _materiale 
			 AND
			  P.QuantitaStoccata <> 0
			 AND
              P.Costo IN (SELECT MIN(P1.Costo)
						  FROM Pietre P1
						  WHERE P.Nome = P1.Nome
						       AND
                                P1.QuantitaStoccata <> 0);
                                   
	WHEN _tipologia <> 'Altri Materiali' AND _tipologia <> 'AltriMateriali' AND _tipologia <> 'Intonaco' AND _tipologia <> 'Mattoni' AND _tipologia <> 'Piastrelle' AND _tipologia <> 'Pietre' THEN
		SELECT NULL;
    END CASE;
END $$;
DELIMITER ;

# Operazione che restituisce i lavori attualmente in corso e ordinati per data di inizio dei lavori
DROP PROCEDURE IF EXISTS Ordine_Lavori;
DELIMITER $$
CREATE PROCEDURE Ordine_Lavori()
BEGIN
	SELECT L.Codice_Lavoro, L.Tipologia, RANK() OVER(ORDER BY DataInizio) AS Posizione
	FROM Lavoro L
	WHERE L.DataFine = NULL;
END $$;
DELIMITER ;

# Operazione che resitutisce i lavoratori meno occupati
DROP PROCEDURE IF EXISTS Lavoratori_Meno_Occupati;
DELIMITER $$
CREATE PROCEDURE Lavoratori_Meno_Occupati()
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS _Classifica 
	(
		Lavoratore VARCHAR(50) NOT NULL,
		Tot_Lavori INT NOT NULL,
		PRIMARY KEY(Lavoratore)
	);

	TRUNCATE TABLE _Classifica;

	INSERT INTO _Classifica
		SELECT T.Lavoratore, IFNULL(COUNT(*), 0) as Tot_Lavori
		FROM Turni_Di_Lavoro_Lavoratore T INNER JOIN Lavoro L on L.Codice_Lavoro = T.Lavoro
		WHERE L.DataFine = NULL
		GROUP BY T.Lavoratore;
		
	SELECT *, RANK() OVER(ORDER BY C.tot_lavori) AS Posizione
	FROM _Classifica C;
END $$
DELIMITER ;

# Operazione che resitutisce i lavoratori meno occupati
DROP PROCEDURE IF EXISTS Caratteristiche_Vano;
DELIMITER $$
CREATE PROCEDURE Caratteristiche_Vano(IN _vano INT)
BEGIN
	DECLARE punti_pm INT DEFAULT 0;
	DECLARE punti_inseriti INT DEFAULT 0;
	DECLARE area FLOAT DEFAULT 0;
	DECLARE somma1, somma2 FLOAT DEFAULT 0;

	CREATE TEMPORARY TABLE IF NOT EXISTS _Classifica_Vertici
	(
		Numero INT PRIMARY KEY,
		X FLOAT NOT NULL,
		Y FLOAT NOT NULL,
		Posizione INT
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	
	TRUNCATE TABLE _Classifica_Vertici;

	SET punti_pm =
	(
		SELECT punti_pm
		FROM Vano V
		WHERE V.Codice_Vano = _vano
	);

	SET punti_inseriti =
	(
		SELECT COUNT(*)
		FROM PosizionamentoVano PV 
		WHERE PV.Vano = _vano
	);

	IF 
		punti_pm = punti_inseriti
	THEN
		INSERT INTO _Classifica_Vertici
			SELECT V.Numero_Vertice, V.X, V.Y
			FROM PosizionamentoVano PV INNER JOIN Vertice V ON V.Numero = PV.Vertice AND V.Pianta = PV.Pianta
			WHERE PV.Vano = _vano
            ORDER BY V.Numero_Vertice;

		SET Somma1 =
		(
			SELECT SUM(C1.X * C2.Y)
			FROM _Classifica_Vertici C1 CROSS JOIN _Classifica_Vertici C2  
			WHERE ( C1.Posizione = C2.Posizione - 1 ) OR ( C2.Posizione = 1 AND C1.Posizione =
			(
				SELECT COUNT(*)
				FROM _Classifica_Vertici _C
			))
		);

		SET Somma2 =
		(
			SELECT SUM(C1.Y * C2.X)
			FROM _Classifica_Vertici C1 CROSS JOIN _Classifica_Vertici C2  
			WHERE ( C1.Posizione = C2.Posizione - 1 ) OR ( C2.Posizione = 1 AND C1.Posizione =
			(
				SELECT COUNT(*)
				FROM _Classifica_Vertici _C
			))
		);
        
		SET area = ABS( Somma1- Somma2 );
	END IF;

	SELECT V.Codice_Vano, V.LunghezzaMax, V.LarghezzaMax, V.AltezzaMax, V.Pavimentazione, A.Tipologia, A.PuntoCardinale, area
	FROM PuntoAccesso PA INNER JOIN Vano V ON V.Codice_Vano = PA.Vano INNER JOIN Apertura A ON A.Codice_Apertura = PA.Apertura
	WHERE V.Codice_Vano = _vano;
END $$
DELIMITER ;

# Operazione che restituisce gli Edifici che abbiano uno stato maggiore o uguale dell'input x
DROP PROCEDURE IF EXISTS Mostra_Edifici_Per_Stato;
DELIMITER $$
CREATE PROCEDURE Mostra_Edifici_Per_Stato(IN _x INT)
BEGIN
	SELECT *
	FROM Edificio E
	WHERE E.Stato >= _x
    ORDER BY E.Stato, E.ID;
END $$
DELIMITER ;

# Operazione che restituisce un elenco delle Calamità in ordine di gravità decrescente dato in input un anno
DROP PROCEDURE IF EXISTS Elenco_Calamita;
DELIMITER $$
CREATE PROCEDURE Elenco_Calamita(IN _anno INT)
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS _CalamitaAnnue 
	(
		Area VARCHAR(50) NOT NULL, 
		Data DATE NOT NULL,
		Orario TIME NOT NULL,
		Nome VARCHAR(50) NOT NULL,
		Gravita INT,
        Intensita INT,
		Epicentro INT,
		PRIMARY KEY(Area, Data, Orario)
	);
    
	TRUNCATE TABLE _CalamitaAnnue;
    
    INSERT INTO _CalamitaAnnue
		SELECT *
        FROM Calamita C
        WHERE YEAR(C.Data) = _anno;
	
    SELECT * 
    FROM _CalamitaAnnue C
    ORDER BY C.Gravita DESC;
END $$
DELIMITER ;

# Operazione che data in input una pianta restituisce in output i vani presenti in quella pianta con i relativi vertici
DROP PROCEDURE IF EXISTS Elenco_Vani_Vertici;
DELIMITER $$
CREATE PROCEDURE Elenco_Vani_Vertici(IN pianta INT)
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS _Elenco
	(
		Vano INT NOT NULL,
        Vertice INT NOT NULL,
		X FLOAT NOT NULL,
		Y FLOAT NOT NULL,
        PRIMARY KEY(Vano, Vertice)
	);
    
	TRUNCATE TABLE _Elenco;
    
    INSERT INTO _Elenco(Vano, Vertice, X, Y)
		SELECT PV.Vano, PV.Vertice, Ve.X, Ve.Y
        FROM PosizionamentoVano PV INNER JOIN Vano Va ON (PV.Vano = Va.Codice_Vano AND PV.Pianta = Va.Pianta)
								   INNER JOIN Vertice Ve ON (PV.Vertice = Ve.Numero_Vertice AND PV.Pianta = Ve.Pianta)
		WHERE PV.Pianta = pianta;
        
	SELECT *
    FROM _Elenco E;
END $$
DELIMITER ;

# Operazione che restituisce in output tutti i materiali stoccati nell'azienda e la quantità stoccata
DROP PROCEDURE IF EXISTS Elenco_Materiali;
DELIMITER $$
CREATE PROCEDURE Elenco_Materiali()
BEGIN
	(SELECT AM.Nome, SUM(AM.QuantitaStoccata) AS QuantitaStoccataTotale
	 FROM AltriMateriali AM
     GROUP BY AM.Nome)
    UNION
    (SELECT I.Nome, SUM(I.QuantitaStoccata) AS QuantitaStoccataTotale
	 FROM Intonaco I
     GROUP BY I.Nome)
    UNION
    (SELECT M.Nome, SUM(M.QuantitaStoccata) AS QuantitaStoccataTotale
	 FROM Mattoni M
     GROUP BY M.Nome)
	UNION
    (SELECT P.Nome, SUM(P.QuantitaStoccata) AS QuantitaStoccataTotale
	 FROM Piastrelle P
     GROUP BY P.Nome)
    UNION
    (SELECT P.Nome, SUM(P.QuantitaStoccata) AS QuantitaStoccataTotale
	 FROM Pietre P
     GROUP BY P.Nome);		
END $$
DELIMITER ;

# Operazione che dato in input un Edificio restituisce in output se è stato costruito, se è in costruzione, o se è in riparazione
DROP PROCEDURE IF EXISTS Status_Edificio;
DELIMITER $$
CREATE PROCEDURE Status_Edificio(IN edificio INT)
BEGIN
	DECLARE status VARCHAR(50) DEFAULT '';
    DECLARE data_inizio, data_fine DATE DEFAULT NULL;
    
    SET data_inizio = (SELECT MAX(PE.DataInizio)
					   FROM ProgettoEdilizio PE
                       WHERE PE.Edificio = edificio);
	
    SET status = (SELECT PE.Tipo
				  FROM ProgettoEdilizio PE
				  WHERE PE.Edificio = edificio
					   AND
                        DataInizio = data_inizio);
                        
	SET data_fine = (SELECT PE.DataFine
					 FROM ProgettoEdilizio PE
					 WHERE DataInizio = data_inizio);
	
    IF
         data_fine IS NOT NULL
    THEN
		SET status = 'Costruito';
    END IF;
    
    SELECT status;
END $$
DELIMITER ;


# Aggiornamento tempo impiegato per Tipologia di Lavoro ogni anno
DROP EVENT IF EXISTS Aggiorna_Tempo_Per_Lavoro;
CREATE EVENT Aggiorna_Tempo_Per_Lavoro
ON SCHEDULE EVERY 1 YEAR
STARTS '2017-12-30 23:50:00'
DO
		UPDATE TipologiaLavoro
        SET TempoStimato = (SELECT FLOOR(AVG(Differenza_Date_Senza_Weekend(L.DataFine, L.DataInizio)))
							FROM Lavoro L
                            WHERE L.TipologiaDiLavoro = Nome
								 AND
                                  YEAR(L.DataFine) = YEAR(CURRENT_DATE()));

# Aggiornamento numero massimo di Lavoratori per Capocantiere ogni anno
DROP EVENT IF EXISTS Aggiorna_Lavoratori_Per_Capocantiere;
CREATE EVENT Aggiorna_Lavoratori_Per_Capocantiere
ON SCHEDULE EVERY 1 YEAR
STARTS '2017-12-31 23:50:00'
DO
	CALL Aggiornamento_Max_N();
    
    
# DATA ANALYTICS

# Consigli di Intervento
DROP PROCEDURE IF EXISTS Consigli_Intervento;
DELIMITER $$
CREATE PROCEDURE Consigli_Intervento(IN edificio INT)
BEGIN
    DECLARE finito INT DEFAULT 0;
	DECLARE stato_tmp INT DEFAULT 0;
    DECLARE sensore INT DEFAULT 0;
    DECLARE tipo VARCHAR(50) DEFAULT '';
    
    DECLARE cursore_sensori CURSOR FOR 
		SELECT S.ID, S.Tipologia
		FROM Edificio E INNER JOIN Pianta P ON P.Edificio = E.ID 
						INNER JOIN Vano V ON V.Pianta = P.Codice 
                        INNER JOIN Sensore S ON S.Vano = V.Codice 
                        INNER JOIN Registrazione R ON (R.ID_Sensore = S.ID AND R.Tipo_Sensore = S.Categoria)
		WHERE E.ID = Edificio 
			 AND
              R.ValoreRegistrato > S.Alert 
			 AND 
              NOT EXISTS (
							SELECT *
							FROM Lavoro L1 INNER JOIN ProgettoEdilizio P1 ON L1.Progetto = P1.Codice_Progetto 
										   INNER JOIN Edificio E1 on E1.ID = P1.Edificio
							WHERE E.ID = E1.ID 
								 AND
                                  L1.DataFine > R.Data 
								 AND 
								(
									(( S.Categoria = 'Accelerometro X' OR S.Categoria = 'Accelerometro Y' OR S.Categoria = 'Accelerometro Z' ) AND
									( L1.TipologiaDiLavoro = 'Ispezione Fondamenta' OR L1.TipologiaDiLavoro = 'Ispezione Chiusura' OR L1.TipologiaDiLavoro = 'Riparazione Fondamenta' OR L1.TipologiaDiLavoro = 'Riparazione Facciata' )) 
                                    OR
									(( S.Categoria = 'Giroscopio X' OR S.Categoria = 'Giroscopio Y' OR S.Categoria = 'Giroscopio Z' ) AND
									( L1.TipologiaDiLavoro = 'Ispezione Fondamenta' OR L1.TipologiaDiLavoro = 'Ispezione Chiusura' OR L1.TipologiaDiLavoro = 'Riparazione Fondamenta' OR L1.TipologiaDiLavoro = 'Riparazione Facciata' OR L1.TipologiaDiLavoro = 'Riparazione Tetto' )) 
                                    OR
									(( S.Categoria = 'Igrometro Interno' ) AND
                                    ( L1.TipologiaDiLavoro = 'Ispezione Umidità di Risalita' OR L1.TipologiaDiLavoro = 'Applicazione Intonaci Deumidificanti' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Idraulico' )) 
                                    OR
									(( S.Categoria = 'Igrometro Esterno' ) AND
                                    ( L1.TipologiaDiLavoro = 'Ispezione Umidità Esterna' OR L1.TipologiaDiLavoro = 'Applicazione Intonaci Deumidificanti' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Idraulico' )) 
									OR
                                    (( S.Categoria = 'Pluviometro' ) AND 
                                    ( L1.TipologiaDiLavoro = 'Ispezione Danni da Alluvione' OR L1.TipologiaDiLavoro = 'Riparazione Apertura' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Elettrico' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Telefonico' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Idraulico')) or
									(( S.Categoria = 'Termostato Interno Caldo' OR S.Categoria = 'Termostato Interno Freddo') AND 
                                    ( L1.TipologiaDiLavoro = 'Ispezione Caldaia' OR L1.TipologiaDiLavoro = 'Riparazione Caldaia' )) 
                                    OR
									(( S.Categoria = 'Termostato Esterno Caldo') AND 
                                    ( L1.TipologiaDiLavoro = 'Ispezione Danni da Calore' OR L1.TipologiaDiLavoro = 'Installazione o Riparazione Aria Condizionata' )) 
                                    OR
                                    (( S.Categoria = 'Termostato Esterno Freddo') AND 
                                    ( L1.TipologiaDiLavoro = 'Ispezione Danni da Calore' OR L1.TipologiaDiLavoro = 'Ispezione Caldaia' OR L1.TipologiaDiLavoro = 'Riparazione Caldaia' )) 
                                    OR
									(( S.Categoria = 'Posizione' ) AND 
                                    ( L1.TipologiaDiLavoro = 'Ispezione Crepa' AND L1.TipologiaDiLavoro  = 'Riparazione Crepa' AND L1.TipologiaDiLavoro = 'Riparazione Muratura' )) 
								)
						   );
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS _Sensori_Sopra_Alert
	(
		ID_Sensore INT,
		Tipo_Sensore VARCHAR(50),	
		Soluzione VARCHAR(50) DEFAULT NULL,
        Numero_Lavoratori_Consigliati INT DEFAULT NULL,
        Materiali_Consigliati VARCHAR(400) DEFAULT NULL,
        Priorita VARCHAR(50),
        Priorita_Int INT
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;

	TRUNCATE TABLE _Sensori_Sopra_Alert;
    
	SET stato_tmp = 
		(
			SELECT E.Stato
			FROM Edificio E
			WHERE E.ID = edificio
		);
	
	IF
		stato_tmp >= 2 
    THEN
		INSERT INTO _Sensori_Sopra_Alert(ID_Sensore, Tipo_Sensore)
			SELECT S.ID, S.Tipologia
			FROM Edificio E INNER JOIN Pianta P ON P.Edificio = E.ID 
							INNER JOIN Vano V ON V.Pianta = P.Codice 
							INNER JOIN Sensore S ON S.Vano = V.Codice 
							INNER JOIN Registrazione R ON (R.ID_Sensore = S.ID AND R.Tipo_Sensore = S.Categoria)
			WHERE E.ID = Edificio 
				 AND
				  R.ValoreRegistrato > S.Alert 
				 AND 
				  NOT EXISTS (
								SELECT *
								FROM Lavoro L1 INNER JOIN ProgettoEdilizio P1 ON L1.Progetto = P1.Codice_Progetto 
											   INNER JOIN Edificio E1 on E1.ID = P1.Edificio
								WHERE E.ID = E1.ID 
									 AND
									  L1.DataFine > R.Data 
									 AND 
									(
										(( S.Categoria = 'Accelerometro X' OR S.Categoria = 'Accelerometro Y' OR S.Categoria = 'Accelerometro Z' ) AND
										( L1.TipologiaDiLavoro = 'Ispezione Fondamenta' OR L1.TipologiaDiLavoro = 'Ispezione Chiusura' OR L1.TipologiaDiLavoro = 'Riparazione Fondamenta' OR L1.TipologiaDiLavoro = 'Riparazione Facciata' )) 
										OR
										(( S.Categoria = 'Giroscopio X' OR S.Categoria = 'Giroscopio Y' OR S.Categoria = 'Giroscopio Z' ) AND
										( L1.TipologiaDiLavoro = 'Ispezione Fondamenta' OR L1.TipologiaDiLavoro = 'Ispezione Chiusura' OR L1.TipologiaDiLavoro = 'Riparazione Fondamenta' OR L1.TipologiaDiLavoro = 'Riparazione Facciata' OR L1.TipologiaDiLavoro = 'Riparazione Tetto' )) 
										OR
										(( S.Categoria = 'Igrometro Interno' ) AND
										( L1.TipologiaDiLavoro = 'Ispezione Umidità di Risalita' OR L1.TipologiaDiLavoro = 'Applicazione Intonaci Deumidificanti' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Idraulico' )) 
										OR
										(( S.Categoria = 'Igrometro Esterno' ) AND
										( L1.TipologiaDiLavoro = 'Ispezione Umidità Esterna' OR L1.TipologiaDiLavoro = 'Applicazione Intonaci Deumidificanti' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Idraulico' )) 
										OR
										(( S.Categoria = 'Pluviometro' ) AND 
										( L1.TipologiaDiLavoro = 'Ispezione Danni da Alluvione' OR L1.TipologiaDiLavoro = 'Riparazione Apertura' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Elettrico' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Telefonico' OR L1.TipologiaDiLavoro = 'Riparazione Impianto Idraulico')) or
										(( S.Categoria = 'Termostato Interno Caldo' OR S.Categoria = 'Termostato Interno Freddo') AND 
										( L1.TipologiaDiLavoro = 'Ispezione Caldaia' OR L1.TipologiaDiLavoro = 'Riparazione Caldaia' )) 
										OR
										(( S.Categoria = 'Termostato Esterno Caldo') AND 
										( L1.TipologiaDiLavoro = 'Ispezione Danni da Calore' OR L1.TipologiaDiLavoro = 'Installazione o Riparazione Aria Condizionata' )) 
										OR
										(( S.Categoria = 'Termostato Esterno Freddo') AND 
										( L1.TipologiaDiLavoro = 'Ispezione Danni da Calore' OR L1.TipologiaDiLavoro = 'Ispezione Caldaia' OR L1.TipologiaDiLavoro = 'Riparazione Caldaia' )) 
										OR
										(( S.Categoria = 'Posizione' ) AND 
										( L1.TipologiaDiLavoro = 'Ispezione Crepa' AND L1.TipologiaDiLavoro  = 'Riparazione Crepa' AND L1.TipologiaDiLavoro = 'Riparazione Muratura' )) 
									)
							   );
    
    UPDATE _Sensori_Sopra_Alert
    SET Tipo_Sensore = 'Accelerometro'
	WHERE Tipo_Sensore = 'Accelerometro X' OR Tipo_Sensore = 'Accelerometro Y' OR Tipo_Sensore = 'Accelerometro Z';
    
    UPDATE _Sensori_Sopra_Alert
    SET Tipo_Sensore = 'Giroscopio'
	WHERE Tipo_Sensore = 'Giroscopio X' OR Tipo_Sensore = 'Giroscopio Y' OR Tipo_Sensore = 'Giroscopio Z';    
    
    DELETE FROM _Sensori_Sopra_Alert
	WHERE ID_Sensore IN (
						 SELECT D.ID_Sensore 
						 FROM (
							   SELECT ID_Sensore, ROW_NUMBER() OVER (PARTITION BY Tipo_Sensore ORDER BY Tipo_Sensore) AS numero_righe
							   FROM _Sensori_Sopra_Alert
                              ) AS D
						 WHERE numero_righe > 1
						);
					
    OPEN cursore_sensori;
    ciclo: LOOP
		FETCH cursore_sensori INTO sensore, tipo;
        CASE
			WHEN
				stato_tmp < 2
			THEN
				UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Non Necessaria' AND Numero_Lavoratori_Consigliati = 0 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Nulla' AND Priorita_Int = 0
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
                
			WHEN 
				(tipo = 'Acceloremetro X' OR tipo = 'Accelerometro Y' OR tipo = 'Accelerometro Z'
				OR
                tipo = 'Giroscopio X' OR tipo = 'Giroscopio Y' OR tipo = 'Giroscopio Z')
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Chiusura' AND Numero_Lavoratori_Consigliati = 3 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Medio-Alta' AND Priorita_Int = 4
				WHERE ID_Sensore = sensore AND Tipo_Sensore = 'Accelerometro';
				
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Fondamenta' AND Numero_Lavoratori_Consigliati = 3 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Medio-Alta' AND Priorita_Int = 4
				WHERE ID_Sensore = sensore AND Tipo_Sensore = 'Giroscopio';
                
			WHEN 
				tipo = 'Igrometro Interno'
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Umidità di Risalita' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Medio-Bassa' AND Priorita_Int = 2
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
                
			WHEN 
				tipo = 'Igrometro Esterno'
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Umidità Esterna' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Bassa' AND Priorita_Int = 1
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
                
			WHEN 
				tipo = 'Pluviometro'
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Danni da Alluvione' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Media' AND Priorita_Int = 3
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
                
			WHEN 
				(tipo = 'Termostato Interno Caldo' OR tipo = 'Termostato Interno Freddo')
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Caldaia' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Media' AND Priorita_Int = 3
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
			
  			WHEN 
				tipo = 'Termostato Esterno Caldo'
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Danni da Calore' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Bassa' AND Priorita_Int = 1
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;      
			
            WHEN 
				tipo = 'Termostato Esterno Freddo'
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Danni da Calore' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Bassa' AND Priorita_Int = 1
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;  
                
                INSERT _Sensori_Sopra_Alert
                VALUES (sensore, tipo, 'Ispezione Danni da Calore', 2, 'Nessuno', 'Bassa', 1); 
            
  			WHEN 
				tipo = 'Posizione'
                AND 
                stato_tmp >= 2
                AND
                stato_tmp < 3
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Ispezione Crepa' AND Numero_Lavoratori_Consigliati = 2 AND Materiali_Consigliati = 'Nessuno' AND Priorita = 'Media' AND Priorita_Int = 3
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;      
			
			WHEN 
				(tipo = 'Acceloremetro X' OR tipo = 'Accelerometro Y' OR tipo = 'Accelerometro Z'
				OR
                tipo= 'Giroscopio X' OR tipo = 'Giroscopio Y' OR tipo = 'Giroscopio Z')
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Riparazione Facciata' AND Numero_Lavoratori_Consigliati = 7 AND Materiali_Consigliati = 'Cemento, Intonaco a Base di Malta e Intonaco Cementizio ' AND Priorita = 'Alta' AND Priorita_Int = 5
				WHERE ID_Sensore = sensore AND Tipo_Sensore = 'Accelerometro';
				
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Riparazione Fondamenta' AND Numero_Lavoratori_Consigliati = 5 AND Materiali_Consigliati = 'Acciaio, Calcestruzzo e Legno' AND Priorita = 'Alta' AND Priorita_Int = 5
				WHERE ID_Sensore = sensore AND Tipo_Sensore = 'Giroscopio';
                
			WHEN 
				tipo = 'Igrometro Interno'
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Applicazione Intonaci Deumidificanti' AND Numero_Lavoratori_Consigliati = 4 AND Materiali_Consigliati = 'Intonaco Deumidificante' AND Priorita = 'Medio-Alta' AND Priorita_Int = 4
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
                
				INSERT INTO _Sensori_Sopra_Alert(ID_Sensore, Tipo_Sensore, Soluzione, Numero_Lavoratori_Consigliati, Materiali_Consigliati, Priorita, Priorita_Int) 
                VALUES (sensore, tipo, 'Riparazione Impianto Idraulico', 4, 'Acciaio, Ferro e Rame', 'Medio-Alta', 4);
                
			WHEN 
				tipo = 'Igrometro Esterno'
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Applicazione Intonaci Deumidificanti' AND Numero_Lavoratori_Consigliati = 4 AND Materiali_Consigliati = 'Intonaco Deumidificante' AND Priorita = 'Medio-Alta' AND Priorita_Int = 4
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
                
                INSERT INTO _Sensori_Sopra_Alert(ID_Sensore, Tipo_Sensore, Soluzione, Numero_Lavoratori_Consigliati, Materiali_Consigliati, Priorita, Priorita_Int)
                VALUES (sensore, tipo, 'Riparazione Impianto Idraulico', 4, 'Acciaio, Ferro e Rame', 'Medio-Alta', 4);
			WHEN 
				tipo = 'Pluviometro'
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Riparazione Apertura' AND Numero_Lavoratori_Consigliati = 5 AND Materiali_Consigliati = 'Acciaio, Ferro, Legno e Vetro' AND Priorita = 'Media' AND Priorita_Int = 3
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
				
                INSERT INTO _Sensori_Sopra_Alert(ID_Sensore, Tipo_Sensore, Soluzione, Numero_Lavoratori_Consigliati, Materiali_Consigliati, Priorita, Priorita_Int)
                VALUES (sensore, tipo, 'Riparazione Impianto Elettrico', 4, 'Oro, Piombo, Rame', 'Medio-Alta', 4), (sensore, tipo, 'Riparazione Impianto Telefonico', 4, 'Oro, Piombo, Rame', 'Medio-Alta', 4), (sensore, tipo, 'Riparazione Impianto Idraulico', 4, 'Acciaio, Ferro e Rame', 'Medio-Alta', 4);
                
			WHEN 
				(tipo = 'Termostato Interno Caldo' OR tipo = 'Termostato Interno Caldo' OR tipo = 'Termostato Esterno Freddo')
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Riparazione Caldaia' AND Numero_Lavoratori_Consigliati = 3 AND Materiali_Consigliati = 'Acciaio e Ferro' AND Priorita = 'Alta' AND Priorita_Int = 5
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;
			
  			WHEN 
				tipo = 'Termostato Esterno Caldo'
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Installazione o Riparazione Aria Condizionata' AND Numero_Lavoratori_Consigliati = 4 AND Materiali_Consigliati = 'Intonaco Deumidificante' AND Priorita = 'Medio-Alta' AND Priorita_Int = 4
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;          
                
  			WHEN 
				tipo = 'Posizione'
                AND 
                stato_tmp >= 3
                AND
                stato_tmp <= 4
            THEN
                UPDATE _Sensori_Sopra_Alert
				SET Soluzione = 'Riparazione Crepa' AND Numero_Lavoratori_Consigliati = 3 AND Materiali_Consigliati = 'Intonaco Cementizio, Intonaco a Base di Gesso, Intonaco Premiscelato, Mattone in Calcestruzzo e Mattone in Terra piena' AND Priorita = 'Alta' AND Priorita_Int = 5
				WHERE ID_Sensore = sensore AND Tipo_Sensore = tipo;    
                
                INSERT INTO _Sensori_Sopra_Alert(ID_Sensore, Tipo_Sensore, Soluzione, Numero_Lavoratori_Consigliati, Materiali_Consigliati, Priorita, Priorita_Int)
                VALUES (sensore, tipo, 'Riparazione Muratura', 7, 'Cemento, Mattone laterzio, Mattone in Terra Piena, Intonaco a Base di Gesso, Intonaco a Base di Calce e Intonaco a Base di Malta', 'Alta', 5);
		END CASE;
        
        IF 
			finito = 1
		THEN 
			LEAVE ciclo;
		END IF;
    END LOOP;
    CLOSE cursore_sensori;
    END IF;
    
    SELECT ID_Sensore, Tipo_Sensore, Soluzione, Numero_Lavoratori_Consigliati, Materiali_Consigliati, Priorita
    FROM _Sensori_Sopra_Alert
    ORDER BY Priorita_Int, ID_Sensore DESC;
END $$
DELIMITER ;

# Stima dei Danni Parte 1
DROP FUNCTION IF EXISTS Simulazione_Calamita_LargaScala;
DELIMITER $$
CREATE FUNCTION Simulazione_Calamità_LargaScala (_TipoCalamita VARCHAR(100), _AreaColpita VARCHAR(100), _Epicentro INT, _Intensità INT)
RETURNS FLOAT DETERMINISTIC
BEGIN
	DECLARE percentuale FLOAT DEFAULT 0;
	DECLARE indice INT DEFAULT 0 ;
    DECLARE coefficiente FLOAT DEFAULT 0;
    
    SET coefficiente = 
    (
		SELECT P.coefficiente
        FROM AreaGeografica A INNER JOIN PericoloGeologico P ON A.ID = P.Area
        WHERE P.Pericolo = _TipoCalamita AND AreaGeografica = _AreaColpita
    ) ;
    
    CASE _TipoCalamita
	WHEN 'Terremoto' THEN SET indice = 12;
    WHEN 'Eruzione vulcanica' THEN SET indice = 12;
	WHEN 'Alluvione' THEN SET indice = 10;
    WHEN 'Tornado' THEN SET indice = 11;
    WHEN 'Ondata di Caldo' THEN SET indice = 8;
    WHEN 'Ondata di Freddo' THEN SET indice = 8;
    WHEN 'Innalzamento umidità' THEN SET indice = 7;
    WHEN 'Incendio' THEN SET indice = 6;
    WHEN 'Gelo' THEN SET indice = 5;
    WHEN 'Valanga' THEN SET indice = 7;
	END CASE;
    
    SET percentuale = indice * _Intensità * coefficiente / _Epicentro ;
    
    IF percentuale > 1 THEN SET percentuale = 1;  END IF ;
    
    RETURN percentuale ;
END $$
DELIMITER ;

# Stima dei Danni Parte 2
DROP PROCEDURE IF EXISTS Simulazione_Calamita
DELIMITER $$
CREATE PROCEDURE Simulazione_Calamita (IN _TipoCalamita VARCHAR(100), IN _EdificioColpito INT, IN _Epicentro INT, IN _Intensità INT)
BEGIN
	DECLARE indice INT DEFAULT 0 ;
    DECLARE percentuale FLOAT DEFAULT 0;
    DECLARE coefficiente FLOAT DEFAULT 0;
    DECLARE area VARCHAR(50) ;
    DECLARE variazione_stato INT DEFAULT 0;
    DECLARE somma_rilevanze INT DEFAULT 0;
    
    CREATE TEMPORARY TABLE IF NOT EXISTS _Sensori_Anomali(
		ID INT PRIMARY KEY,
        Tipo VARCHAR(100) PRIMARY KEY, 
        Rilevanza INT,
        Variazione INT
    ) ENGINE = INNODB DEFAULT CHARSET = LATIN1 ;
    
    SET area =
    (
		SELECT A.ID
        FROM Edificio E INNER JOIN AreaGeografica A ON E.area = A.ID 
        WHERE AreaGeografica = _AreaColpita AND E.ID = _EdificioColpito	
    ) ;
    
    SET coefficiente = 
    (
		SELECT P.coefficiente
        FROM Edificio E INNER JOIN AreaGeografica A ON E.area = A.ID INNER JOIN PericoloGeologico P ON A.ID = P.Area
        WHERE P.Pericolo = _TipoCalamita AND AreaGeografica = _AreaColpita AND E.ID = _EdificioColpito
    ) ;
    
    CASE _TipoCalamita
	WHEN 'Terremoto' THEN SET indice = 12 ;
    WHEN 'Eruzione vulcanica' THEN SET indice = 12;
	WHEN 'Alluvione' THEN SET indice = 10;
    WHEN 'Tornado' THEN SET indice = 11;
    WHEN 'Ondata di Caldo' THEN SET indice = 8;
    WHEN 'Ondata di Freddo' THEN SET indice = 8;
    WHEN 'Innalzamento umidità' THEN SET indice = 7;
    WHEN 'Incendio' THEN SET indice = 6;
    WHEN 'Gelo' THEN SET indice = 6;
    WHEN 'Valanga' THEN SET indice = 7;
	END CASE ;
    
    
    # Guardare quale sensore ti potrebbe misurare la calamità
    
    CASE _TipoCalamita
	WHEN 'Terremoto' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Accelerometro X' OR S.Tipologia = 'Accelerometro Y' OR S.Tipologia = 'Accelerometro Z' OR S.Tipologia = 'Giroscopio X' OR S.Tipologia = 'Giroscopio Y' OR S.Tipologia = 'Giroscopio Z'
    ) ;
    WHEN 'Eruzione vulcanica' THEN INSERT INTO _Sensori_Anomali 
	(
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Termostato Esterno Caldo' OR S.Tipologia = 'Termostato Interno Caldo'
	) ;
	WHEN 'Alluvione' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Pluviometro' OR S.Tipologia = 'Igrometro Esterno'
	) ;
    WHEN 'Tornado' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Accelerometro X' OR S.Tipologia = 'Accelerometro Y' OR S.Tipologia = 'Accelerometro Z' OR S.Tipologia = 'Giroscopio X' OR S.Tipologia = 'Giroscopio Y' OR S.Tipologia = 'Giroscopio Z'
    ) ;
    WHEN 'Ondata di Caldo' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Termostato Esterno Caldo'
    ) ;
    WHEN 'Ondata di Freddo' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Termostato Esterno Freddo'
    ) ;
    WHEN 'Innalzamento Umidità Esterna' THEN INSERT INTO _Sensori_Anomali 
	(
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Igrometro Esterno'
	) ;
    WHEN 'Innalzamento Umidità Interna' THEN INSERT INTO _Sensori_Anomali 
	(
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Igrometro Interno'
	) ;
    WHEN 'Incendio' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Termostato Interno Caldo'
    ) ;
    WHEN 'Gelo' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Termostato Interno Freddo'
    ) ;
    WHEN 'Valanga' THEN INSERT INTO _Sensori_Anomali 
    (
		SELECT S.ID, S.Tipologia
        FROM Edifico E INNER JOIN Pianta P ON E.ID = P.Edificio INNER JOIN Vano V ON V.Pianta = P.CodicePianta INNER JOIN Sensore S ON S.Locazione = V.CodiceVano
        WHERE E.ID = _EdificioColpito AND S.Tipologia = 'Accelerometro X' OR S.Tipologia = 'Accelerometro Y' OR S.Tipologia = 'Accelerometro Z' OR S.Tipologia = 'Giroscopio X' OR S.Tipologia = 'Giroscopio Y' OR S.Tipologia = 'Giroscopio Z'
    ) ;
	END CASE ;
    
    # Indica qual è la possibilità che tale sensore misuri un valore sopra l'allerta
    
    SET percentuale = Simulazione_Calamita_LargaScala (_TipoCalamita, area, _Epicentro, _Intensita); # Percentuale che l'Edificio venga colpito dalla Calamità
    
    # Imposta la variazione di stato in modo classico
    
    UPDATE _Sensori_Anomali S 
    SET rilevanza = 1
    WHERE S.Tipologia = 'Accelerometro X' OR S.Tipologia = 'Accelerometro Y' OR S.Tipologia = 'Accelerometro Z' OR S.Tipologia = 'Giroscopio X' OR S.Tipologia = 'Giroscopio Y' OR S.Tipologia = 'Giroscopio Z';
    
    UPDATE _Sensori_Anomali S 
    SET rilevanza = 1
    WHERE S.Tipologia = 'Igrometro Esterno' OR S.Tipologia = 'Igrometro Interno';
    
    UPDATE _Sensori_Anomali S 
    SET rilevanza = 1.5
    WHERE S.Tipologia = 'Pluviometro';
    
    UPDATE _Sensori_Anomali S 
    SET rilevanza = 2
    WHERE S.Tipologia = 'Termostato Esterno Caldo' OR S.Tipologia = 'Termostato Interno Freddo' OR S.Tipologia = 'Termostato Esterno Caldo' OR S.Tipologia = 'Termostato Interno Freddo';
    
    UPDATE _Sensori_Anomali S
    SET S.Variazione = S.Rilevanza * coefficiente;
    
    SELECT *, percentuale
    FROM _Sensori_Anomali;
END $$
DELIMITER ;


# POPOLAMENTO

INSERT INTO AreaGeografica(ID_Area, Nome, Nazione)
VALUES (001, 'Abruzzo', 'Italia'),
	   (002, 'Basilicata', 'Italia'),
       (003, 'Calabria', 'Italia'),
       (004, 'Campania', 'Italia'),
       (005, 'Emilia Romagna', 'Italia'),
       (006, 'Friuli-Venezia-Giulia', 'Italia'),
       (007, 'Lazio', 'Italia'),
       (008, 'Liguria', 'Italia'),
       (009, 'Lombardia', 'Italia'),
       (010, 'Marche', 'Italia'),
       (011, 'Molise', 'Italia'),
       (012, 'Piemonte', 'Italia'),
       (013, 'Puglia', 'Italia'),
       (014, 'Sardegna', 'Italia'),
       (015, 'Sicilia', 'Italia'),
       (016, 'Toscana', 'Italia'),
       (017, 'Trentino-Alto Adige', 'Italia'),
       (018, 'Umbria', 'Italia'),
       (019, 'Val di Aosta', 'Italia'),
       (020, 'Veneto', 'Italia');
       
       
INSERT INTO PericoloGeologico(Area, Pericolo, CoefficienteRischio)
VALUES (001, 'Allargamento Crepa', 0.1),
	   (001, 'Incendio', 0.2),
	   (001, 'Inondazione', 0.1),
       (001, 'Terremoto', 0.8),
	   (002, 'Allargamento Crepa', 0.1),
       (002, 'Alluvione', 0.1),
       (002, 'Incendio', 0.2),
       (002, 'Frana', 0.3),
       (002, 'Ondata di Caldo', 0.3),
       (002, 'Terremoto', 0.3),
       (003, 'Allargamento Crepa', 0.1),
       (003, 'Incendio', 0.4),
       (003, 'Inondazione', 0.4),
       (003, 'Ondata di Caldo', 0.5),
       (003, 'Terremoto', 0.5),
       (003, 'Tornado', 0.1),
       (004, 'Allargamento Crepa', 0.1),
       (004, 'Alluvione', 0.4),
       (004, 'Eruzione Vulcanica', 0.3),
       (004, 'Frana', 0.6),
       (004, 'Incendio', 0.6),
       (004, 'Inondazione', 0.4),
       (004, 'Terremoto', 0.5),
       (004, 'Tornado', 0.1),
       (005, 'Allargamento Crepa', 0.1),
       (005, 'Ciclone', 0.6),
	   (005, 'Innalzamento Umidità Esterna', 0.6),
       (005, 'Innalzamento Umidità Interna', 0.6),
       (005, 'Incendio', 0.2),
       (005, 'Terremoto', 0.1),
       (005, 'Tornado', 0.5),
       (006, 'Allargamento Crepa', 0.1),
       (006, 'Alluvione', 0.3),
       (006, 'Ciclone', 0.5),
       (006, 'Gelo', 0.2),
       (006, 'Incendio', 0.2),
       (006, 'Inondazione', 0.2),
       (006, 'Ondata di Freddo', 0.2),
       (006, 'Terremoto', 0.1),
       (006, 'Tornado', 0.6),
       (007, 'Allargamento Crepa', 0.1),
       (007, 'Ciclone', 0.2),
       (007, 'Eruzione Vulcanica', 0.1),
       (007, 'Incendio', 0.2),
       (007, 'Innalzamento Umidità Esterna', 0.4),
       (007, 'Innalzamento Umidità Interna', 0.4),
       (007, 'Inondazione', 0.3),
       (007, 'Terremoto', 0.3),
       (007, 'Tornado', 0.1),
       (008, 'Allargamento Crepa', 0.1),
       (008, 'Alluvione', 0.6),
       (008, 'Incendio', 0.2),
       (008, 'Inondazione', 0.4),
       (008, 'Terremoto', 0.2),
       (008, 'Tornado', 0.1),
       (009, 'Allargamento Crepa', 0.1),
       (009, 'Alluvione', 0.2),
       (009, 'Ciclone', 0.4),
       (009, 'Gelo', 0.2),
       (009, 'Incendio', 0.2),
       (009, 'Innalzamento Umidità Esterna', 0.3),
       (009, 'Innalzamento Umidità Interna', 0.3),
       (009, 'Ondata di Freddo', 0.2),
       (009, 'Terremoto', 0.1),
       (009, 'Tornado', 0.4),
       (009, 'Valanga', 0.3),
       (010, 'Allargamento Crepa', 0.1),
       (010, 'Alluvione', 0.2),
       (010, 'Incendio', 0.2),
       (010, 'Terremoto', 0.8),
       (011, 'Allargamento Crepa', 0.1),
       (011, 'Alluvione', 0.1),
       (011, 'Incendio', 0.2),
       (011, 'Inondazione', 0.1),
       (011, 'Frana', 0.1),
       (011, 'Ondata di Caldo', 0.1),
       (011, 'Terremoto', 0.1),
       (012, 'Allargamento Crepa', 0.1),
       (012, 'Alluvione', 0.7),
       (012, 'Ciclone', 0.3),
       (012, 'Gelo', 0.4),
       (012, 'Incendio', 0.2),
       (012, 'Ondata di Freddo', 0.5),
       (012, 'Tornado', 0.3),
       (012, 'Valanga', 0.3),
       (013, 'Allargamento Crepa', 0.1),
       (013, 'Ciclone', 0.7),
       (013, 'Incendio', 0.5),
       (013, 'Innalzamento Umidità Esterna', 0.1),
       (013, 'Innalzamento Umidità Interna', 0.1),
       (013, 'Inondazione', 0.4),
       (013, 'Ondata di Caldo', 0.5),
       (013, 'Tornado', 0.7),
       (013, 'Terremoto', 0.2),
       (014, 'Allargamento Crepa', 0.1),
       (014, 'Frana', 0.2),
       (014, 'Incendio', 0.2),
       (014, 'Innalzamento Umidità Esterna', 0.1),
       (014, 'Innalzamento Umidità Interna', 0.1),
       (014, 'Inondazione', 0.5),
       (014, 'Ondata di Caldo', 0.3),
       (015, 'Allargamento Crepa', 0.1),
       (015, 'Alluvione', 0.1),
       (015, 'Ciclone', 0.1),
       (015, 'Eruzione Vulcanica', 0.8),
       (015, 'Frana', 0.1),
       (015, 'Incendio', 0.5),
       (015, 'Innalzamento Umidità Esterna', 0.2),
       (015, 'Innalzamento Umidità Interna', 0.2),
       (015, 'Inondazione', 0.4),
       (015, 'Ondata di Caldo', 0.6),
       (015, 'Terremoto', 0.4),
       (015, 'Tornado', 0.1),
       (016, 'Allargamento Crepa', 0.1),
       (016, 'Alluvione', 0.6),
       (016, 'Frana', 0.3),
       (016, 'Gelo', 0.1),
       (016, 'Incendio', 0.2),
       (016, 'Innalzamento Umidità Esterna', 0.7),
       (016, 'Innalzamento Umidità Interna', 0.7),
       (016, 'Inondazione', 0.2),
       (016, 'Terremoto', 0.3),
       (016, 'Valanga', 0.2),
       (017, 'Allargamento Crepa', 0.1),
       (017, 'Alluvione', 0.1),
       (017, 'Frana', 0.6),
       (017, 'Gelo', 0.5),
       (017, 'Incendio', 0.2),
       (017, 'Ondata di Freddo', 0.7),
       (017, 'Tornado', 0.1),
       (017, 'Valanga', 0.5),
       (018, 'Allargamento Crepa', 0.1),
       (018, 'Frana', 0.1),
       (018, 'Gelo', 0.1),
       (018, 'Incendio', 0.2),
       (018, 'Terremoto', 0.4),
       (018, 'Valanga', 0.1),
       (019, 'Allargamento Crepa', 0.1),
       (019, 'Frana', 0.7),
	   (019, 'Gelo', 0.5),
       (019, 'Incendio', 0.2),
       (019, 'Ondata di Freddo', 0.7),
       (019, 'Valanga', 0.7),
       (020, 'Allargamento Crepa', 0.1),
       (020, 'Alluvione', 0.8),
       (020, 'Ciclone', 0.6),
       (020, 'Incendio', 0.2),
       (020, 'Innalzamento Umidità Esterna', 0.2),
       (020, 'Innalzamento Umidità Interna', 0.2),
       (020, 'Inondazione', 0.8),
       (020, 'Terremoto', 0.2),
       (020, 'Tornado', 0.6);


INSERT INTO Edificio(Stato, Tipologia, Locazione)
VALUES (1, 'Abitazione', 016),
	   (1, 'Appartamenti', 016),
	   (2.2, 'Abitazione', 020),
	   (1, 'Negozio', 005),
	   (1, 'Abitazione', 016);
       
/*INSERT INTO Pianta(Edificio, PuntiPerimetro, NumeroPiano)
VALUES (001, 13, 0),
	   (002, 4, 0),
       (002, 4, 1),
       (002, 4, 2),
       (002, 4, 3);*/

INSERT INTO ProgettoEdilizio(Tipo, DataApprovazione, DataInizio, StimaFine, DataFine, Edificio)
VALUES ('Costruzione', '2017-01-01', '2017-04-04', '2018-04-04', '2018-05-01', 001), 
       ('Costruzione', '2018-03-15', '2018-07-16', '2019-08-28', '2019-09-30', 002),
       ('Costruzione', '2019-02-04', '2019-05-19', '2020-06-08', '2020-06-30', 003),
       ('Riparazione', '2019-03-06', '2019-04-06', '2019-05-08', '2019-05-14', 001),
       ('Riparazione', '2019-03-10', '2019-04-10', '2019-05-12', '2019-05-12', 002),
       ('Costruzione', '2020-07-17', '2020-10-11', '2021-12-13', '2022-02-24', 004),
       ('Costruzione', '2021-04-04', '2021-08-06', '2023-02-04', NULL, 005);
       
       
INSERT INTO StadioDiAvanzamento(Numero, Progetto, DataInizio, StimaFine, DataFine, Tipologia, CostoPreventivato)
VALUES (1, 001, '2017-04-04', '2017-04-22', '2017-04-25', 'Fondamenta', 7000),
	   (2, 001, '2017-05-02', '2017-07-07', '2017-07-19', 'Intelaiatura', 20000),
       (3, 001, '2017-07-25', '2017-08-31', '2017-09-04', 'Chiusura', 9000),
       (4, 001, '2017-09-11', '2017-10-18', '2017-10-23', 'Fissaggio', 6500),
       (5, 001, '2017-11-02', '2017-12-04', '2017-12-04', 'Adattamento', 4850),
       (6, 001, '2017-12-11', '2018-04-04', '2018-05-01', 'Rifinitura', 500),
       (1, 002, '2018-07-16', '2018-08-08', '2018-08-08', 'Fondamenta', 15000),
	   (2, 002, '2018-08-15', '2018-11-12', '2018-11-20', 'Intelaiatura', 30000),
       (3, 002, '2018-11-26', '2019-01-15', '2019-01-21', 'Chiusura', 17100),
       (4, 002, '2019-03-11', '2019-05-01', '2019-05-17', 'Fissaggio', 6200),
       (5, 002, '2019-05-27', '2019-06-04', '2019-06-24', 'Adattamento', 8600),
       (6, 002, '2019-07-01', '2019-08-28', '2019-09-30', 'Rifinitura', 250),
       (1, 003, '2019-05-19', '2019-06-10', '2019-06-17', 'Fondamenta', 6200),
	   (2, 003, '2019-06-24', '2019-09-15', '2019-09-25', 'Intelaiatura', 38400),
       (3, 003, '2019-10-01', '2019-11-20', '2019-11-29', 'Chiusura', 6700),
       (4, 003, '2019-12-02', '2020-02-20', '2020-03-03', 'Fissaggio', 12900),
       (5, 003, '2020-03-11', '2020-04-19', '2020-04-21', 'Adattamento', 8200),
       (6, 003, '2020-04-27', '2020-06-08', '2020-06-30', 'Rifinitura', 800),
       (1, 004, '2019-04-06', '2019-04-15', '2019-04-15', 'Riparazione Servizi', 280),
       (2, 004, '2019-04-16', '2019-04-29', '2019-04-30', 'Riparazione Sistema Antisismico', 1200),
       (3, 004, '2019-05-03', '2019-05-10', '2019-05-10', 'Riparazione Pavimentazione', 800),
       (4, 004, '2019-05-11', '2019-05-14', '2019-05-14', 'Riparazione Caldaia', 70),
       (1, 005, '2019-04-10', '2019-05-12', '2019-05-12', 'Riparazione Facciata', 10000),
       (1, 006, '2020-10-12', '2020-11-09', '2020-11-09', 'Fondamenta', 8700),
	   (2, 006, '2020-11-11', '2020-11-20', '2020-11-24', 'Riparazione Stadio di Avanzamento 1', 900),
       (3, 006, '2020-11-30', '2021-02-04', '2021-02-08', 'Intelaiatura', 21000),
       (4, 006, '2021-02-11', '2021-03-31', '2021-04-04', 'Chiusura', 10100),
       (5, 006, '2021-04-26', '2021-07-16', '2021-08-02', 'Fissaggio', 8300),
       (6, 006, '2021-08-23', '2021-09-25', '2021-09-25', 'Riparazione Stadio di Avanzamento 2', 1400),
       (7, 006, '2021-10-14', '2021-11-30', '2021-12-13', 'Adattamento', 7200),
       (8, 006, '2022-01-12', '2022-02-24', '2022-03-08', 'Rifinitura', 700),
	   (1, 007, '2021-08-06', '2021-09-03', '2021-09-03', 'Fondamenta', 9700),
       (2, 007, '2021-09-09', '2021-12-19', '2021-12-18', 'Intelaiatura', 39900),
       (3, 007, '2022-01-10', '2022-03-03', '2022-03-09', 'Chiusura', 18500),
	   (4, 007, '2022-04-04', '2022-04-22', '2022-04-22', 'Riparazione Stadio di Avanzamento', 100),
       (5, 007, '2022-05-02', '2022-06-28', '2022-07-04', 'Fissaggio', 13900),
       (6, 007, '2022-07-25', '2022-11-21', NULL, 'Adattamento', 640);
	

INSERT INTO TipologiaLavoro(Nome, NumeroMinimoLavoratori, NumeroMassimoLavoratori, TempoStimato) 
VALUES ('Scavo', 3, 15, 5), # Fondamenta
       ('Posizionamento Barre di Rinforzo', 3, 10, 1), #(Opzionale)
       ('Costruzione Fondamenta', 5, 15, 14),
       ('Ispezione Fondamenta', 2, 4, 1),
       ('Costruzione Intelaiatura', 5, 15, 60), # Intelaiatura 20
       ('Costruzione Sistema Antisismico', 5, 30, 14),
       ('Ispezione Intelaiatura', 2, 4, 1),
       ('Costruzione Pareti Esterne', 5, 30, 15), # Chiusura
       ('Costruzione Tetti', 5, 30, 15),
       ('Costruzione Grondaie', 3, 10, 3),
       ('Ispezione Chiusura', 2, 4, 1),
       ('Costruzione Pareti Interne', 5, 30, 10), # Fissaggio
       ('Installazione Tubature del Gas', 3, 10, 7),
       ('Installazione Cablaggio Elettrico', 3, 10, 7), 
       ('Installazione Cablaggio Telefonico', 3, 10, 7), 
       ('Installazione Tubature Idrauliche', 3, 10, 7),
       ('Pavimentazione', 5, 15, 7),
       ('Costruzione Caldaia', 5, 10, 3),
       ('Costruzione Camino', 3, 10, 1), #(Opzionale)
       ('Ispezione Fissaggio', 2, 4, 1),
       ('Costruzione e Definizione Stanze', 5, 15, 5), # Adattamento
       ('Pittura Pareti', 5, 10, 3),
       ('Aggiunta Aperture', 5, 10, 4),
	   ('Aggiunta Mobilio', 3, 10, 3),
       ('Lavori di Falegnameria', 3, 10, 2), #(Opzionale)
       ('Installazione Riscaldamento', 3, 10, 4),
       ('Ispezione Adattamento', 2, 4, 1),
       ('Pulizia', 3, 10, 1), # Rifinitura
       ('Lavori di Giardinaggio', 3, 10, 2), #(Opzionale)
       ('Installazione Casetta da Giardino', 3, 10, 1), #(Opzionale)
       ('Installazione Vialetto', 3, 10, 2), #(Opzionale)
       ('Decorazione', 3, 10, 3),
       ('Installazione Antenna Parabolica', 5, 10, 3), 
       ('Attivazione Servizi', 2, 10, 25),
       ('Riparazione Stadio di Avanzamento', 5, 30, 5), #(Opzionale)
       ('Ispezione Finale', 2, 4, 7),
       ('Riparazione Sistema Antisismico', 5, 15, 14), # Riparazione 
       ('Riparazione Fondamenta', 5, 15, 14),
       ('Riparazione Crepa', 3, 10, 3),
       ('Riparazione Muratura', 3, 10, 7),
       ('Riparazione Apertura', 2, 10, 3),
       ('Riparazione Mobilio', 2, 10, 3),
       ('Riparazione Pavimento', 3, 10, 3),
       ('Riparazione Tetto', 5, 15, 7),
       ('Riparazione Grondaie', 3, 10, 3),
       ('Riparazione Riscaldamento', 3, 10, 3),
       ('Riparazione Impianto Elettrico', 3, 10, 3),
       ('Riparazione Impianto Telefonico', 3, 10, 3),
       ('Riparazione Impianto Idraulico', 3, 10, 3),
       ('Riparazione Caldaia', 3, 10, 3),
       ('Riparazione Casetta da Giardino', 3, 10, 3),
       ('Applicazione Intonaci Deumidificanti', 3, 10, 3),
       ('Installazione o Riparazione Aria Condizionata', 3, 10, 1),
       ('Riparazione Facciata', 5, 30, 30),
       ('Ispezione Caldaia', 2, 4, 1), # Ispezioni per Riparazioni
       ('Ispezione Crepa', 2, 4, 1),
       ('Ispezione Umidità di Risalita', 2, 4, 1),
       ('Ispezione Umidità Esterna', 2, 4, 1),
       ('Ispezione Danni da Alluvione', 2, 4, 1),
       ('Ispezione Danni da Calore', 2, 4, 1);
       
      
INSERT INTO Lavoro(DataInizio, DataFine, StadioDiAvanzamento, Progetto, TipologiaDiLavoro)
VALUES # Costruzione Edificio 001
	   ('2017-04-04', '2017-04-08', 1, 001, 'Scavo'),
	   ('2017-04-10', '2017-04-10', 1, 001, 'Posizionamento Barre di Rinforzo'),
       ('2017-04-11', '2017-04-24', 1, 001, 'Costruzione Fondamenta'),
       ('2017-04-25', '2017-04-25', 1, 001, 'Ispezione Fondamenta'),
       ('2017-05-02', '2017-07-03', 2, 001, 'Costruzione Intelaiatura'),
       ('2017-07-03', '2017-07-17', 2, 001, 'Costruzione Sistema Antisismico'),
       ('2017-07-18', '2017-07-19', 2, 001, 'Ispezione Intelaiatura'),
       ('2017-07-26', '2017-08-10', 3, 001, 'Costruzione Pareti Esterne'),
       ('2017-08-11', '2017-08-26', 3, 001, 'Costruzione Tetti'),
       ('2017-08-28', '2017-08-31', 3, 001, 'Costruzione Grondaie'),
       ('2017-09-04', '2017-09-04', 3, 001, 'Ispezione Chiusura'),
       ('2017-09-11', '2017-09-21', 4, 001, 'Costruzione Pareti Interne'),
       ('2017-09-22', '2017-09-29', 4, 001, 'Installazione Tubature del Gas'),
       ('2017-09-25', '2017-10-02', 4, 001, 'Installazione Cablaggio Elettrico'),
       ('2017-09-28', '2017-10-05', 4, 001, 'Installazione Cablaggio Telefonico'),
       ('2017-10-02', '2017-10-09', 4, 001, 'Installazione Tubature Idrauliche'),
       ('2017-10-10', '2017-10-17', 4, 001, 'Pavimentazione'),
       ('2017-10-18', '2017-10-21', 4, 001, 'Costruzione Caldaia'),
       ('2017-10-23', '2017-10-23', 4, 001, 'Ispezione Fissaggio'),
       ('2017-11-02', '2017-11-06', 5, 001, 'Costruzione e Definizione Stanze'),
       ('2017-11-09', '2017-11-11', 5, 001, 'Pittura Pareti'),
       ('2017-11-12', '2017-11-16', 5, 001, 'Aggiunta Aperture'),
       ('2017-11-20', '2017-11-22', 5, 001, 'Aggiunta Mobilio'),
       ('2017-11-23', '2017-11-25', 5, 001, 'Lavori di Falegnameria'),
       ('2017-11-27', '2017-12-01', 5, 001, 'Installazione Riscaldamento'),
       ('2017-12-04', '2017-12-04', 5, 001, 'Ispezione Adattamento'),
       ('2017-12-11', '2017-12-11', 6, 001, 'Pulizia'),
       ('2017-12-12', '2017-12-13', 6, 001, 'Lavori di Giardinaggio'),
       ('2017-12-15', '2017-12-16', 6, 001, 'Installazione Casetta da Giardino'),
       ('2018-01-09', '2018-01-11', 6, 001, 'Installazione Vialetto'),
       ('2018-01-17', '2018-01-20', 6, 001, 'Decorazione'),
       ('2018-01-22', '2018-01-24', 6, 001, 'Installazione Antenna Parabolica'),
       ('2018-02-04', '2018-03-03', 6, 001, 'Riparazione Stadio di Avanzamento'),
       ('2018-03-12', '2018-04-05', 6, 001, 'Attivazione Servizi'),
       ('2018-04-24', '2018-05-01', 6, 001, 'Ispezione Finale'),
       # Costruzione Edificio 002
	   ('2018-07-16', '2018-07-19', 1, 002, 'Scavo'),
       ('2018-07-20', '2018-07-20', 1, 002, 'Posizionamento Barre di Rinforzo'),
       ('2018-07-23', '2018-08-06', 1, 002, 'Costruzione Fondamenta'), 
       ('2018-08-08', '2018-08-08', 1, 002, 'Ispezione Fondamenta'),
       ('2018-08-15', '2018-10-26', 2, 002, 'Costruzione Intelaiatura'),
       ('2018-10-29', '2018-11-16', 2, 002, 'Costruzione Sistema Antisismico'),
       ('2018-11-20', '2018-11-20', 2, 002, 'Ispezione Intelaiatura'),
       ('2018-11-26', '2018-12-14', 3, 002, 'Costruzione Pareti Esterne'),
       ('2018-12-17', '2019-01-14', 3, 002, 'Costruzione Tetti'), 
       ('2019-01-16', '2019-01-18', 3, 002, 'Costruzione Grondaie'),
       ('2019-01-21', '2019-01-21', 3, 002, 'Ispezione Chiusura'),
       ('2019-03-11', '2019-03-22', 4, 002, 'Costruzione Pareti Interne'),
       ('2019-03-25', '2019-03-29', 4, 002, 'Installazione Tubature del Gas'),
       ('2019-04-01', '2019-04-05', 4, 002, 'Installazione Cablaggio Elettrico'),
       ('2019-04-08', '2019-04-12', 4, 002, 'Installazione Cablaggio Telefonico'),
       ('2019-04-15', '2019-04-19', 4, 002, 'Installazione Tubature Idrauliche'),
       ('2019-04-22', '2019-04-30', 4, 002, 'Pavimentazione'),
	   ('2019-05-06', '2019-05-08', 4, 002, 'Costruzione Camino'),
       ('2019-05-09', '2019-05-13', 4, 002, 'Costruzione Caldaia'),
       ('2019-05-17', '2019-05-17', 4, 002, 'Ispezione Fissaggio'),
       ('2019-05-27', '2019-05-31', 5, 002, 'Costruzione e Definizione Stanze'),
       ('2019-06-03', '2019-06-05', 5, 002, 'Pittura Pareti'),
       ('2019-06-10', '2019-06-14', 5, 002, 'Aggiunta Aperture'),
       ('2019-06-17', '2019-06-19', 5, 002, 'Aggiunta Mobilio'),
       ('2019-06-18', '2019-06-21', 5, 002, 'Installazione Riscaldamento'),
	   ('2019-06-20', '2019-06-21', 5, 002, 'Lavori di Falegnameria'),
       ('2019-06-24', '2019-06-24', 5, 002, 'Ispezione Adattamento'),
       ('2019-07-01', '2019-07-01', 6, 002, 'Pulizia'),
       ('2019-07-08', '2019-07-12', 6, 002, 'Decorazione'),
       ('2019-07-26', '2019-07-30', 6, 002, 'Installazione Antenna Parabolica'),
       ('2019-08-09', '2019-09-16', 6, 002, 'Attivazione Servizi'),
       ('2019-09-23', '2019-09-30', 6, 002, 'Ispezione Finale'),
       # Costruzione Edificio 003
       ('2019-05-19', '2019-05-22', 1, 003, 'Scavo'), 
       ('2019-05-22', '2019-05-22', 1, 003, 'Posizionamento Barre di Rinforzo'),
       ('2019-05-25', '2019-06-11', 1, 003, 'Costruzione Fondamenta'),
       ('2019-06-17', '2019-06-17', 1, 003, 'Ispezione Fondamenta'),
       ('2019-06-24', '2019-08-28', 2, 003, 'Costruzione Intelaiatura'),
       ('2019-09-03', '2019-09-20', 2, 003, 'Costruzione Sistema Antisismico'),
       ('2019-09-25', '2019-09-25', 2, 003, 'Ispezione Intelaiatura'),
       ('2019-10-01', '2019-10-22', 3, 003, 'Costruzione Pareti Esterne'),
       ('2019-10-28', '2019-11-15', 3, 003, 'Costruzione Tetti'),
       ('2019-11-15', '2019-11-19', 3, 003, 'Costruzione Grondaie'),
       ('2019-11-22', '2019-11-22', 3, 003, 'Ispezione Chiusura'),
       ('2019-11-25', '2019-11-27', 3, 003, 'Riparazione Stadio di Avanzamento'),
       ('2019-11-29', '2019-11-29', 3, 003, 'Ispezione Chiusura'),
       ('2019-12-02', '2019-12-18', 4, 003, 'Costruzione Pareti Interne'),
	   ('2020-01-08', '2020-01-17', 4, 003, 'Installazione Cablaggio Elettrico'),
       ('2020-01-10', '2020-01-19', 4, 003, 'Installazione Cablaggio Telefonico'),
       ('2020-01-21', '2020-01-25', 4, 003, 'Installazione Tubature del Gas'),
       ('2020-01-28', '2020-02-04', 4, 003, 'Installazione Tubature Idrauliche'),
       ('2020-02-04', '2020-02-13', 4, 003, 'Pavimentazione'),
       ('2020-02-12', '2020-02-15', 4, 003, 'Costruzione Caldaia'),
       ('2020-02-21', '2020-02-21', 4, 003, 'Ispezione Fissaggio'),
       ('2020-02-25', '2020-03-01', 4, 003, 'Riparazione Stadio di Avanzamento'),
       ('2020-03-03', '2020-03-03', 4, 003, 'Ispezione Fissaggio'),
       ('2020-03-11', '2020-03-17', 5, 003, 'Costruzione e Definizione Stanze'),
       ('2020-03-18', '2020-03-20', 5, 003, 'Pittura Pareti'),
       ('2020-03-23', '2020-03-26', 5, 003, 'Aggiunta Aperture'),
       ('2020-04-06', '2020-04-09', 5, 003, 'Aggiunta Mobilio'),
       ('2020-04-14', '2020-04-17', 5, 003, 'Installazione Riscaldamento'),
       ('2020-04-21', '2020-04-21', 5, 003, 'Ispezione Adattamento'),
       ('2020-04-27', '2020-04-27', 6, 003, 'Pulizia'),
       ('2020-05-04', '2020-05-06', 6, 003, 'Decorazione'),
       ('2020-05-07', '2020-05-09', 6, 003, 'Installazione Antenna Parabolica'),
       ('2020-05-18', '2020-06-19', 6, 003, 'Attivazione Servizi'),
       ('2020-06-22', '2020-06-30', 6, 003, 'Ispezione Finale'),
       # Riparazione 1 Edificio 004
       ('2019-04-06', '2019-04-15', 1, 004, 'Riparazione Impianto Elettrico'),
       ('2019-04-06', '2019-04-15', 1, 004, 'Riparazione Impianto Telefonico'),
       ('2019-04-06', '2019-04-15', 1, 004, 'Riparazione Impianto Idraulico'),
       ('2019-04-06', '2019-04-15', 1, 004, 'Riparazione Riscaldamento'),
       ('2019-04-16', '2019-04-30', 2, 004, 'Riparazione Sistema Antisismico'),
       ('2019-05-03', '2019-05-03', 3, 004, 'Riparazione Pavimento'),
       ('2019-05-11', '2019-05-13', 4, 004, 'Riparazione Caldaia'),
       ('2019-05-14', '2019-05-14', 4, 004, 'Ispezione Caldaia'),
	   # Riparazione 1 Edificio 002
       ('2019-04-10', '2019-05-11', 1, 005, 'Riparazione Facciata'),
       ('2019-04-12', '2019-05-12', 1, 005, 'Ispezione Finale'),
       # Costruzione Edificio 004
       ('2020-10-12', '2020-10-15', 1, 006, 'Scavo'),
       ('2020-10-16', '2020-10-16', 1, 006, 'Posizionamento Barre di Rinforzo'),
       ('2020-10-19', '2020-11-05', 1, 006, 'Costruzione Fondamenta'),
       ('2020-11-09', '2020-11-09', 1, 006, 'Ispezione Fondamenta'),
       ('2020-11-11', '2020-11-20', 2, 006, 'Riparazione Stadio di Avanzamento'),
       ('2020-11-24', '2020-11-24', 2, 006, 'Ispezione Fondamenta'),
       ('2020-11-30', '2021-01-15', 3, 006, 'Costruzione Intelaiatura'),
       ('2021-01-18', '2021-02-04', 3, 006, 'Costruzione Sistema Antisismico'),
       ('2021-02-08', '2021-02-08', 3, 006, 'Ispezione Intelaiatura'),
       ('2021-02-11', '2021-03-03', 4, 006, 'Costruzione Pareti Esterne'),
       ('2021-03-05', '2021-03-25', 4, 006, 'Costruzione Tetti'),
       ('2021-03-29', '2021-03-31', 4, 006, 'Costruzione Grondaie'),
       ('2021-04-04', '2021-04-04', 4, 006, 'Ispezione Chiusura'),
       ('2021-04-26', '2021-05-07', 5, 006, 'Costruzione Pareti Interne'),
       ('2021-05-10', '2021-05-18', 5, 006, 'Installazione Tubature del Gas'),
       ('2021-05-19', '2021-05-27', 5, 006, 'Installazione Cablaggio Elettrico'),
       ('2021-05-31', '2021-06-08', 5, 006, 'Installazione Cablaggio Telefonico'),
       ('2021-06-10', '2021-06-18', 5, 006, 'Installazione Tubature Idrauliche'),
       ('2021-06-28', '2021-07-06', 5, 006, 'Pavimentazione'),
       ('2021-07-14', '2021-07-16', 5, 006, 'Costruzione Caldaia'),
       ('2021-07-23', '2021-07-23', 5, 006, 'Costruzione Camino'),
       ('2021-08-02', '2021-08-02', 5, 006, 'Ispezione Fissaggio'),
       ('2021-08-23', '2021-09-23', 6, 006, 'Riparazione Stadio di Avanzamento'), 
       ('2021-09-25', '2021-09-25', 6, 006, 'Ispezione Fissaggio'),
       ('2021-10-14', '2021-10-20', 7, 006, 'Costruzione e Definizione Stanze'),
       ('2021-10-25', '2021-10-27', 7, 006, 'Pittura Pareti'),
       ('2021-11-01', '2021-11-04', 7, 006, 'Aggiunta Aperture'),
       ('2021-11-16', '2021-11-18', 7, 006, 'Aggiunta Mobilio'),
       ('2021-11-24', '2021-11-29', 7, 006, 'Installazione Riscaldamento'),
       ('2021-12-13', '2021-12-13', 7, 006, 'Ispezione Adattamento'),
       ('2022-01-12', '2022-01-12', 8, 006, 'Pulizia'),
       ('2022-01-17', '2022-01-19', 8, 006, 'Decorazione'),
       ('2022-01-19', '2022-01-21', 8, 006, 'Installazione Antenna Parabolica'),
       ('2022-01-24', '2022-02-25', 8, 006, 'Attivazione Servizi'),
       ('2022-02-28', '2022-03-08', 8, 006, 'Ispezione Finale'),
       # Costruzione Edificio 005
	   ('2021-08-06', '2021-08-11', 1, 007, 'Scavo'),
       ('2021-08-12', '2021-08-31', 1, 007, 'Costruzione Fondamenta'),
       ('2021-09-03', '2021-09-03', 1, 007, 'Ispezione Fondamenta'),
       ('2021-09-09', '2021-11-25', 2, 007, 'Costruzione Intelaiatura'),
       ('2021-11-29', '2021-12-16', 2, 007, 'Costruzione Sistema Antisismico'),
       ('2021-12-18', '2021-12-18', 2, 007, 'Ispezione Intelaiatura'),
       ('2022-01-10', '2022-01-28', 3, 007, 'Costruzione Pareti Esterne'),
       ('2022-01-31', '2022-02-18', 3, 007, 'Costruzione Tetti'),
       ('2022-02-28', '2022-03-02', 3, 007, 'Costruzione Grondaie'),
       ('2022-03-09', '2022-03-09', 3, 007, 'Ispezione Chiusura'),
       ('2022-04-04', '2022-04-21', 4, 007, 'Riparazione Stadio di Avanzamento'),
       ('2022-04-22', '2022-04-22', 4, 007, 'Ispezione Chiusura'),
       ('2022-05-02', '2022-05-13', 5, 007, 'Costruzione Pareti Interne'),
       ('2022-05-19', '2022-05-25', 5, 007, 'Installazione Tubature del Gas'),
       ('2022-05-20', '2022-05-26', 5, 007, 'Installazione Cablaggio Elettrico'),
       ('2022-05-25', '2022-06-02', 5, 007, 'Installazione Cablaggio Telefonico'),
       ('2022-06-01', '2022-06-09', 5, 007, 'Installazione Tubature Idrauliche'),
       ('2022-06-14', '2022-06-23', 5, 007, 'Pavimentazione'),
       ('2022-07-01', '2022-07-01', 5, 007, 'Costruzione Caldaia'),
       ('2022-07-04', '2022-07-04', 5, 007, 'Ispezione Fissaggio'),
       ('2022-07-25', '2022-07-29', 6, 007, 'Costruzione e Definizione Stanze'),
       ('2022-08-04', '2022-08-08', 6, 007, 'Pittura Pareti'),
       ('2022-08-10', '2022-08-11', 6, 007, 'Lavori di Giardinaggio'),
       ('2022-08-16', '2022-08-17', 6, 007, 'Installazione Casetta da Giardino'),
       ('2022-08-29', '2022-08-30', 6, 007, 'Installazione Vialetto'),
       ('2022-09-19', '2022-09-22', 6, 007, 'Aggiunta Aperture'),
       ('2022-10-03', '2022-10-07', 6, 007, 'Aggiunta Mobilio'),
       ('2022-11-07', '2022-11-14', 6, 007, 'Lavori di Falegnameria'),
       ('2022-11-18', NULL, 6, 007, 'Installazione Riscaldamento');
       
       
INSERT INTO Lavoratore(CodiceFiscale, Nome, Cognome, Sesso, Stipendio, DataNascita, DataAssunzione, Pensione)
VALUES ('LROFND92P09G491B', 'Facondo', 'Lori', 'M', 1200, '1992-09-09', '2016-12-04', FALSE),
	   ('BRSRMG88T24G491Q', 'Remigio', 'Baresi', 'M', 1200, '1988-12-24', '2016-12-04', FALSE),
       ('CRVLGU93E17E202N', 'Luigi', 'Cervi', 'M', 1200, '1993-05-17', '2016-12-04', FALSE),
       ('GTTTMS93B17I726F', 'Tommaso', 'Gatti', 'M', 1200, '1993-02-17', '2016-12-04', FALSE),
       ('MNCDLM88T70G491Y', 'Delma', 'Mancini', 'F', 1200, '1988-12-30', '2016-12-04', FALSE),
       ('BRGPTT92H62A944J', 'Pupetta', 'Bergamaschi', 'A', 1200, '1992-06-22', '2016-12-04', FALSE),
       ('VLDGRC84C20E864J', 'Greco', 'Vladimiro', 'M', 1200, '1984-03-20', '2016-12-04', FALSE),
       ('MNCDNN90D20A561S', 'Donnino', 'Mancini', 'M', 1200, '1990-04-20', '2016-12-04', FALSE),
       ('NPLGLI87E15G702E', 'Gioele', 'Napolitano', 'M', 1200, '1987-05-15', '2016-12-04', FALSE),
       ('TSCCAI84L16A241W', 'Caio', 'Toscani', 'M', 1200, '1984-07-16', '2016-12-04', FALSE),
       ('TRVPIO83B02G882Y', 'Pio', 'Trevisano', 'M', 1000, '1983-02-02', '2017-05-02', FALSE),
       ('FRRFBL80C50A071O', 'Fabiola', 'Ferri', 'F', 1000, '1980-03-10', '2017-05-02', FALSE),
       ('MNNNLM85S01E715V', 'Anselmo', 'Manna', 'M', 1000, '1985-11-01', '2017-05-02', FALSE),
       ('GRCRFN88E24G491V', 'Rufino', 'Greco', 'M', 1000, '1988-05-24', '2017-05-02', FALSE),
       ('CSTLNR92B44G491P', 'Eleonora', 'Costa', 'F', 1000, '1992-02-04', '2017-05-02', FALSE),
       ('FRRVNT92B06C631A', 'Valentino', 'Ferrari', 'M', 1000, '1992-02-06', '2017-05-02', FALSE),
       ('CSTBCC94C18B251C', 'Bacco', 'Castiglione', 'M', 1000, '1994-03-18', '2017-05-02', FALSE),
       ('PRTRMN86D18E451W', 'Romano', 'Protasio', 'M', 1000, '1986-04-18', '2017-05-02', FALSE),
       ('PNCGNR80A16E432R', 'Gennaro', 'Panicucci', 'M', 1000, '1980-01-16', '2017-05-02', FALSE),
       ('NPLLNE80A16F025F', 'Leone', 'Napolitani', 'M', 1000, '1980-01-16', '2017-05-02', FALSE),
       ('LMBLVN80A16G636V', 'Liviano', 'Lombardi', 'M', 1000, '1980-01-16', '2017-05-02', FALSE),
       ('BCHSRI91T15G832G', 'Isauro', 'Bucho', 'M', 1000, '1991-12-15', '2017-05-02', FALSE),
       ('CLBBRD95A24L522T', 'Eberardo', 'Calabresi', 'M', 1000, '1995-01-24', '2017-05-02', FALSE),
       ('MZZRMN79H14E715U', 'Erminio', 'Mazzi', 'M', 1000, '1979-06-14', '2017-05-02', FALSE),
       ('CTTLLD81B10H570C', 'Leopoldo', 'Cattaneo', 'M', 1000, '1981-02-10', '2017-05-02', FALSE),
       ('FRHLRT78L18A561X', 'Albert', 'Ferhati', 'M', 1000, '1978-07-18', '2017-05-02', FALSE),
       ('KCHRTM88H19G491Y', 'Rustem', 'Kochiu', 'M', 1000, '1988-06-19', '2017-05-02', FALSE),
       ('VLDPTR88B10G491X', 'Petrescu', 'Valdimiro', 'M', 1000, '1988-02-10', '2017-05-02', FALSE),
       ('FLPMRK88L29L736B', 'Marku', 'Filipescu', 'M', 1000, '1988-07-29', '2017-05-02', FALSE),
       ('FLLLDA84T14L736J', 'Aldo', 'Folliero', 'M', 1000, '1984-12-14', '2017-05-02', FALSE); 
       
       
INSERT INTO Capocantiere(CodiceFiscale, Nome, Cognome, Sesso, Stipendio, DataNascita, DataAssunzione, Pensione, NumeroMassimoLavoratori)
VALUES ('NPLVNI85A26L253C', 'Ivone', 'Napolitani', 'M', 1600, '1985-01-26', '2016-12-04', FALSE, 10),
	   ('PCCLVE75C27M172B', 'Elvio', 'Piccio', 'M', 1600, '1975-03-27', '2016-12-04', FALSE, 10),
       ('RSSCMN80C60I872L', 'Clementina', 'Russo', 'F', 1600, '1980-03-20', '2016-12-04', FALSE, 10),
       ('LROVIA83P57G916G', 'Iva', 'Lori', 'F', 1300, '1983-09-17', '2017-05-02', FALSE, 5),
       ('MNFBRD65S27A393X', 'Berardo', 'Manfrin', 'M', 1300, '1965-11-27', '2017-05-02', FALSE, 8),
       ('LCCLEI88S28D643Y', 'Elia', 'Lucchese', 'M', 1300, '1988-11-28', '2017-05-02', FALSE, 5),
       ('DVDRLA79E16F934P', 'Raul', 'Davide', 'M', 1300, '1979-05-16', '2017-05-02', FALSE, 5),
       ('NDRDRD82M10H501C', 'Eduardo', 'Endrizzi', 'M', 1300, '1982-08-10', '2017-05-02', FALSE, 5);


INSERT INTO Responsabile(CodiceFiscale, Nome, Cognome, Sesso, Stipendio, DataNascita, DataAssunzione, Pensione)
VALUES ('PNTFNC88B04G491N', 'Francesco', 'Panattoni', 'M', 4000, '1988-02-04', '2016-12-04', FALSE),
	   ('VZZLNZ92P26G491Z', 'Lorenzo', 'Vezzani', 'M', 4000, '1988-09-26', '2016-12-04', FALSE),
       ('NRDGCM80A01D612H', 'Giacomo', 'Nardi', 'M', 3000, '1980-01-01', '2017-05-02', FALSE),
       ('CRSMRT77D04L736D', 'Umberto', 'Caruso', 'M', 3000, '1977-04-04', '2017-05-02', FALSE),
       ('GVRCRN79L55H199W', 'Caterina', 'Giaveri', 'F', 3000, '1979-07-15', '2017-05-02', FALSE),
       ('VLSGAI81H48C342W', 'Gaia', 'Velasco', 'F', 3000, '1981-06-08', '2017-05-02', FALSE);
       
       
INSERT INTO Responsabilita(Responsabile, Progetto)
VALUES ('PNTFNC88B04G491N', 001),
	   ('VZZLNZ92P26G491Z', 001),
       ('NRDGCM80A01D612H', 002),
       ('CRSMRT77D04L736D', 002),
       ('GVRCRN79L55H199W', 003),
       ('VLSGAI81H48C342W', 003),
       ('PNTFNC88B04G491N', 004),
	   ('VZZLNZ92P26G491Z', 004),
       ('PNTFNC88B04G491N', 005),
	   ('VZZLNZ92P26G491Z', 005),
	   ('NRDGCM80A01D612H', 006),
       ('CRSMRT77D04L736D', 006),
       ('GVRCRN79L55H199W', 007),
       ('VLSGAI81H48C342W', 007);
       
INSERT INTO Calamita(Area, Data, Orario, Nome, Epicentro, Intensita)
VALUES  (001, '2017-01-18', '16:48:00', 'Valanga', 3.7, 9),
		(016, '2017-09-09', '21:00:00', 'Alluvione', 3.7, 9),
        (016, '2017-09-09', '22:15:00', 'Inondazione', 2, 8),
        (006, '2018-10-26', '14:00:00', 'Tornado', 100, 7),
        (017, '2018-10-26', '14:00:00', 'Tornado', 100, 7),
        (020, '2018-10-26', '14:00:00', 'Tornado', 100, 7),
        (008, '2018-10-29', '20:13:12', 'Tornado', 100, 8),
        (007, '2018-10-30', '14:44:44', 'Tornado', 100, 8),
        (004, '2018-11-01', '20:13:12', 'Tornado', 100, 8),
        (003, '2018-11-02', '15:17:24', 'Tornado', 100, 9),
        (013, '2018-11-02', '16:54:22', 'Tornado', 100, 9),
        (015, '2018-11-04', '16:44:44', 'Tornado', 100, 10),
		(016, '2019-11-01', '11:30:45', 'Terremoto', 60, 6),
        (001, '2019-11-26', '03:54:11', 'Terremoto', 30, 3),
        (002, '2019-11-26', '03:54:11', 'Terremoto', 30, 3),
        (004, '2019-11-26', '03:54:11', 'Terremoto', 30, 3),
		(011, '2019-11-26', '03:54:11', 'Terremoto', 30, 3),
        (013, '2019-11-26', '03:54:11', 'Terremoto', 30, 3),
        (015, '2019-11-26', '03:54:11', 'Terremoto', 30, 3),
        (017, '2022-07-03', '17:00:00', 'Valanga', 0.7, 8),
        (020, '2022-07-03', '17:00:00', 'Valanga', 0.7, 8),
        (010, '2022-09-15', '17:00:00', 'Alluvione', 4.2, 9),
        (010, '2022-09-15', '19:30:00', 'Inondazione', 1.2, 5);
        

DROP PROCEDURE IF EXISTS Popolamento_Impiego_Materiali;
DELIMITER $$
CREATE PROCEDURE Popolamento_Impiego_Materiali()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro INT DEFAULT 0;
    DECLARE nome_lavoro VARCHAR(50) DEFAULT '';
    DECLARE data_compravendita DATE DEFAULT NULL;
    DECLARE fornitore VARCHAR(50) DEFAULT '';
    DECLARE numero_fornitore INT DEFAULT 1;
    DECLARE numero_stringa_a INT DEFAULT 0;
    DECLARE numero_stringa_i INT DEFAULT 0;
    DECLARE numero_stringa_m INT DEFAULT 0;
    DECLARE numero_stringa_pia INT DEFAULT 0;
    DECLARE numero_stringa_pie INT DEFAULT 0;
    
    DECLARE lista_lavori CURSOR FOR
		SELECT L.Codice_Lavoro, L.TipologiaDiLavoro, L.DataInizio
        FROM Lavoro L
        WHERE L.DataFine < '2022-11-21';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
    OPEN lista_lavori;
    ciclo: LOOP
		FETCH lista_lavori INTO lavoro, nome_lavoro, data_compravendita;
		
		SET data_compravendita = DATE_SUB(data_compravendita, INTERVAL 1 WEEK);
        
        IF
			DAYOFWEEK(data_compravendita) = 7
        THEN
			SET data_compravendita = DATE_SUB(data_compravendita, INTERVAL 1 DAY);
        ELSEIF
			DAYOFWEEK(data_compravendita) = 1
        THEN
            SET data_compravendita = DATE_ADD(data_compravendita, INTERVAL 1 DAY);
        END IF;
        
        IF
			numero_fornitore = 1
        THEN
			SET fornitore = 'Alpha Express';
            SET numero_fornitore = 2;
		ELSEIF
			numero_fornitore = 2
        THEN
			SET fornitore = 'Beta Company';
            SET numero_fornitore = 3;
		ELSEIF
			numero_fornitore = 3
        THEN
			SET fornitore = 'Omega-Net';
            SET numero_fornitore = 4;
		ELSEIF
			numero_fornitore = 4
        THEN
			SET fornitore = 'Sigma Company';
            SET numero_fornitore = 1;
        END IF;
        
        IF
			nome_lavoro = 'Costruzione Fondamenta'
            OR
            nome_lavoro = 'Riparazione Fondamenta'
        THEN
			IF
				lavoro % 2 = 0
            THEN
                SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES(CONCAT('aaaa', numero_stringa_a), 'Acciaio', 200, 200, fornitore, 2500, data_compravendita),
					  (CONCAT('aaaa', numero_stringa_a+1), 'Cemento Armato', 1000, 1000, fornitore, 3000, data_compravendita);
					
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 200),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000);
                
                SET numero_stringa_a = numero_stringa_a + 2;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco a Base di Malta', 1000, 1000, fornitore, 3500, data_compravendita, 'Grigio');

                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 1000);                
				
                SET numero_stringa_i = numero_stringa_i + 1;
            ELSEIF
				lavoro % 2 <> 0
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES(CONCAT('aaaa', numero_stringa_a), 'Ferro', 200, 200, fornitore, 2500, data_compravendita),
					  (CONCAT('aaaa', numero_stringa_a+1), 'Cemento Armato', 1000, 1000, fornitore, 3000, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 200),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 2;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco Cementizio', 1000, 1000, fornitore, 3500, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 1000);
                
                SET numero_stringa_i = numero_stringa_i + 1;
            END IF;
		
		ELSEIF
			nome_lavoro = 'Posizionamento Barre di Rinforzo'
        THEN              
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Ferro', 100, 100, fornitore, 1250, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 100);
				
				SET numero_stringa_a = numero_stringa_a + 1;
		
        ELSEIF
			nome_lavoro = 'Costruzione Intelaiatura'
        THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 4000, 4000, fornitore, 20000, data_compravendita),
					   (CONCAT('aaaa', numero_stringa_a+1), 'Calcestruzzo', 500, 500, fornitore, 2000, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+2), 'Legno', 2000, 2000, fornitore, 3000, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 4000),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 500),
                       (lavoro, CONCAT('aaaa', numero_stringa_a+2), 2000);
				
				SET numero_stringa_a = numero_stringa_a + 3;
                
        ELSEIF
			nome_lavoro = 'Costruzione Sistema Antisismico'
            OR
            nome_lavoro = 'Riparazione Sistema Antisismico'
        THEN
			IF
				numero_fornitore = 1 OR numero_fornitore = 3
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Cemento Armato', 500, 500, fornitore, 1500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+2), 'Calcestruzzo', 200, 200, fornitore, 1000, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 500),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000),
                       (lavoro, CONCAT('aaaa', numero_stringa_a+2), 200);
				
				SET numero_stringa_a = numero_stringa_a + 3;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Laterizio', 20000, 20000, fornitore, 30000, data_compravendita, 'Cilindrica Cava');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN
                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Cemento Armato', 500, 500, fornitore, 1500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+2), 'Calcestruzzo', 200, 200, fornitore, 1000, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 500),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000),
                       (lavoro, CONCAT('aaaa', numero_stringa_a+2), 200);
				
				SET numero_stringa_a = numero_stringa_a + 3;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Calcestruzzo', 20000, 20000, fornitore, 30000, data_compravendita, 'Rettangolare Cava');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
			ELSEIF
				numero_fornitore = 4
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Cemento Armato', 500, 500, fornitore, 1500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+2), 'Calcestruzzo', 200, 200, fornitore, 1000, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 500),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000),
                       (lavoro, CONCAT('aaaa', numero_stringa_a+2), 200);
				
				SET numero_stringa_a = numero_stringa_a + 3;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Terra Piena', 20000, 20000, fornitore, 1000, data_compravendita, 'Nessuna');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
			END IF;
		
		ELSEIF
			nome_lavoro = 'Costruzione Pareti Esterne'
            OR
            nome_lavoro = 'Costruzione Pareti Interne'
            OR
            nome_lavoro = 'Riparazione Facciata'
        THEN
			IF
				numero_fornitore = 1
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Gesso', 5000, 5000, fornitore, 7500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5000),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 2;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Laterizio', 20000, 20000, fornitore, 30000, data_compravendita, 'Cilindrica Cava');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco Premiscelato', 10000, 10000, fornitore, 12500, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 10000);
                
                SET numero_stringa_i = numero_stringa_i + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN               
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Gesso', 5000, 5000, fornitore, 7500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5000),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 2;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Calcestruzzo', 20000, 20000, fornitore, 30000, data_compravendita, 'Rettangolare Cava');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco Cementizio', 3000, 3000, fornitore, 5800, data_compravendita, 'Grigio'),
					   (CONCAT('bbbb', numero_stringa_i+1), 'Intonaco a Base di Malta', 3000, 3000, fornitore, 5800, data_compravendita, 'Grigio'),
                       (CONCAT('bbbb', numero_stringa_i+2), 'Intonaco a Base di Calce', 3000, 3000, fornitore, 5800, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 3000),
					   (lavoro, CONCAT('bbbb', numero_stringa_i+1), 3000),
                       (lavoro, CONCAT('bbbb', numero_stringa_i+2), 3000);
                
                SET numero_stringa_i = numero_stringa_i + 3;
                
			ELSEIF
				numero_fornitore = 3
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Gesso', 5000, 5000, fornitore, 7500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5000),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 2;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 20000, 20000, fornitore, 25000, data_compravendita, 'Nessuna');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco a Base di Gesso', 3000, 3000, fornitore, 5800, data_compravendita, 'Grigio'),
					   (CONCAT('bbbb', numero_stringa_i+1), 'Intonaco a Base di Malta', 3000, 3000, fornitore, 5800, data_compravendita, 'Grigio'),
                       (CONCAT('bbbb', numero_stringa_i+2), 'Intonaco a Base di Calce', 3000, 3000, fornitore, 5800, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 3000),
					   (lavoro, CONCAT('bbbb', numero_stringa_i+1), 3000),
                       (lavoro, CONCAT('bbbb', numero_stringa_i+2), 3000);
                
                SET numero_stringa_i = numero_stringa_i + 3;
                
			ELSEIF
				numero_fornitore = 4
            THEN
                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Gesso', 5000, 5000, fornitore, 7500, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5000),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 2;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Terra Piena', 20000, 20000, fornitore, 10000, data_compravendita, 'Nessuna');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco a Base di Gesso', 3000, 3000, fornitore, 4800, data_compravendita, 'Grigio'),
					   (CONCAT('bbbb', numero_stringa_i+1), 'Intonaco a Base di Malta', 3000, 3000, fornitore, 4800, data_compravendita, 'Grigio'),
                       (CONCAT('bbbb', numero_stringa_i+2), 'Intonaco a Base di Calce', 3000, 3000, fornitore, 4800, data_compravendita, 'Grigio'),
                       (CONCAT('bbbb', numero_stringa_i+3), 'Intonaco Cementizio', 3000, 3000, fornitore, 4800, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 3000),
					   (lavoro, CONCAT('bbbb', numero_stringa_i+1), 3000),
                       (lavoro, CONCAT('bbbb', numero_stringa_i+2), 3000),
                       (lavoro, CONCAT('bbbb', numero_stringa_i+3), 3000);
                
                SET numero_stringa_i = numero_stringa_i + 4;
			END IF;
		
        ELSEIF
			nome_lavoro = 'Costruzione Tetti'
            OR
            nome_lavoro = 'Riparazione Tetto'
        THEN
			IF
				numero_fornitore = 1
            THEN
                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Laterizio', 20000, 20000, fornitore, 30000, data_compravendita, 'Cilindrica Cava');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco Premiscelato', 10000, 10000, fornitore, 22500, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 10000);
                
                SET numero_stringa_i = numero_stringa_i + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Calcestruzzo', 20000, 20000, fornitore, 30000, data_compravendita, 'Rettangolare Cava');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco Cementizio', 10000, 10000, fornitore, 17500, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 10000);
                
                SET numero_stringa_i = numero_stringa_i + 1;
                
			ELSEIF
				numero_fornitore = 3
            THEN              
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 20000, 20000, fornitore, 25000, data_compravendita, 'Nessuna');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco a Base di Malta', 10000, 10000, fornitore, 20000, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 10000);
                
                SET numero_stringa_i = numero_stringa_i + 1;
                
			ELSEIF
				numero_fornitore = 4
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
                VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 1000, 1000, fornitore, 1500, data_compravendita);
                      
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 1000);
				
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Terra Piena', 20000, 20000, fornitore, 10000, data_compravendita, 'Nessuna');
                
                INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 20000);
                
                SET numero_stringa_m = numero_stringa_m + 1;
                
                INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
                VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco a Base di Gesso', 10000, 10000, fornitore, 15000, data_compravendita, 'Grigio');
                
                INSERT INTO ImpiegoIntonaco(Lavoro, Lotto_Intonaco, Quantita)
                VALUES (lavoro, CONCAT('bbbb', numero_stringa_i), 10000);
                
                SET numero_stringa_i = numero_stringa_i + 1;
			END IF;
            
		ELSEIF
			nome_lavoro = 'Installazione Tubature del Gas'
        THEN
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Ferro', 100, 100, fornitore, 200, data_compravendita),
				   (CONCAT('aaaa', numero_stringa_a+1), 'Piombo', 100, 100, fornitore, 250, data_compravendita),
				   (CONCAT('aaaa', numero_stringa_a+2), 'Rame', 200, 200, fornitore, 600, data_compravendita);
                      
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 100),
				   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 100),
				   (lavoro, CONCAT('aaaa', numero_stringa_a+2), 200);
				
			SET numero_stringa_a = numero_stringa_a + 3;
                
		ELSEIF
			nome_lavoro = 'Installazione Cablaggio Elettrico'
            OR
            nome_lavoro = 'Riparazione Impianto Elettrico'
        THEN
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
            VALUES (CONCAT('aaaa', numero_stringa_a), 'Oro', 100, 100, fornitore, 200, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+1), 'Piombo', 100, 100, fornitore, 250, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+2), 'Rame', 200, 200, fornitore, 600, data_compravendita);
                      
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
            VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 100),
				   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 100),
                   (lavoro, CONCAT('aaaa', numero_stringa_a+2), 200);
				
			SET numero_stringa_a = numero_stringa_a + 3;
		
        ELSEIF
			nome_lavoro = 'Installazione Cablaggio Telefonico'
            OR
            nome_lavoro = 'Riparazione Impianto Telefonico'
        THEN                
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
            VALUES (CONCAT('aaaa', numero_stringa_a), 'Piombo', 100, 100, fornitore, 250, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+1), 'Rame', 200, 200, fornitore, 600, data_compravendita);
                      
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
            VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 100),
                   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 200);
				
			SET numero_stringa_a = numero_stringa_a + 2;
                
		ELSEIF
			nome_lavoro = 'Installazione Tubature Idrauliche'
            OR
            nome_lavoro = 'Riparazione Impianto Idraulico'
        THEN
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
            VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 100, 100, fornitore, 250, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+1), 'Ferro', 100, 100, fornitore, 200, data_compravendita);
                      
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
            VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 100),
				   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 100);
				
			SET numero_stringa_a = numero_stringa_a + 2;
                
        ELSEIF
			nome_lavoro = 'Pavimentazione'
            OR
            nome_lavoro = 'Riparazione Pavimento'
        THEN
			IF
				numero_fornitore = 1
            THEN                
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Parquet', 10000, 10000, fornitore, 15000, data_compravendita, 'Rettangolare', 1);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 10000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN               
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Ceramica', 10000, 10000, fornitore, 15000, data_compravendita, 'Quadrata', 2);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 10000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
			ELSEIF
				numero_fornitore = 3
            THEN                
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Marmo', 10000, 10000, fornitore, 15000, data_compravendita, 'Quadrata', 2);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 10000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
			ELSEIF
				numero_fornitore = 4
            THEN
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Legno', 10000, 10000, fornitore, 12500, data_compravendita, 'Ottagonale', 1);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 10000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
			END IF;
		
        ELSEIF
			nome_lavoro = 'Costruzione Caldaia'
        THEN
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 200, 200, fornitore, 500, data_compravendita);
                      
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 200);
				
			SET numero_stringa_a = numero_stringa_a + 1;
		
        ELSEIF
			nome_lavoro = 'Costruzione Camino'           
        THEN            
			IF
				numero_fornitore = 1
            THEN
                INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Arenaria', 100, 100, fornitore, 1500, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 100);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Calcestruzzo', 100, 100, fornitore, 1010, data_compravendita, 'Cilindrica Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 100);
				
				SET numero_stringa_m = numero_stringa_m + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Basalto', 100, 100, fornitore, 1500, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 100);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Terra Piena', 100, 100, fornitore, 1010, data_compravendita, 'Rettangolare Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 100);
				
				SET numero_stringa_m = numero_stringa_m + 1;
                
			ELSEIF
				numero_fornitore = 3
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 50, 50, fornitore, 510, data_compravendita, 'Nessuna'),
					   (CONCAT('cccc', numero_stringa_m+1), 'Mattone in Laterizio', 50, 50, fornitore, 730, data_compravendita, 'Cilindrica Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 50),
					   (lavoro, CONCAT('cccc', numero_stringa_m+1), 50);
				
				SET numero_stringa_m = numero_stringa_m + 2;
			
            ELSEIF
				numero_fornitore = 4
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 50, 50, fornitore, 510, data_compravendita, 'Nessuna'),
					   (CONCAT('cccc', numero_stringa_m+1), 'Mattone in Vetrocemento', 50, 50, fornitore, 730, data_compravendita, 'Nessuna');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 50),
					   (lavoro, CONCAT('cccc', numero_stringa_m+1), 50);
				
				SET numero_stringa_m = numero_stringa_m + 2;
			END IF;
            
		ELSEIF
			nome_lavoro = 'Costruzione e Definizione Stanze'
            OR
            nome_lavoro = 'Riparazione Muro'
            OR
            nome_lavoro = 'Riparazione Crepa'
		THEN                
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Gesso', 500, 500, fornitore, 750, data_compravendita);
                      
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 500);
				
			SET numero_stringa_a = numero_stringa_a + 1;
            
			IF
				numero_fornitore = 1
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Arenaria', 100, 100, fornitore, 1500, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 100);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Calcestruzzo', 1000, 1000, fornitore, 10010, data_compravendita, 'Cilindrica Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 1000);
				
				SET numero_stringa_m = numero_stringa_m + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
      
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Basalto', 100, 100, fornitore, 1500, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 100);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Terra Piena', 1000, 1000, fornitore, 10100, data_compravendita, 'Rettangolare Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 1000);
				
				SET numero_stringa_m = numero_stringa_m + 1;
                
			ELSEIF
				numero_fornitore = 3
            THEN                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 500, 500, fornitore, 5100, data_compravendita, 'Nessuna'),
					   (CONCAT('cccc', numero_stringa_m+1), 'Mattone in Laterizio', 500, 500, fornitore, 7300, data_compravendita, 'Cilindrica Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 500),
					   (lavoro, CONCAT('cccc', numero_stringa_m+1), 500);
				
				SET numero_stringa_m = numero_stringa_m + 2;
			
            ELSEIF
				numero_fornitore = 4
            THEN                
                
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 500, 500, fornitore, 5100, data_compravendita, 'Nessuna'),
					   (CONCAT('cccc', numero_stringa_m+1), 'Mattone in Vetrocemento', 500, 500, fornitore, 7300, data_compravendita, 'Nessuna');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 500),
					   (lavoro, CONCAT('cccc', numero_stringa_m+1), 500);
				
				SET numero_stringa_m = numero_stringa_m + 2;
			END IF;
        
        ELSEIF
			nome_lavoro = 'Aggiunta Aperture'
            OR 
			nome_lavoro = 'Riparazione Aperture'
        THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 10, 10, fornitore, 100, data_compravendita),
					   (CONCAT('aaaa', numero_stringa_a+1), 'Ferro', 5, 5, fornitore, 7, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+2), 'Legno', 50, 50, fornitore, 50, data_compravendita),
                       (CONCAT('aaaa', numero_stringa_a+3), 'Vetro', 10, 10, fornitore, 75, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10),
					   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 5),
                       (lavoro, CONCAT('aaaa', numero_stringa_a+2), 50),
                       (lavoro, CONCAT('aaaa', numero_stringa_a+3), 10);
					
				SET numero_stringa_a = numero_stringa_a + 4;
		ELSEIF
			nome_lavoro = 'Aggiunta Mobilio'
            OR
            nome_lavoro = 'Riparazione Mobilio'
        THEN                
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Ferro', 5, 5, fornitore, 7, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+1), 'Legno', 50, 50, fornitore, 50, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+2), 'Vetro', 5, 5, fornitore, 35, data_compravendita);
						  
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5),
                   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 50),
                   (lavoro, CONCAT('aaaa', numero_stringa_a+2), 5);
					
			SET numero_stringa_a = numero_stringa_a + 3;
		
        ELSEIF
			nome_lavoro = 'Lavori di Falegnameria'
            OR
            nome_lavoro = 'Installazione Casetta da Giardino'
            OR
            nome_lavoro = 'Costruzione Grondaie'
            OR
            nome_lavoro = 'Riparazione Grondaie'
            OR
            nome_lavoro = 'Riparazione Casetta da Giardino'
        THEN
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 5, 5, fornitore, 50, data_compravendita),
				   (CONCAT('aaaa', numero_stringa_a+1), 'Ferro', 5, 5, fornitore, 7, data_compravendita),
                   (CONCAT('aaaa', numero_stringa_a+2), 'Legno', 5, 5, fornitore, 5, data_compravendita);
						  
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5),
				   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 5),
                   (lavoro, CONCAT('aaaa', numero_stringa_a+2), 5);
				
			SET numero_stringa_a = numero_stringa_a + 3;
                
		ELSEIF
			nome_lavoro = 'Installazione Riscaldamento'
        THEN
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 1, 1, fornitore, 2, data_compravendita),
				   (CONCAT('aaaa', numero_stringa_a+1), 'Ferro', 1, 1, fornitore, 1, data_compravendita);
						  
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 1),
				   (lavoro, CONCAT('aaaa', numero_stringa_a+1), 1);
				
			SET numero_stringa_a = numero_stringa_a + 2;
        
        ELSEIF
			nome_lavoro = 'Installazione Vialetto'
        THEN
			IF
				numero_fornitore = 1
            THEN
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Argilla', 1000, 1000, fornitore, 1500, data_compravendita, 'Quadrata', 1);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 1000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN                
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Ceramica', 1000, 1000, fornitore, 1500, data_compravendita, 'Quadrata', 2);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 1000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
			ELSEIF
				numero_fornitore = 3
            THEN
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Marmo', 1000, 1000, fornitore, 1500, data_compravendita, 'Quadrata', 2);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 1000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
			ELSEIF
				numero_fornitore = 4
            THEN                
				INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
                VALUES (CONCAT('dddd', numero_stringa_pia), 'Piastrelle in Legno', 10000, 10000, fornitore, 12500, data_compravendita, 'Quadrata', 1);
                      
				INSERT INTO ImpiegoPiastrelle(Lavoro, Lotto_Piastrelle, Quantita)
                VALUES (lavoro, CONCAT('dddd', numero_stringa_pia), 10000);
				
				SET numero_stringa_pia = numero_stringa_pia + 1;
                
                INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Vetrocemento', 5, 5, fornitore, 73, data_compravendita, 'Nessuna');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 5);
				
				SET numero_stringa_m = numero_stringa_m + 1;
			END IF;
		
		ELSEIF
			nome_lavoro = 'Costruzione e Definizione Stanze'
		THEN            
			IF
				numero_fornitore = 1
            THEN
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Arenaria', 5, 5, fornitore, 50, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 5);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
                
				INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
                VALUES (CONCAT('cccc', numero_stringa_m), 'Mattone in Vetrocemento', 5, 5, fornitore, 50, data_compravendita, 'Cilindrica Cava');
                      
				INSERT INTO ImpiegoMattoni(Lavoro, Lotto_Mattoni, Quantita)
                VALUES (lavoro, CONCAT('cccc', numero_stringa_m), 5);
				
				SET numero_stringa_m = numero_stringa_m + 1;
                
            ELSEIF
				numero_fornitore = 2
            THEN
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Basalto', 5, 5, fornitore, 50, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 5);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
                
			ELSEIF
				numero_fornitore = 3
            THEN                               
				INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Legno', 10, 10, fornitore, 20, data_compravendita);
						  
				INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
				VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 10);
					
				SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Marmo', 5, 5, fornitore, 100, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 5);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
			
            ELSEIF
				numero_fornitore = 4
            THEN                
                INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
				VALUES (CONCAT('aaaa', numero_stringa_a), 'Oro', 5, 5, fornitore, 1000, data_compravendita);
                
                INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
                VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 5);
                
                SET numero_stringa_a = numero_stringa_a + 1;
                
				INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
                VALUES (CONCAT('eeee', numero_stringa_pie), 'Marmo', 5, 5, fornitore, 100, data_compravendita, 20);
                      
				INSERT INTO ImpiegoPietre(Lavoro, Lotto_Pietre, Quantita)
                VALUES (lavoro, CONCAT('eeee', numero_stringa_pie), 5);
				
				SET numero_stringa_pie = numero_stringa_pie + 1;
			END IF;
            
		ELSEIF
			nome_lavoro = 'Installazione Antenna Parabolica'
		THEN            
			INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
			VALUES (CONCAT('aaaa', numero_stringa_a), 'Ferro', 1, 1, fornitore, 1, data_compravendita);
						  
			INSERT INTO ImpiegoAltriMateriali(Lavoro, Lotto_Altri_Materiali, Quantita)
			VALUES (lavoro, CONCAT('aaaa', numero_stringa_a), 1);
					
			SET numero_stringa_a = numero_stringa_a + 1;
        END IF;
        
        IF 
			finito = 1
		THEN 
			LEAVE ciclo;
		END IF;
    END LOOP;
    CLOSE lista_lavori;
    
    INSERT INTO AltriMateriali(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto)
    VALUES (CONCAT('aaaa', numero_stringa_a), 'Acciaio', 10, 10, 'Sigma Company', 100, '2022-10-04'),
		   (CONCAT('aaaa', numero_stringa_a+1), 'Calcestruzzo', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+2), 'Cemento Armato', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+3), 'Ceramica', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+4), 'Ferro', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+5), 'Gesso', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+6), 'Legno', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+7), 'Oro', 1, 1, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+8), 'Piombo', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+9), 'Rame', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+10), 'Titanio', 10, 10, 'Sigma Company', 100, '2022-10-04'),
           (CONCAT('aaaa', numero_stringa_a+11), 'Vetro', 10, 10, 'Sigma Company', 100, '2022-10-04');
           
	INSERT INTO Intonaco(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Colore)
	VALUES (CONCAT('bbbb', numero_stringa_i), 'Intonaco a Base di Calce', 10, 10, 'Alpha Express', 200, '2022-10-05', 'Grigio'),
		   (CONCAT('bbbb', numero_stringa_i+1), 'Intonaco a Base di Gesso', 10, 10, 'Alpha Express', 200, '2022-10-05', 'Grigio'),
           (CONCAT('bbbb', numero_stringa_i+2), 'Intonaco a Base di Malta', 10, 10, 'Alpha Express', 200, '2022-10-05', 'Grigio'),
           (CONCAT('bbbb', numero_stringa_i+3), 'Intonaco Cementizio', 10, 10, 'Alpha Express', 200, '2022-10-05', 'Grigio'),
           (CONCAT('bbbb', numero_stringa_i+4), 'Intonaco Premiscelato', 10, 10, 'Alpha Express', 200, '2022-10-05', 'Grigio');
           
	INSERT INTO Mattoni(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Alveolatura)
	VALUES (CONCAT('cccc', numero_stringa_m), 'Blocco di Cemento', 10, 10, 'Omega-Net', 200, '2022-10-06', 'Rettangolare Cava'),
		   (CONCAT('cccc', numero_stringa_m+1), 'Mattone in Calcestruzzo', 10, 10, 'Omega-Net', 200, '2022-10-06', 'Rettangolare Cava'),
           (CONCAT('cccc', numero_stringa_m+2), 'Mattone in Laterizio', 10, 10, 'Omega-Net', 200, '2022-10-06', 'Cilndrica Cava'),
           (CONCAT('cccc', numero_stringa_m+3), 'Mattone in Terra Piena', 10, 10, 'Omega-Net', 200, '2022-10-06', 'Nessuna'),
           (CONCAT('cccc', numero_stringa_m+4), 'Mattone in Vetrocemento', 10, 10, 'Omega-Net', 200, '2022-10-06', 'Nessuna');
           
	INSERT INTO Piastrelle(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Forma, Fuga)
	VALUES (CONCAT('dddd', numero_stringa_pia), 'Parquet', 10, 10, 'Beta Company', 400, '2022-10-07', 'Quadrata', 1),
		   (CONCAT('dddd', numero_stringa_pia+1), 'Piastrelle in Argilla', 10, 10, 'Beta Company', 300, '2022-10-07', 'Quadrata', 1),
           (CONCAT('dddd', numero_stringa_pia+2), 'Piastrelle in Ceramica', 10, 10, 'Beta Company', 300, '2022-10-07', 'Quadrata', 1),
           (CONCAT('dddd', numero_stringa_pia+3), 'Piastrelle in Legno', 10, 10, 'Beta Company', 300, '2022-10-07', 'Quadrata', 1),
           (CONCAT('dddd', numero_stringa_pia+4), 'Piastrelle in Marmo', 10, 10, 'Beta Company', 300, '2022-10-07', 'Quadrata', 1);
	
    INSERT INTO Pietre(Codice_Lotto, Nome, QuantitaComprata, QuantitaStoccata, Fornitore, Costo, DataAcquisto, Spessore)
	VALUES (CONCAT('eeee', numero_stringa_pie), 'Arenaria', 10, 10, 'Sigma Company', 100, '2022-10-10', 10),
		   (CONCAT('eeee', numero_stringa_pie+1), 'Basalto', 10, 10, 'Sigma Company', 100, '2022-10-10', 10),
           (CONCAT('eeee', numero_stringa_pie+2), 'Granito', 10, 10, 'Sigma Company', 100, '2022-10-10', 50),
		   (CONCAT('eeee', numero_stringa_pie+3), 'Marmo', 10, 10, 'Sigma Company', 100, '2022-10-10', 50);

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS Popolamento_Turni_R;
DELIMITER $$
CREATE PROCEDURE Popolamento_Turni_R()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro INT DEFAULT 0;
    DECLARE nome_lavoro VARCHAR(50) DEFAULT '';
    DECLARE giorni INT DEFAULT 0;
    DECLARE data_inizio, data_fine DATE DEFAULT NULL;

	DECLARE lista_lavori CURSOR FOR
		SELECT L.Codice_Lavoro, L.TipologiaDiLavoro
        FROM Lavoro L;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
	OPEN lista_lavori;
    ciclo: LOOP
		FETCH lista_lavori INTO lavoro, nome_lavoro;
		IF
			nome_lavoro = 'Ispezione Fondamenta'
			OR
			nome_lavoro = 'Ispezione Intelaiatura'
			OR
			nome_lavoro = 'Ispezione Chiusura'
			OR
			nome_lavoro = 'Ispezione Fissaggio'
			OR
			nome_lavoro = 'Ispezione Adattamento'
			OR
			nome_lavoro = 'Ispezione Caldaia'
			OR
			nome_lavoro = 'Ispezione Crepa'
			OR
			nome_lavoro = 'Ispezione Umidità di Risalita'
			OR
			nome_lavoro = 'Ispezione Umidità Esterna'
			OR
			nome_lavoro = 'Ispezione Danni da Alluvione'
			OR
			nome_lavoro = 'Ispezione Danni da Calore'			
		THEN
			INSERT INTO Turni_Di_Lavoro_Responsabile(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
				SELECT L.Codice_Lavoro, R.Responsabile, CONCAT(L.DataInizio, ' ', '8:00:00') AS OrarioInizio, CONCAT(L.DataInizio, ' ', '12:00:00') AS OrarioFine
                FROM Responsabilita R INNER JOIN ProgettoEdilizio PE ON R.Progetto = PE.ID_Progetto
                                      INNER JOIN Lavoro L ON L.Progetto = PE.ID_Progetto
				WHERE L.Codice_Lavoro = lavoro;
                
			INSERT INTO Turni_Di_Lavoro_Responsabile(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
				SELECT L.Codice_Lavoro, R.Responsabile, CONCAT(L.DataInizio, ' ', '14:00:00') AS OrarioInizio, CONCAT(L.DataInizio, ' ', '18:00:00') AS OrarioFine
                FROM Responsabilita R INNER JOIN ProgettoEdilizio PE ON R.Progetto = PE.ID_Progetto
                                      INNER JOIN Lavoro L ON L.Progetto = PE.ID_Progetto
				WHERE L.Codice_Lavoro = lavoro;
            
		ELSEIF
			nome_lavoro = 'Ispezione Finale'
		THEN
			cicloResp: LOOP
				INSERT INTO Turni_Di_Lavoro_Responsabile(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
				SELECT L.Codice_Lavoro, R.Responsabile, CONCAT(DATE_ADD(L.DataInizio, INTERVAL giorni DAY), ' ', '8:00:00') AS OrarioInizio, CONCAT(DATE_ADD(L.DataInizio, INTERVAL giorni DAY), ' ', '12:00:00') AS OrarioFine
                FROM Responsabilita R INNER JOIN ProgettoEdilizio PE ON R.Progetto = PE.ID_Progetto
                                      INNER JOIN Lavoro L ON L.Progetto = PE.ID_Progetto
				WHERE L.Codice_Lavoro = lavoro;
                
				INSERT INTO Turni_Di_Lavoro_Responsabile(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
					SELECT L.Codice_Lavoro,R.Responsabile, CONCAT(DATE_ADD(L.DataInizio, INTERVAL giorni DAY), ' ', '14:00:00') AS OrarioInizio, CONCAT(DATE_ADD(L.DataInizio, INTERVAL giorni DAY), ' ', '18:00:00') AS OrarioFine
					FROM Responsabilita R INNER JOIN ProgettoEdilizio PE ON R.Progetto = PE.ID_Progetto
										  INNER JOIN Lavoro L ON L.Progetto = PE.ID_Progetto
					WHERE L.Codice_Lavoro = lavoro;
				
                SET data_inizio = (SELECT L.DataInizio
								   FROM Lavoro L
								   WHERE L.Codice_Lavoro = lavoro);
				SET data_fine = (SELECT L.DataFine
								 FROM Lavoro L
								 WHERE L.Codice_Lavoro = lavoro);
                
                IF
					giorni = 6
                    OR
                    DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                THEN
					SET giorni = 0;
                    LEAVE cicloResp;
				END IF;
                SET giorni = giorni + 1;
            END LOOP;
        END IF;
        
        IF 
			finito = 1
		THEN 
			LEAVE ciclo;
		END IF;
    END LOOP;
    CLOSE lista_lavori;
END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS Popolamento_Turni_CL1;
DELIMITER $$
CREATE PROCEDURE Popolamento_Turni_CL1()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro, numero_stadio INT DEFAULT 0;
    DECLARE nome_lavoro VARCHAR(50) DEFAULT '';
    DECLARE giorni INT DEFAULT 0;
    DECLARE data_inizio, data_fine DATE DEFAULT NULL;

	DECLARE lista_lavori CURSOR FOR
		SELECT L.Codice_Lavoro, L.TipologiaDiLavoro, L.DataInizio, L.StadioDiAvanzamento
        FROM Lavoro L
        WHERE L.DataFine <= '2017-05-02';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
	OPEN lista_lavori;
    ciclo: LOOP
		FETCH lista_lavori INTO lavoro, nome_lavoro, data_inizio, numero_stadio;
            IF
                nome_lavoro <> 'Ispezione Fondamenta'
                AND
                nome_lavoro <> 'Ispezione Intelaiatura'
                AND
                nome_lavoro <> 'Ispezione Chiusura'
                AND
                nome_lavoro <> 'Ispezione Fissaggio'
                AND
                nome_lavoro <> 'Ispezione Adattamento'
                AND
                nome_lavoro <> 'Ispezione Caldaia'
                AND
                nome_lavoro <> 'Ispezione Crepa'
                AND
                nome_lavoro <> 'Ispezione Umidità di Risalita'
                AND
                nome_lavoro <> 'Ispezione Umidità Esterna'
                AND
                nome_lavoro <> 'Ispezione Danni da Alluvione'
                AND
                nome_lavoro <> 'Ispezione Danni da Calore'	
                AND
                nome_lavoro <> 'Ispezione Finale'
            THEN
				IF
					lavoro % 2 = 0
				THEN
					cicloCap1: LOOP
						IF
							data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
							OR
							data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
						THEN
							INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
							VALUES (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                
							INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
							VALUES (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                
							SET data_fine = (SELECT L.DataFine
											 FROM Lavoro L
											 WHERE L.Codice_Lavoro = lavoro);
                                
							IF
								giorni = DATEDIFF(data_fine, data_inizio)-1
								OR
								DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
							THEN
								SET giorni = 0;
								LEAVE cicloCap1;
							END IF;
							SET giorni = giorni + 1;
                
						ELSEIF
							data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
							AND
							data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
						THEN
                            SET giorni = giorni + 1; 
						END IF;
						END LOOP;
                    ELSEIF
                        lavoro % 2 <> 0
                    THEN
                        cicloCap2: LOOP
                            IF
                                data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                OR
                                data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                            THEN
                                INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                VALUES (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                
                                INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                VALUES (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                    (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                    (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                
                                SET data_fine = (SELECT L.DataFine
                                                FROM Lavoro L
                                                WHERE L.Codice_Lavoro = lavoro);
                                
                                IF
                                    giorni = DATEDIFF(data_fine, data_inizio)-1
                                    OR
                                    DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                THEN
                                    SET giorni = 0;
                                    LEAVE cicloCap2;
                                END IF;
                                SET giorni = giorni + 1;
                
                            ELSEIF
                                data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                AND
                                data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                            THEN
                            SET giorni = giorni + 1; 
                            END IF;
                        END LOOP;
                    END IF;
                END IF;

            IF 
                finito = 1
            THEN 
                LEAVE ciclo;
            END IF;
    END LOOP;
    CLOSE lista_lavori;
END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS Popolamento_Turni_CL2;
DELIMITER $$
CREATE PROCEDURE Popolamento_Turni_CL2()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro INT DEFAULT 0;
    DECLARE numero_randomizzazione INT DEFAULT 1;
    DECLARE nome_lavoro VARCHAR(50) DEFAULT '';
    DECLARE giorni INT DEFAULT 0;
    DECLARE data_inizio, data_fine DATE DEFAULT NULL;

	DECLARE lista_lavori CURSOR FOR
		SELECT L.Codice_Lavoro, L.TipologiaDiLavoro, L.DataInizio
        FROM Lavoro L
        WHERE L.DataFine > '2017-05-02'
             AND 
              L.DataFine <= '2019-01-31'; 
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
    OPEN lista_lavori;
        ciclo: LOOP
            FETCH lista_lavori INTO lavoro, nome_lavoro, data_inizio;
                IF
                    nome_lavoro <> 'Ispezione Fondamenta'
                    AND
                    nome_lavoro <> 'Ispezione Intelaiatura'
                    AND
                    nome_lavoro <> 'Ispezione Chiusura'
                    AND
                    nome_lavoro <> 'Ispezione Fissaggio'
                    AND
                    nome_lavoro <> 'Ispezione Adattamento'
                    AND
                    nome_lavoro <> 'Ispezione Caldaia'
                    AND
                    nome_lavoro <> 'Ispezione Crepa'
                    AND
                    nome_lavoro <> 'Ispezione Umidità di Risalita'
                    AND
                    nome_lavoro <> 'Ispezione Umidità Esterna'
                    AND
                    nome_lavoro <> 'Ispezione Danni da Alluvione'
                    AND
                    nome_lavoro <> 'Ispezione Danni da Calore'	
                    AND
                    nome_lavoro <> 'Ispezione Finale'
                THEN  
                        IF
                            numero_randomizzazione = 1
                        THEN
                            ciclo1: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));

                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                        OR 
                                        finito = 1
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo1;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 2
                        THEN
                            ciclo2: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'MNFBRD65S27A393X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNFBRD65S27A393X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'LCCLEI88S28D643Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LCCLEI88S28D643Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo2;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 3
                        THEN
                            ciclo3: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'LROVIA83P57G916G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LROVIA83P57G916G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'TRVPIO83B02G882Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'TRVPIO83B02G882Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FRRFBL80C50A071O', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRRFBL80C50A071O', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNNNLM85S01E715V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNNNLM85S01E715V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'GRCRFN88E24G491V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'GRCRFN88E24G491V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CSTLNR92B44G491P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CSTLNR92B44G491P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo3;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 4
                        THEN
                            ciclo4: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'FRRVNT92B06C631A', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRRVNT92B06C631A', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CSTBCC94C18B251C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CSTBCC94C18B251C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PRTRMN86D18E451W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PRTRMN86D18E451W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PNCGNR80A16E432R', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PNCGNR80A16E432R', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLLNE80A16F025F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLLNE80A16F025F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo4;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 5
                        THEN
                            ciclo5: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'LMBLVN80A16G636V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LMBLVN80A16G636V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'BCHSRI91T15G832G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BCHSRI91T15G832G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CLBBRD95A24L522T', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CLBBRD95A24L522T', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MZZRMN79H14E715U', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MZZRMN79H14E715U', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CTTLLD81B10H570C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CTTLLD81B10H570C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo5;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 6
                        THEN
                            ciclo6: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'FRHLRT78L18A561X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRHLRT78L18A561X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'KCHRTM88H19G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'KCHRTM88H19G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'VLDPTR88B10G491X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'VLDPTR88B10G491X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FLPMRK88L29L736B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FLPMRK88L29L736B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FLLLDA84T14L736J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FLLLDA84T14L736J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo6;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        END IF;
                    END IF;
                IF
                    numero_randomizzazione >= 6
                THEN
                    SET numero_randomizzazione = 1;
                ELSEIF
                    numero_randomizzazione < 6
                THEN
                    SET numero_randomizzazione = numero_randomizzazione+1;
                END IF;    
                
                IF 
                    finito = 1
                THEN 
                    LEAVE ciclo;
                END IF;
        END LOOP;
        CLOSE lista_lavori;
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS Popolamento_Turni_CL3;
DELIMITER $$
CREATE PROCEDURE Popolamento_Turni_CL3()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro INT DEFAULT 0;
    DECLARE numero_randomizzazione INT DEFAULT 1;
    DECLARE nome_lavoro VARCHAR(50) DEFAULT '';
    DECLARE giorni INT DEFAULT 0;
    DECLARE data_inizio, data_fine DATE DEFAULT NULL;

	DECLARE lista_lavori CURSOR FOR
		SELECT L.Codice_Lavoro, L.TipologiaDiLavoro, L.DataInizio
        FROM Lavoro L
        WHERE L.DataFine > '2019-01-31'
             AND 
              L.DataFine <= '2020-11-30'; 
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
    OPEN lista_lavori;
        ciclo: LOOP
            FETCH lista_lavori INTO lavoro, nome_lavoro, data_inizio;
                IF
                    nome_lavoro <> 'Ispezione Fondamenta'
                    AND
                    nome_lavoro <> 'Ispezione Intelaiatura'
                    AND
                    nome_lavoro <> 'Ispezione Chiusura'
                    AND
                    nome_lavoro <> 'Ispezione Fissaggio'
                    AND
                    nome_lavoro <> 'Ispezione Adattamento'
                    AND
                    nome_lavoro <> 'Ispezione Caldaia'
                    AND
                    nome_lavoro <> 'Ispezione Crepa'
                    AND
                    nome_lavoro <> 'Ispezione Umidità di Risalita'
                    AND
                    nome_lavoro <> 'Ispezione Umidità Esterna'
                    AND
                    nome_lavoro <> 'Ispezione Danni da Alluvione'
                    AND
                    nome_lavoro <> 'Ispezione Danni da Calore'	
                    AND
                    nome_lavoro <> 'Ispezione Finale'
                THEN  
                        IF
                            numero_randomizzazione = 1
                        THEN
                            ciclo1: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));

                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                        OR 
                                        finito = 1
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo1;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 2
                        THEN
                            ciclo2: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'MNFBRD65S27A393X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNFBRD65S27A393X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'LCCLEI88S28D643Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LCCLEI88S28D643Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo2;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 3
                        THEN
                            ciclo3: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'LROVIA83P57G916G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LROVIA83P57G916G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'TRVPIO83B02G882Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'TRVPIO83B02G882Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FRRFBL80C50A071O', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRRFBL80C50A071O', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNNNLM85S01E715V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNNNLM85S01E715V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'GRCRFN88E24G491V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'GRCRFN88E24G491V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CSTLNR92B44G491P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CSTLNR92B44G491P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo3;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 4
                        THEN
                            ciclo4: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'FRRVNT92B06C631A', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRRVNT92B06C631A', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CSTBCC94C18B251C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CSTBCC94C18B251C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PRTRMN86D18E451W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PRTRMN86D18E451W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PNCGNR80A16E432R', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PNCGNR80A16E432R', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLLNE80A16F025F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLLNE80A16F025F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo4;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 5
                        THEN
                            ciclo5: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'LMBLVN80A16G636V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LMBLVN80A16G636V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'BCHSRI91T15G832G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BCHSRI91T15G832G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CLBBRD95A24L522T', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CLBBRD95A24L522T', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MZZRMN79H14E715U', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MZZRMN79H14E715U', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CTTLLD81B10H570C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CTTLLD81B10H570C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo5;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 6
                        THEN
                            ciclo6: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'FRHLRT78L18A561X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRHLRT78L18A561X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'KCHRTM88H19G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'KCHRTM88H19G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'VLDPTR88B10G491X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'VLDPTR88B10G491X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FLPMRK88L29L736B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FLPMRK88L29L736B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FLLLDA84T14L736J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FLLLDA84T14L736J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo6;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        END IF;
                    END IF;
                IF
                    numero_randomizzazione >= 6
                THEN
                    SET numero_randomizzazione = 1;
                ELSEIF
                    numero_randomizzazione < 6
                THEN
                    SET numero_randomizzazione = numero_randomizzazione+1;
                END IF;    
                
                IF 
                    finito = 1
                THEN 
                    LEAVE ciclo;
                END IF;
        END LOOP;
        CLOSE lista_lavori;
END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS Popolamento_Turni_CL4;
DELIMITER $$
CREATE PROCEDURE Popolamento_Turni_CL4()
BEGIN
	DECLARE finito INT DEFAULT 0;
    DECLARE lavoro INT DEFAULT 0;
    DECLARE numero_randomizzazione INT DEFAULT 1;
    DECLARE nome_lavoro VARCHAR(50) DEFAULT '';
    DECLARE giorni INT DEFAULT 0;
    DECLARE data_inizio, data_fine DATE DEFAULT NULL;

	DECLARE lista_lavori CURSOR FOR
		SELECT L.Codice_Lavoro, L.TipologiaDiLavoro, L.DataInizio
        FROM Lavoro L
        WHERE L.DataFine > '2020-11-30'
             AND 
              L.DataFine <= '2022-11-21'; 
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finito = 1;
    
    OPEN lista_lavori;
        ciclo: LOOP
            FETCH lista_lavori INTO lavoro, nome_lavoro, data_inizio;
                IF
                    nome_lavoro <> 'Ispezione Fondamenta'
                    AND
                    nome_lavoro <> 'Ispezione Intelaiatura'
                    AND
                    nome_lavoro <> 'Ispezione Chiusura'
                    AND
                    nome_lavoro <> 'Ispezione Fissaggio'
                    AND
                    nome_lavoro <> 'Ispezione Adattamento'
                    AND
                    nome_lavoro <> 'Ispezione Caldaia'
                    AND
                    nome_lavoro <> 'Ispezione Crepa'
                    AND
                    nome_lavoro <> 'Ispezione Umidità di Risalita'
                    AND
                    nome_lavoro <> 'Ispezione Umidità Esterna'
                    AND
                    nome_lavoro <> 'Ispezione Danni da Alluvione'
                    AND
                    nome_lavoro <> 'Ispezione Danni da Calore'	
                    AND
                    nome_lavoro <> 'Ispezione Finale'
                THEN  
                        IF
                            numero_randomizzazione = 1
                        THEN
                            ciclo1: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LROFND92P09G491B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BRSRMG88T24G491Q', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CRVLGU93E17E202N', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'GTTTMS93B17I726F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNCDLM88T70G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));

                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                        OR 
                                        finito = 1
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo1;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 2
                            AND
                            lavoro <> 174
                        THEN
                            ciclo2: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'MNFBRD65S27A393X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNFBRD65S27A393X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'LCCLEI88S28D643Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LCCLEI88S28D643Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BRGPTT92H62A944J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'VLDGRC84C20E864J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNCDNN90D20A561S', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLGLI87E15G702E', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'TSCCAI84L16A241W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo2;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 3
                        THEN
                            ciclo3: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'RSSCMN80C60I872L', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'LROVIA83P57G916G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LROVIA83P57G916G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'TRVPIO83B02G882Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'TRVPIO83B02G882Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FRRFBL80C50A071O', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRRFBL80C50A071O', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MNNNLM85S01E715V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MNNNLM85S01E715V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'GRCRFN88E24G491V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'GRCRFN88E24G491V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CSTLNR92B44G491P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CSTLNR92B44G491P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo3;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 4
                        THEN
                            ciclo4: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'FRRVNT92B06C631A', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRRVNT92B06C631A', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CSTBCC94C18B251C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CSTBCC94C18B251C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PRTRMN86D18E451W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PRTRMN86D18E451W', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PNCGNR80A16E432R', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PNCGNR80A16E432R', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLLNE80A16F025F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLLNE80A16F025F', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo4;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 5
                        THEN
                            ciclo5: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NDRDRD82M10H501C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'NPLVNI85A26L253C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'LMBLVN80A16G636V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'LMBLVN80A16G636V', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'BCHSRI91T15G832G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'BCHSRI91T15G832G', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CLBBRD95A24L522T', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CLBBRD95A24L522T', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'MZZRMN79H14E715U', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'MZZRMN79H14E715U', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'CTTLLD81B10H570C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'CTTLLD81B10H570C', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo5;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        ELSEIF 
                            numero_randomizzazione = 6
                        THEN
                            ciclo6: LOOP
                                IF
                                    data_inizio < CONCAT(YEAR(data_inizio), '-12-21')
                                    OR
                                    data_inizio > CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    INSERT INTO Turni_Di_Lavoro_Capocantiere(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'DVDRLA79E16F934P', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'PCCLVE75C27M172B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    INSERT INTO Turni_Di_Lavoro_Lavoratore(Lavoro, CodiceFiscale, OrarioInizio, OrarioFine)
                                    VALUES (lavoro, 'FRHLRT78L18A561X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FRHLRT78L18A561X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'KCHRTM88H19G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'KCHRTM88H19G491Y', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'VLDPTR88B10G491X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'VLDPTR88B10G491X', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FLPMRK88L29L736B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FLPMRK88L29L736B', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00')),
                                        (lavoro, 'FLLLDA84T14L736J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '8:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '12:00:00')),
                                        (lavoro, 'FLLLDA84T14L736J', CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '14:00:00'), CONCAT(DATE_ADD(data_inizio, INTERVAL giorni DAY), ' ', '18:00:00'));
                                    
                                    
                                    SET data_fine = (SELECT L.DataFine
                                                    FROM Lavoro L
                                                    WHERE L.Codice_Lavoro = lavoro);
                                    
                                    IF
                                        giorni = DATEDIFF(data_fine, data_inizio)-1
                                        OR
                                        DATE_ADD(data_inizio, INTERVAL giorni DAY)>= data_fine
                                    THEN
                                        SET giorni = 0;
                                        LEAVE ciclo6;
                                    END IF;
                                    SET giorni = giorni + 1;
                                ELSEIF
                                    data_inizio >= CONCAT(YEAR(data_inizio), '-12-21')
                                    AND
                                    data_inizio <= CONCAT(YEAR(data_inizio), '-01-07')
                                THEN
                                    SET giorni = giorni + 1; 
                                END IF;
                            END LOOP;
                        END IF;
                    END IF;
                IF
                    numero_randomizzazione >= 6
                THEN
                    SET numero_randomizzazione = 1;
                ELSEIF
                    numero_randomizzazione < 6
                THEN
                    SET numero_randomizzazione = numero_randomizzazione+1;
                END IF;    
                
                IF 
                    finito = 1
                THEN 
                    LEAVE ciclo;
                END IF;
        END LOOP;
        CLOSE lista_lavori;
END $$
DELIMITER ;


CALL Popolamento_Impiego_Materiali();
CALL Popolamento_Turni_R();
CALL Popolamento_Turni_CL1();
CALL Popolamento_Turni_CL2();
CALL Popolamento_Turni_CL3();
CALL Popolamento_Turni_CL4();
CALL Procedura_Aggiornamento_Costo_Lavori();
